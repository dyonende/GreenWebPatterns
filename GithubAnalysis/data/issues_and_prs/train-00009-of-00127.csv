ethereum/ethereum-org-website,633571725,1097,,"[{'action': 'opened', 'author': 'kiranvysya', 'comment_id': None, 'datetime': '2020-06-07 16:51:47+00:00', 'masked_author': 'username_0', 'text': ""**Describe the bug**\r\n\r\nGoogle Dart https://dart.dev/ is a simple and powerful programming language from Google. This currently powers flutter for mobile app development and gearing towards supporting web & desktop.\r\n\r\nIt will be a great idea to enable support for Dart language so that native dart developers can use this over other languages.\r\n\r\n<!-- A clear and concise description of what the bug is. -->\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Go to '...'\r\n2. Click on '....'\r\n3. Scroll down to '....'\r\n4. See error\r\n\r\n**Expected behavior**\r\n<!-- A clear and concise description of what you expected to happen. -->\r\n\r\n**Screenshots**\r\n<!-- If applicable, add screenshots to help explain your problem. -->\r\n\r\n**Desktop (please complete the following information):**\r\n - OS: [e.g. iOS]\r\n - Browser [e.g. chrome, safari]\r\n - Version [e.g. 22]\r\n\r\n**Smartphone (please complete the following information):**\r\n - Device: [e.g. iPhone6]\r\n - OS: [e.g. iOS8.1]\r\n - Browser [e.g. stock browser, safari]\r\n - Version [e.g. 22]\r\n\r\n**Additional context**\r\n<!-- Add any other context about the problem here. -->"", 'title': 'Support for Google Dart Language', 'type': 'issue'}]","<issue_start><issue_comment>Title: Support for Google Dart Language
username_0: **Describe the bug**

Google Dart https://dart.dev/ is a simple and powerful programming language from Google. This currently powers flutter for mobile app development and gearing towards supporting web & desktop.

It will be a great idea to enable support for Dart language so that native dart developers can use this over other languages.

<!-- A clear and concise description of what the bug is. -->

**To Reproduce**
Steps to reproduce the behavior:
1. Go to '...'
2. Click on '....'
3. Scroll down to '....'
4. See error

**Expected behavior**
<!-- A clear and concise description of what you expected to happen. -->

**Screenshots**
<!-- If applicable, add screenshots to help explain your problem. -->

**Desktop (please complete the following information):**
 - OS: [e.g. iOS]
 - Browser [e.g. chrome, safari]
 - Version [e.g. 22]

**Smartphone (please complete the following information):**
 - Device: [e.g. iPhone6]
 - OS: [e.g. iOS8.1]
 - Browser [e.g. stock browser, safari]
 - Version [e.g. 22]

**Additional context**
<!-- Add any other context about the problem here. -->"
kubernetes/website,446187969,14423,"{'number': 14423.0, 'repo': 'website', 'user_login': 'kubernetes'}","[{'action': 'opened', 'author': 'zacharysarah', 'comment_id': None, 'datetime': '2019-05-20T15:44:54Z', 'masked_author': 'username_0', 'text': 'This PR edits text added to `setup/_index.md` in #14163 for clarity.\r\n\r\n/assign @username_1', 'title': 'setup/_index.md: Edits for clarity', 'type': 'issue'}
 {'action': 'created', 'author': 'Rajakavitha1', 'comment_id': 494233051.0, 'datetime': '2019-05-21 04:16:41+00:00', 'masked_author': 'username_1', 'text': 'Thank you so much @username_0 !!!!\r\nYou just made me realize the power of words and the difference it makes in bringing clarity to the underlying concept. I was so lost in getting the technical aspects that I missed on the clarity. I sure have more to learn from you.\r\n\r\n/lgtm\r\n/approve', 'title': None, 'type': 'comment'}]","<issue_start><issue_comment>Title: setup/_index.md: Edits for clarity
username_0: This PR edits text added to `setup/_index.md` in #14163 for clarity.

/assign @username_1
<issue_comment>username_1: Thank you so much @username_0 !!!!
You just made me realize the power of words and the difference it makes in bringing clarity to the underlying concept. I was so lost in getting the technical aspects that I missed on the clarity. I sure have more to learn from you.

/lgtm
/approve"
gitpod-io/website,749540473,842,,"[{'action': 'opened', 'author': 'ChristinFrohne', 'comment_id': None, 'datetime': '2020-11-24 09:37:35+00:00', 'masked_author': 'username_0', 'text': '**Page not found:** \r\n\r\n- [ ]  https://www.gitpod.io/docs/languages-and-frameworks/ links to https://www.gitpod.io/docs/frameworks/pandas/ ->404\r\n\r\n- [ ] https://www.gitpod.io/docs/gitlab-integration/ and https://www.gitpod.io/docs/bitbucket-integration/ link to https://www.gitpod.io/access-control/ ->404\r\n\r\n- [ ] https://www.gitpod.io/docs/languages/dart/ links to https://gitpod.io/docs/config-docker -> 404\r\n\r\n- https://www.gitpod.io/docs/languages-and-frameworks/ links to https://www.gitpod.io/docs/kotlin-in-gitpod/ -> 404\r\n\r\n- [ ] https://www.gitpod.io/docs/languages/java/ links to https://www.gitpod.io/docs/vscode_extensions/ -> 404\r\n\r\n**Page not found -external links**\r\n- [ ] https://www.gitpod.io/blog/gitpodify/ to -> 404 https://github.com/Chocobozzz/PeerTube/blob/master/scripts/watch/client.sh\r\n\r\n- [ ] https://www.gitpod.io/blog/build-a-webhook-for-google-assistant/ links to https://developers.google.com/actions/samples/github -> 404\r\n\r\n\r\n**Missing alt-tag**\r\n\r\n- [ ] https://www.gitpod.io/static/vendor-bg-fe98fcdf8bdc08026e8d2d390dab1f5d.png   \r\n\r\n- [ ] https://www.gitpod.io/static/college-students-03ccf407c383bd4bcc1ef7dd2d5a78ec.png      \r\n\r\n- [ ] https://www.gitpod.io/static/recruiting-bg-5d4ca5b37cedee043d7d79a6dca6ca44.png      \r\n\r\n\r\n\r\n**meta description is too short**\r\nGoogle only crawls pages that have a certain length of meta description. 60-160 characters are recommended\r\n- [ ] all pages under /doc\r\nCurrent meta description `Documentation site for Gitpod.` \r\nSuggestion: `Explore the documentation to learn more about Gitpod.io and Gitpod Self-Hosted.`\r\n\r\n- [ ] /blog \r\ncurrent meta description: `Discover articles and tutorials about Gitpod`\r\nsuggestion: `Visit the Gitpod blog to learn about releases, tutorials, news and more`\r\n- [ ] meta description for gitpod.io needs to be updated. Currently `One-click ready-to-code development environments for GitHub`. New suggestion: `Gitpod is an open source developer platform automating the provisioning of ready-to-code development environments.""\r\n\r\nGenerally we should watch out that the meta description for new blog posts is not too short\r\n\r\nSearch Engine Result Pages (SERP)\r\n- [ ] somehow when searching for `gitpod`the result is not unfolded anymore. Features, Pricing, Self-hosted, Documentation and Community should have their own unfolded section. If searching for `gitpod documentation`is works fine. See:\r\n<img width=""1165"" alt=""Bildschirmfoto 2020-11-24 um 09 55 52"" src=""https://user-images.githubusercontent.com/46345125/100071591-84269000-2e3b-11eb-8600-e3caf0f2e387.png"">\r\n<img width=""1170"" alt=""Bildschirmfoto 2020-11-24 um 09 58 05"" src=""https://user-images.githubusercontent.com/46345125/100071638-90125200-2e3b-11eb-8314-fc6220d2cd16.png"">\r\n\r\n\r\n**Pages with too few words**\r\nwe should either add more words or  a robots.txt file so that these pages won\'t be crawled\r\n\r\n- [ ] Login Page -> 24 words, missing h1\r\n\r\n- [ ] community.gitpod.io/about -> 133 words\r\nLet\'s have a better description: `Gitpod is an open source developer platform automating the provisioning of ready-to-code development environments. It streamlines developer workflows by providing prebuilt, collaborative development environments in your browser - powered by VS Code. Natively integrated with GitLab, GitHub, and Bitbucket, Gitpod automatically and continuously prebuilds dev environments for all your branches. As a result team members can instantly start coding with fresh, ephemeral and fully-compiled dev environments - no matter if you are building a new feature, want to fix a bug or do a code review. Join our community, dive into discussions and get support around Gitpod. \r\n\r\n\r\n**Too big images**\r\n\r\n- [ ] https://cdn-images-1.medium.com/max/2608/1*mXM-VDzzmpXCvlAVvQIjVw.gif\r\n\r\n- [ ] https://www.gitpod.io/b052822cf8c7e4b70fb066e7be4b3562/phpDebug.gif\r\n\r\n- [ ] https://cdn-images-1.medium.com/max/12000/0*_7n4Htwk2Iz-r9qA\r\n\r\n- [ ] https://cdn-images-1.medium.com/max/2612/0*VHUqe81CKwdHq7uK\r\n\r\n- [ ] https://www.gitpod.io/f09a4d869c446fa2e6ad937346717421/scala-debug.gif\r\n\r\n- [ ] https://cdn-images-1.medium.com/max/6380/1*P6TPpSyXQp6SmmhHyVrmBw.png\r\n\r\n- [ ] https://cdn-images-1.medium.com/max/11236/1*YaZqFJXHopwW0puvvmfEew.png\r\n\r\n- [ ] https://cdn-images-1.medium.com/max/2608/0*-n2I6-4fPuKK70_5\r\n\r\n- [ ] https://cdn-images-1.medium.com/max/2608/0*vHysVOgVJaH6-j1t\r\n\r\n- [ ] https://cdn-images-1.medium.com/max/2608/0*yp7USviOYhUm_P40\r\n\r\n- [ ] https://www.gitpod.io/50ecb4a35fca8e860a7ec5f0730611e3/JavaDebug.gif\r\n\r\n[Truncated]\n\r\n- [ ] https://cdn-images-1.medium.com/max/2000/0*yVXQ8QGJEmCnNQ52\r\n\r\n- [ ] https://www.gitpod.io/1edb40359cd4db21cdcf05c6a5107423/GoDebug.gif\r\n\r\n- [ ] https://www.gitpod.io/142a874b67e07ab454c578b3cdb6c63d/RustDebug.gif\r\n\r\n\r\n\r\n**Duplicated headlines**\r\nH1 headlines shouldn\'t be copied and always differentiate otherwise Google sees the page as duplicated content\r\n\r\n- [ ] h1 on https://www.gitpod.io/docs/workspaces/ and https://www.gitpod.io/docs/self-hosted/latest/install/workspaces/\r\n\r\n- [ ] why are all self-hosted docs listed twice? e.g. https://www.gitpod.io/docs/self-hosted/latest/install/install-on-kubernetes/ and https://www.gitpod.io/docs/self-hosted/0.4.0/install/install-on-kubernetes/ can we delete one version?\r\n\r\n\r\n**General:**\r\n\r\n- [ ] to many JavaScript files', 'title': 'SEO Improvements', 'type': 'issue'}
 {'action': 'created', 'author': 'ChristinFrohne', 'comment_id': 734738774.0, 'datetime': '2020-11-27 09:30:52+00:00', 'masked_author': 'username_0', 'text': '- [ ] add a sitemap.xml\r\n**why?** it makes it easier for search engines to index dynamic content and the sitemap can help the search engine robots find files that are more difficult to access, such as images, faster and more easily. See [here](https://en.ryte.com/wiki/XML_Sitemap) for more details\r\n\r\n- [ ] please double-check canonical tags\r\n\r\n- [ ] add redirect: if the URL is accessed without the ""www"" it will not redirect to the page. This might cause frustrated users or duplicate content. E.g. https://www.gitpod.io/gitpod-vs-codespaces/\r\n\r\n- [ ] move all inline CSS to a central CSS-File\r\n**why?** This increases file size, increases maintainability of CSS and forces Browsers to do more Render-Cycles. -> The page loads 2 css files and uses 27 inline css blocks\r\n\r\n- [ ] check the headline order it should be h1 first followed by h2 if possible :)\r\n\r\n- [ ] missing title width and height attribute for ""Gitpod Screenshot"", ""D-Wave"", ""Rocket Launch"" and ""Gitpod Ready to Code""\r\n\r\n- [ ] please check ""The <head> area appears to be malformed. This can be due to text or invalid tags in your <head>, or due to meta or link tags in your <body>.\r\nOne effect of this issue might be missing meta information.\r\nThis can cause misinterpretations (missing canonical for instance).""\r\n\r\n- [ ] the w3c validator found 61 error(s) and 7 warning(s) -> see attached file\r\n[w3c validator found 61 error(s) and 7 warning(s).zip](https://github.com/gitpod-io/website/files/5606965/w3c.validator.found.61.error.s.and.7.warning.s.zip)\r\n\r\n- [ ] IP Canonicalization: If the IP (167.99.129.42) of this domain gets called, it should redirect to the real homepage of this domain. Not redirecting requests on the IP can cause duplicate content issues.\r\n\r\n- [ ] move all inline CSS to a central CSS-File: The page (www.gitpod.io) loads 2 css files and uses 30 inline css blocks\r\n\r\n- [ ] merge JavaScript into one file to improve page speed: The page loads 9 javascript files and uses 6 inline script blocks\r\n\r\n- [ ] caching: the Max Age Parameter of our cache settings seems to be pretty low\r\n""Value of Cache-Control: public, max-age=0, must-revalidate""\r\n\r\n- [ ] Visitor IPs are not properly anonymized for Google Analytics', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'nisarhassan12', 'comment_id': 738926615.0, 'datetime': '2020-12-04 17:53:38+00:00', 'masked_author': 'username_1', 'text': '@username_0 The current description for `gitpod.io` i.e the dashboard is `Describe your dev environment as code and get fully prebuilt, ready-to-code development environments for any GitLab, GitHub, and Bitbucket project.`\r\n\r\nI tried searching in the repo.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'nisarhassan12', 'comment_id': 739017688.0, 'datetime': '2020-12-04 21:00:27+00:00', 'masked_author': 'username_1', 'text': ""I'm un-able to optimize maybe two or three gifs i.e I tried many online gif optimizers but none of them seems to do the job.\r\n\r\nsee https://www.gitpod.io/f09a4d869c446fa2e6ad937346717421/scala-debug.gif for example. May the reason is that it's already optimized/compressed."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'nisarhassan12', 'comment_id': 739048822.0, 'datetime': '2020-12-04 22:06:22+00:00', 'masked_author': 'username_1', 'text': '![image](https://user-images.githubusercontent.com/46004116/101220040-c7d49180-36a6-11eb-8210-53486594ccdb.png)\r\n\r\nThanks, @username_0 I agree with you on this but it is something that has to be done on the Gitpod side.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'nisarhassan12', 'comment_id': 739054146.0, 'datetime': '2020-12-04 22:19:35+00:00', 'masked_author': 'username_1', 'text': ""why? This increases file size, increases maintainability of CSS and forces Browsers to do more Render-Cycles. -> The page loads 2 css files and uses 27 inline css blocks\r\n\r\nThis is something done automatically by Gatsby and the use of emotion for styling. I don't think we can do something about it but maybe I'm wrong. @svenefftinge What do you think? Thanks"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'nisarhassan12', 'comment_id': 739058557.0, 'datetime': '2020-12-04 22:31:51+00:00', 'masked_author': 'username_1', 'text': 'If all the 9 JS files are merged into one file it would make the site even slower. The site does ship more JavaScript then it has to and that is due to the use of Gatsby which uses `React`, `ReactDOM` and `Reach Router` for hydrating, there isn\'t much we could do about this unless we use something other than Gatsby.\r\n\r\nLet\'s say a user visiting only https://www.gitpod.io/imprint/ a page containing some text and in terms of ""The more then what you need is a burden.""  philosophy he should only be served only some HTML and CSS i.e things that are required for the User Experience but currently, the user landing on the imprint page would be served about 8 JS files which are not required for the User Experience/Goals.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'ChristinFrohne', 'comment_id': 740527544.0, 'datetime': '2020-12-08 10:17:51+00:00', 'masked_author': 'username_0', 'text': 'Somewhere there still seems to be the outdated description. See screenshot:\r\n<img width=""538"" alt=""Bildschirmfoto 2020-12-08 um 11 15 45"" src=""https://user-images.githubusercontent.com/46345125/101470891-e3f65e00-3946-11eb-8708-946c397baa7c.png"">', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'nisarhassan12', 'comment_id': 754660838.0, 'datetime': '2021-01-05 14:14:27+00:00', 'masked_author': 'username_1', 'text': ""@username_0 A vast amount of errors reported by the W3C validator are due to the inlining of CSS done by emotion and we can't do anything about that i.e the solution would be to not use emotion(or any other CSS-in-JS library) for styling and that would be a lot of effort. Not sure how much of an impact do these errors have on SEO?\r\n\r\n![image](https://user-images.githubusercontent.com/46004116/103656214-2765db80-4f8a-11eb-846a-57d27be0f0ef.png)\r\n\r\n\r\nThere are some other errors and warnings as well. I'll  try to address most of them in #932"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'ChristinFrohne', 'comment_id': 755958270.0, 'datetime': '2021-01-07 08:11:50+00:00', 'masked_author': 'username_0', 'text': ""@username_1 Google says “Although we do recommend using valid HTML, it’s not likely to be a factor in how Google crawls and indexes your site.” As the impact doesn't seem that high and as you said that it takes quite a lot of time to fix it, we can ignore this issue for now."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'ghuntley', 'comment_id': 799868269.0, 'datetime': '2021-03-16 01:12:04+00:00', 'masked_author': 'username_2', 'text': '', 'title': None, 'type': 'comment'}]","<issue_start><issue_comment>Title: SEO Improvements
username_0: **Page not found:** 

- [ ]  https://www.gitpod.io/docs/languages-and-frameworks/ links to https://www.gitpod.io/docs/frameworks/pandas/ ->404

- [ ] https://www.gitpod.io/docs/gitlab-integration/ and https://www.gitpod.io/docs/bitbucket-integration/ link to https://www.gitpod.io/access-control/ ->404

- [ ] https://www.gitpod.io/docs/languages/dart/ links to https://gitpod.io/docs/config-docker -> 404

- https://www.gitpod.io/docs/languages-and-frameworks/ links to https://www.gitpod.io/docs/kotlin-in-gitpod/ -> 404

- [ ] https://www.gitpod.io/docs/languages/java/ links to https://www.gitpod.io/docs/vscode_extensions/ -> 404

**Page not found -external links**
- [ ] https://www.gitpod.io/blog/gitpodify/ to -> 404 https://github.com/Chocobozzz/PeerTube/blob/master/scripts/watch/client.sh

- [ ] https://www.gitpod.io/blog/build-a-webhook-for-google-assistant/ links to https://developers.google.com/actions/samples/github -> 404


**Missing alt-tag**

- [ ] https://www.gitpod.io/static/vendor-bg-fe98fcdf8bdc08026e8d2d390dab1f5d.png   

- [ ] https://www.gitpod.io/static/college-students-03ccf407c383bd4bcc1ef7dd2d5a78ec.png      

- [ ] https://www.gitpod.io/static/recruiting-bg-5d4ca5b37cedee043d7d79a6dca6ca44.png      



**meta description is too short**
Google only crawls pages that have a certain length of meta description. 60-160 characters are recommended
- [ ] all pages under /doc
Current meta description `Documentation site for Gitpod.` 
Suggestion: `Explore the documentation to learn more about Gitpod.io and Gitpod Self-Hosted.`

- [ ] /blog 
current meta description: `Discover articles and tutorials about Gitpod`
suggestion: `Visit the Gitpod blog to learn about releases, tutorials, news and more`
- [ ] meta description for gitpod.io needs to be updated. Currently `One-click ready-to-code development environments for GitHub`. New suggestion: `Gitpod is an open source developer platform automating the provisioning of ready-to-code development environments.""

Generally we should watch out that the meta description for new blog posts is not too short

Search Engine Result Pages (SERP)
- [ ] somehow when searching for `gitpod`the result is not unfolded anymore. Features, Pricing, Self-hosted, Documentation and Community should have their own unfolded section. If searching for `gitpod documentation`is works fine. See:
<img width=""1165"" alt=""Bildschirmfoto 2020-11-24 um 09 55 52"" src=""https://user-images.githubusercontent.com/46345125/100071591-84269000-2e3b-11eb-8600-e3caf0f2e387.png"">
<img width=""1170"" alt=""Bildschirmfoto 2020-11-24 um 09 58 05"" src=""https://user-images.githubusercontent.com/46345125/100071638-90125200-2e3b-11eb-8314-fc6220d2cd16.png"">


**Pages with too few words**
we should either add more words or  a robots.txt file so that these pages won't be crawled

- [ ] Login Page -> 24 words, missing h1

- [ ] community.gitpod.io/about -> 133 words
Let's have a better description: `Gitpod is an open source developer platform automating the provisioning of ready-to-code development environments. It streamlines developer workflows by providing prebuilt, collaborative development environments in your browser - powered by VS Code. Natively integrated with GitLab, GitHub, and Bitbucket, Gitpod automatically and continuously prebuilds dev environments for all your branches. As a result team members can instantly start coding with fresh, ephemeral and fully-compiled dev environments - no matter if you are building a new feature, want to fix a bug or do a code review. Join our community, dive into discussions and get support around Gitpod. 


**Too big images**

- [ ] https://cdn-images-1.medium.com/max/2608/1*mXM-VDzzmpXCvlAVvQIjVw.gif

- [ ] https://www.gitpod.io/b052822cf8c7e4b70fb066e7be4b3562/phpDebug.gif

- [ ] https://cdn-images-1.medium.com/max/12000/0*_7n4Htwk2Iz-r9qA

- [ ] https://cdn-images-1.medium.com/max/2612/0*VHUqe81CKwdHq7uK

- [ ] https://www.gitpod.io/f09a4d869c446fa2e6ad937346717421/scala-debug.gif

- [ ] https://cdn-images-1.medium.com/max/6380/1*P6TPpSyXQp6SmmhHyVrmBw.png

- [ ] https://cdn-images-1.medium.com/max/11236/1*YaZqFJXHopwW0puvvmfEew.png

- [ ] https://cdn-images-1.medium.com/max/2608/0*-n2I6-4fPuKK70_5

- [ ] https://cdn-images-1.medium.com/max/2608/0*vHysVOgVJaH6-j1t

- [ ] https://cdn-images-1.medium.com/max/2608/0*yp7USviOYhUm_P40

- [ ] https://www.gitpod.io/50ecb4a35fca8e860a7ec5f0730611e3/JavaDebug.gif

[Truncated]

- [ ] https://cdn-images-1.medium.com/max/2000/0*yVXQ8QGJEmCnNQ52

- [ ] https://www.gitpod.io/1edb40359cd4db21cdcf05c6a5107423/GoDebug.gif

- [ ] https://www.gitpod.io/142a874b67e07ab454c578b3cdb6c63d/RustDebug.gif



**Duplicated headlines**
H1 headlines shouldn't be copied and always differentiate otherwise Google sees the page as duplicated content

- [ ] h1 on https://www.gitpod.io/docs/workspaces/ and https://www.gitpod.io/docs/self-hosted/latest/install/workspaces/

- [ ] why are all self-hosted docs listed twice? e.g. https://www.gitpod.io/docs/self-hosted/latest/install/install-on-kubernetes/ and https://www.gitpod.io/docs/self-hosted/0.4.0/install/install-on-kubernetes/ can we delete one version?


**General:**

- [ ] to many JavaScript files
<issue_comment>username_0: - [ ] add a sitemap.xml
**why?** it makes it easier for search engines to index dynamic content and the sitemap can help the search engine robots find files that are more difficult to access, such as images, faster and more easily. See [here](https://en.ryte.com/wiki/XML_Sitemap) for more details

- [ ] please double-check canonical tags

- [ ] add redirect: if the URL is accessed without the ""www"" it will not redirect to the page. This might cause frustrated users or duplicate content. E.g. https://www.gitpod.io/gitpod-vs-codespaces/

- [ ] move all inline CSS to a central CSS-File
**why?** This increases file size, increases maintainability of CSS and forces Browsers to do more Render-Cycles. -> The page loads 2 css files and uses 27 inline css blocks

- [ ] check the headline order it should be h1 first followed by h2 if possible :)

- [ ] missing title width and height attribute for ""Gitpod Screenshot"", ""D-Wave"", ""Rocket Launch"" and ""Gitpod Ready to Code""

- [ ] please check ""The <head> area appears to be malformed. This can be due to text or invalid tags in your <head>, or due to meta or link tags in your <body>.
One effect of this issue might be missing meta information.
This can cause misinterpretations (missing canonical for instance).""

- [ ] the w3c validator found 61 error(s) and 7 warning(s) -> see attached file
[w3c validator found 61 error(s) and 7 warning(s).zip](https://github.com/gitpod-io/website/files/5606965/w3c.validator.found.61.error.s.and.7.warning.s.zip)

- [ ] IP Canonicalization: If the IP (167.99.129.42) of this domain gets called, it should redirect to the real homepage of this domain. Not redirecting requests on the IP can cause duplicate content issues.

- [ ] move all inline CSS to a central CSS-File: The page (www.gitpod.io) loads 2 css files and uses 30 inline css blocks

- [ ] merge JavaScript into one file to improve page speed: The page loads 9 javascript files and uses 6 inline script blocks

- [ ] caching: the Max Age Parameter of our cache settings seems to be pretty low
""Value of Cache-Control: public, max-age=0, must-revalidate""

- [ ] Visitor IPs are not properly anonymized for Google Analytics
<issue_comment>username_1: @username_0 The current description for `gitpod.io` i.e the dashboard is `Describe your dev environment as code and get fully prebuilt, ready-to-code development environments for any GitLab, GitHub, and Bitbucket project.`

I tried searching in the repo.
<issue_comment>username_1: I'm un-able to optimize maybe two or three gifs i.e I tried many online gif optimizers but none of them seems to do the job.

see https://www.gitpod.io/f09a4d869c446fa2e6ad937346717421/scala-debug.gif for example. May the reason is that it's already optimized/compressed.
<issue_comment>username_1: ![image](https://user-images.githubusercontent.com/46004116/101220040-c7d49180-36a6-11eb-8210-53486594ccdb.png)

Thanks, @username_0 I agree with you on this but it is something that has to be done on the Gitpod side.
<issue_comment>username_1: why? This increases file size, increases maintainability of CSS and forces Browsers to do more Render-Cycles. -> The page loads 2 css files and uses 27 inline css blocks

This is something done automatically by Gatsby and the use of emotion for styling. I don't think we can do something about it but maybe I'm wrong. @svenefftinge What do you think? Thanks
<issue_comment>username_1: If all the 9 JS files are merged into one file it would make the site even slower. The site does ship more JavaScript then it has to and that is due to the use of Gatsby which uses `React`, `ReactDOM` and `Reach Router` for hydrating, there isn't much we could do about this unless we use something other than Gatsby.

Let's say a user visiting only https://www.gitpod.io/imprint/ a page containing some text and in terms of ""The more then what you need is a burden.""  philosophy he should only be served only some HTML and CSS i.e things that are required for the User Experience but currently, the user landing on the imprint page would be served about 8 JS files which are not required for the User Experience/Goals.
<issue_comment>username_0: Somewhere there still seems to be the outdated description. See screenshot:
<img width=""538"" alt=""Bildschirmfoto 2020-12-08 um 11 15 45"" src=""https://user-images.githubusercontent.com/46345125/101470891-e3f65e00-3946-11eb-8708-946c397baa7c.png"">
<issue_comment>username_1: @username_0 A vast amount of errors reported by the W3C validator are due to the inlining of CSS done by emotion and we can't do anything about that i.e the solution would be to not use emotion(or any other CSS-in-JS library) for styling and that would be a lot of effort. Not sure how much of an impact do these errors have on SEO?

![image](https://user-images.githubusercontent.com/46004116/103656214-2765db80-4f8a-11eb-846a-57d27be0f0ef.png)


There are some other errors and warnings as well. I'll  try to address most of them in #932
<issue_comment>username_0: @username_1 Google says “Although we do recommend using valid HTML, it’s not likely to be a factor in how Google crawls and indexes your site.” As the impact doesn't seem that high and as you said that it takes quite a lot of time to fix it, we can ignore this issue for now."
gohugoio/hugo,701141756,7691,,"[{'action': 'opened', 'author': 'bric3', 'comment_id': None, 'datetime': '2020-09-14 14:11:43+00:00', 'masked_author': 'username_0', 'text': '<!-- Please answer these questions before submitting your issue. Thanks! -->\r\n\r\n### What version of Hugo are you using (`hugo version`)?\r\n\r\n<pre>\r\n$ hugo version\r\nHugo Static Site Generator v0.75.0/extended darwin/amd64 BuildDate: unknown\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release? \r\n\r\nYes\r\n\r\n----------\r\n\r\nFor reference, I wrote [this article](https://blog.arkey.fr/2020/04/23/tackling-hugo-integration-of-asciidoctor/) on how to integrate asciidoctor with hugo. So I\'m currently basing my integration on the `PATH` environment variable _hack_.\r\n\r\n```bash\r\n#!/bin/sh\r\n\r\nif [ -f /usr/local/bin/asciidoctor ]; then\r\n  ad=""/usr/local/bin/asciidoctor""\r\nelse\r\n  ad=""/usr/bin/asciidoctor""\r\nfi\r\n\r\nbasedir=.\r\n\r\n$ad --trace \\\r\n  --base-dir ${basedir} \\\r\n  --require asciidoctor-diagram \\\r\n  --no-header-footer \\\r\n  --attribute docinfo=shared \\\r\n  --attribute nofooter \\\r\n  --attribute skip-front-matter \\\r\n  --attribute library=asciidoctor-ruby \\\r\n  --attribute icons=font \\\r\n  --attribute sectlinks \\\r\n  --attribute sectanchors \\\r\n  --attribute figure-caption! \\\r\n  --attribute source-highlighter=highlightjs \\\r\n  --attribute experimental=true \\\r\n  --attribute out_dir=./resources/_gen/diagram \\\r\n  --attribute toc-title! \\\r\n  --attribute imagesoutdir=./.asciidoctor \\\r\n  --attribute imagesdir=./.asciidoctor \\\r\n  -\r\n```\r\n\r\nSince Hugo 0.74, there\'s a new asciidoctor integration in #7281 by @username_1 that looks promising. However converting this bash script to the equivalent in toml hoing to remove the trickery didn\'t work as expected:\r\n\r\n1. Without `imagesdir` and `imagesoutdir` tricks\r\nUsing `workingFolderCurrent = true` to make the integration working didn\'t yield the expected rendering.\r\n\r\nParameter | Default | Comment\r\n--- | --- | --- \r\nworkingfoldercurrent | `false` | Set the working folder to the rendered `adoc` file, so [include](https://asciidoctor.org/docs/asciidoc-syntax-quick-reference/#include-files) will work with relative paths. This setting uses the `asciidoctor` cli parameter `--base-dir` and attribute `outdir=`. For rendering [asciidoctor-diagram](https://asciidoctor.org/docs/asciidoctor-diagram/)  `workingfoldercurrent` must be set to `true`.\r\n\r\n\r\n```toml\r\n[markup.asciidocext]\r\n    extensions = [""asciidoctor-diagram""]\r\n    workingFolderCurrent = true\r\n    trace = true\r\n\r\n    [markup.asciidocext.attributes]\r\n        ""docinfo"" = ""shared""\r\n        ""nofooter"" = """"\r\n        ""skip-front-matter"" = """"\r\n        ""library"" = ""asciidoctor-ruby""\r\n        ""icons"" = ""font""\r\n        ""sectlinks"" = """"\r\n        ""sectanchors"" = """"\r\n        ""figure-caption!"" = """"\r\n        ""source-highlighter"" = ""highlightjs""\r\n        ""experimental"" = ""true""\r\n        ""toc-title!"" = """"\r\n\r\n# inheriting wordpress then jekyll conventions\r\n[permalinks]\r\n[Truncated]\n├── 2018-05-04-programmatic-tail-call-elimination-in-java.md\r\n├── 2019-02-14-immutable-jackson-pojo-with-lombok.md\r\n├── 2019-09-13-watchservice-and-bind-mount.fr.md\r\n├── 2020-03-12-building-corretto.adoc\r\n├── 2020-05-03-MaxRamPercentage-is-not-what-i-wished-for.adoc\r\n├── 2020-06-23-simple-g1gc-tuning.adoc\r\n├── 2020-08-08-watchman.adoc\r\n├── 2020-08-20-Exploring-java-native-memory.adoc\r\n└── _index.md\r\n\r\n1 directory, 15 files\r\n```\r\n\r\nNote you need to use both `imagesdir` and `imagesoutdir`, otherwise asciidoc doesn\'t render the proper HTML, and/or cannot inline SVGs.\r\n\r\nSo that\'s quite unfortunate. My current script used the base hugo site folder as the `basedir`, so I could avoid _polluting_ the content folder, but had the side effect of forcing me to inline files (even if I personnally wanted that anyway).\r\n\r\nI\'m not familiar with GoLang, and even less with hugo internals, but it seems to me the `outdir` be set to use the permalink here.\r\n\r\nhttps://github.com/gohugoio/hugo/blob/fef924baf1872cd97663b383b0310b6651caa8d4/markup/asciidocext/convert.go#L123-L159', 'title': '[Asciidoctorext] Generated diagrams are not generated at the right place with custom permalink', 'type': 'issue'}
 {'action': 'created', 'author': 'bric3', 'comment_id': 692096234.0, 'datetime': '2020-09-14 14:30:17+00:00', 'masked_author': 'username_0', 'text': ""Just in case, here's the installed version of asciidoctor : \r\n\r\n```shell\r\n$ gem query --local\r\n\r\n*** LOCAL GEMS ***\r\n\r\nasciidoctor (2.0.10)\r\nasciidoctor-diagram (2.0.2)\r\nasciidoctor-html5s (0.5.0, 0.4.1)\r\nbigdecimal (2.0.0, default: 1.4.1)\r\nbundler (2.1.4, default: 1.17.2)\r\nCFPropertyList (3.0.2, 2.3.6)\r\ncmath (default: 1.0.0)\r\ncsv (3.1.7, 3.1.6, 3.1.5, 3.1.3, 3.1.2, default: 3.0.9)\r\ndate (3.0.1, 3.0.0, default: 2.0.0)\r\ndbm (1.1.0, default: 1.0.0)\r\ndid_you_mean (1.4.0, 1.3.0)\r\ne2mmap (default: 0.1.0)\r\netc (1.1.0, default: 1.0.1)\r\nfcntl (default: 1.0.0)\r\nfiddle (default: 1.0.0)\r\nfileutils (1.4.1, default: 1.1.0)\r\nforwardable (1.3.1, default: 1.2.0)\r\nhpricot (0.8.6)\r\nio-console (0.5.6, 0.5.5, 0.5.4, default: 0.4.7)\r\nipaddr (default: 1.2.2)\r\nirb (1.2.6, 1.2.4, 1.2.3, 1.2.1, default: 1.0.0)\r\njson (2.3.1, 2.3.0, default: 2.1.0)\r\nlibxml-ruby (3.2.0, 3.1.0)\r\nlogger (1.4.2, default: 1.3.0)\r\nmatrix (0.3.0, default: 0.1.0)\r\nmini_portile2 (2.5.0, 2.4.0)\r\nminitest (5.14.2, 5.14.1, 5.14.0, 5.11.3)\r\nmustache (1.1.1)\r\nmutex_m (default: 0.1.0)\r\nnet-telnet (0.2.0)\r\nnokogiri (1.10.10, 1.10.9, 1.10.8, 1.10.7, 1.10.1)\r\nopenssl (default: 2.1.2)\r\nostruct (default: 0.1.0)\r\npower_assert (1.2.0, 1.1.7, 1.1.6, 1.1.5, 1.1.3)\r\nprime (default: 0.1.0)\r\npsych (default: 3.1.0)\r\nrake (13.0.1, 12.3.2)\r\nrdiscount (2.2.0.1)\r\nrdoc (6.2.1, default: 6.1.0)\r\nreline (0.1.5, 0.1.4, 0.1.3, 0.1.2)\r\nrexml (3.2.4, 3.2.3, default: 3.1.9)\r\nronn (0.7.3)\r\nrss (0.2.9, 0.2.8, default: 0.2.7)\r\nscanf (default: 1.0.0)\r\nsdbm (default: 1.0.0)\r\nshell (0.8.0, default: 0.7)\r\nsqlite3 (1.4.2, 1.3.13)\r\nstringio (0.1.3, 0.1.0, default: 0.0.2)\r\nstrscan (1.0.3, default: 1.0.0)\r\nsync (default: 0.5.0)\r\ntest-unit (3.3.5, 3.2.9)\r\nthread_safe (0.3.6)\r\nthwait (default: 0.1.0)\r\ntracer (default: 0.1.0)\r\nwebrick (1.6.0, default: 1.4.2)\r\nxmlrpc (0.3.0)\r\nzlib (1.1.0, default: 1.0.0)\r\n```"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'muenchhausen', 'comment_id': 695916596.0, 'datetime': '2020-09-21 06:01:42+00:00', 'masked_author': 'username_1', 'text': 'Thanks for sharing this problem with detailed descriptions!! Sorry, I was quite busy the last days. Can you share a simple sample repo with that problem? Or we can extend https://github.com/username_1/hugo_asciidoc_ddd[my sample]?', 'title': None, 'type': 'comment'}]","<issue_start><issue_comment>Title: [Asciidoctorext] Generated diagrams are not generated at the right place with custom permalink
username_0: <!-- Please answer these questions before submitting your issue. Thanks! -->

### What version of Hugo are you using (`hugo version`)?

<pre>
$ hugo version
Hugo Static Site Generator v0.75.0/extended darwin/amd64 BuildDate: unknown
</pre>

### Does this issue reproduce with the latest release? 

Yes

----------

For reference, I wrote [this article](https://blog.arkey.fr/2020/04/23/tackling-hugo-integration-of-asciidoctor/) on how to integrate asciidoctor with hugo. So I'm currently basing my integration on the `PATH` environment variable _hack_.

```bash
#!/bin/sh

if [ -f /usr/local/bin/asciidoctor ]; then
  ad=""/usr/local/bin/asciidoctor""
else
  ad=""/usr/bin/asciidoctor""
fi

basedir=.

$ad --trace \
  --base-dir ${basedir} \
  --require asciidoctor-diagram \
  --no-header-footer \
  --attribute docinfo=shared \
  --attribute nofooter \
  --attribute skip-front-matter \
  --attribute library=asciidoctor-ruby \
  --attribute icons=font \
  --attribute sectlinks \
  --attribute sectanchors \
  --attribute figure-caption! \
  --attribute source-highlighter=highlightjs \
  --attribute experimental=true \
  --attribute out_dir=./resources/_gen/diagram \
  --attribute toc-title! \
  --attribute imagesoutdir=./.asciidoctor \
  --attribute imagesdir=./.asciidoctor \
  -
```

Since Hugo 0.74, there's a new asciidoctor integration in #7281 by @username_1 that looks promising. However converting this bash script to the equivalent in toml hoing to remove the trickery didn't work as expected:

1. Without `imagesdir` and `imagesoutdir` tricks
Using `workingFolderCurrent = true` to make the integration working didn't yield the expected rendering.

Parameter | Default | Comment
--- | --- | --- 
workingfoldercurrent | `false` | Set the working folder to the rendered `adoc` file, so [include](https://asciidoctor.org/docs/asciidoc-syntax-quick-reference/#include-files) will work with relative paths. This setting uses the `asciidoctor` cli parameter `--base-dir` and attribute `outdir=`. For rendering [asciidoctor-diagram](https://asciidoctor.org/docs/asciidoctor-diagram/)  `workingfoldercurrent` must be set to `true`.


```toml
[markup.asciidocext]
    extensions = [""asciidoctor-diagram""]
    workingFolderCurrent = true
    trace = true

    [markup.asciidocext.attributes]
        ""docinfo"" = ""shared""
        ""nofooter"" = """"
        ""skip-front-matter"" = """"
        ""library"" = ""asciidoctor-ruby""
        ""icons"" = ""font""
        ""sectlinks"" = """"
        ""sectanchors"" = """"
        ""figure-caption!"" = """"
        ""source-highlighter"" = ""highlightjs""
        ""experimental"" = ""true""
        ""toc-title!"" = """"

# inheriting wordpress then jekyll conventions
[permalinks]
[Truncated]
├── 2018-05-04-programmatic-tail-call-elimination-in-java.md
├── 2019-02-14-immutable-jackson-pojo-with-lombok.md
├── 2019-09-13-watchservice-and-bind-mount.fr.md
├── 2020-03-12-building-corretto.adoc
├── 2020-05-03-MaxRamPercentage-is-not-what-i-wished-for.adoc
├── 2020-06-23-simple-g1gc-tuning.adoc
├── 2020-08-08-watchman.adoc
├── 2020-08-20-Exploring-java-native-memory.adoc
└── _index.md

1 directory, 15 files
```

Note you need to use both `imagesdir` and `imagesoutdir`, otherwise asciidoc doesn't render the proper HTML, and/or cannot inline SVGs.

So that's quite unfortunate. My current script used the base hugo site folder as the `basedir`, so I could avoid _polluting_ the content folder, but had the side effect of forcing me to inline files (even if I personnally wanted that anyway).

I'm not familiar with GoLang, and even less with hugo internals, but it seems to me the `outdir` be set to use the permalink here.

https://github.com/gohugoio/hugo/blob/fef924baf1872cd97663b383b0310b6651caa8d4/markup/asciidocext/convert.go#L123-L159
<issue_comment>username_0: Just in case, here's the installed version of asciidoctor : 

```shell
$ gem query --local

*** LOCAL GEMS ***

asciidoctor (2.0.10)
asciidoctor-diagram (2.0.2)
asciidoctor-html5s (0.5.0, 0.4.1)
bigdecimal (2.0.0, default: 1.4.1)
bundler (2.1.4, default: 1.17.2)
CFPropertyList (3.0.2, 2.3.6)
cmath (default: 1.0.0)
csv (3.1.7, 3.1.6, 3.1.5, 3.1.3, 3.1.2, default: 3.0.9)
date (3.0.1, 3.0.0, default: 2.0.0)
dbm (1.1.0, default: 1.0.0)
did_you_mean (1.4.0, 1.3.0)
e2mmap (default: 0.1.0)
etc (1.1.0, default: 1.0.1)
fcntl (default: 1.0.0)
fiddle (default: 1.0.0)
fileutils (1.4.1, default: 1.1.0)
forwardable (1.3.1, default: 1.2.0)
hpricot (0.8.6)
io-console (0.5.6, 0.5.5, 0.5.4, default: 0.4.7)
ipaddr (default: 1.2.2)
irb (1.2.6, 1.2.4, 1.2.3, 1.2.1, default: 1.0.0)
json (2.3.1, 2.3.0, default: 2.1.0)
libxml-ruby (3.2.0, 3.1.0)
logger (1.4.2, default: 1.3.0)
matrix (0.3.0, default: 0.1.0)
mini_portile2 (2.5.0, 2.4.0)
minitest (5.14.2, 5.14.1, 5.14.0, 5.11.3)
mustache (1.1.1)
mutex_m (default: 0.1.0)
net-telnet (0.2.0)
nokogiri (1.10.10, 1.10.9, 1.10.8, 1.10.7, 1.10.1)
openssl (default: 2.1.2)
ostruct (default: 0.1.0)
power_assert (1.2.0, 1.1.7, 1.1.6, 1.1.5, 1.1.3)
prime (default: 0.1.0)
psych (default: 3.1.0)
rake (13.0.1, 12.3.2)
rdiscount (2.2.0.1)
rdoc (6.2.1, default: 6.1.0)
reline (0.1.5, 0.1.4, 0.1.3, 0.1.2)
rexml (3.2.4, 3.2.3, default: 3.1.9)
ronn (0.7.3)
rss (0.2.9, 0.2.8, default: 0.2.7)
scanf (default: 1.0.0)
sdbm (default: 1.0.0)
shell (0.8.0, default: 0.7)
sqlite3 (1.4.2, 1.3.13)
stringio (0.1.3, 0.1.0, default: 0.0.2)
strscan (1.0.3, default: 1.0.0)
sync (default: 0.5.0)
test-unit (3.3.5, 3.2.9)
thread_safe (0.3.6)
thwait (default: 0.1.0)
tracer (default: 0.1.0)
webrick (1.6.0, default: 1.4.2)
xmlrpc (0.3.0)
zlib (1.1.0, default: 1.0.0)
```
<issue_comment>username_1: Thanks for sharing this problem with detailed descriptions!! Sorry, I was quite busy the last days. Can you share a simple sample repo with that problem? Or we can extend https://github.com/username_1/hugo_asciidoc_ddd[my sample]?"
conda-forge/conda-forge.github.io,325060843,590,,"[{'action': 'opened', 'author': 'ctrueden', 'comment_id': None, 'datetime': '2018-05-21 21:11:13+00:00', 'masked_author': 'username_0', 'text': 'At the suggestion of @username_1, I am opening this issue here to start a conversation about how conda might manage the packaging for Java components in a uniform way.\r\n\r\nQuick introduction: I am maintainer of the [ImageJ](https://github.com/imagej/imagej) and [Fiji](https://github.com/fiji/fiji) projects for N-dimensional scientific image processing and analysis. A major interest of mine is making ImageJ accessible from other ecosystems such as PyData and Node.js. We now have an [imagej module on PyPI](https://pypi.org/project/imagej/) allowing to access an ImageJ installation as Python code in-process or interprocess. But it was suggested that we also create a conda package that packages and installs ImageJ. @username_1 indicated the most proper way to do this would be publish each Java component (i.e. JAR file) as its own conda package, with a dependency hierarchy matching that declared in the Maven POMs.\r\n\r\nSo my first question is: do others concur that the ideal thing would be a one-for-one correspondence between Java components and Conda packages?\r\n\r\nIf so, my second question then is: what would be the best way forward to achieve that?\r\n\r\n@username_1 suggested we could invent some machinery to auto-update conda packages of Java comopnents based on their Maven releases. I countered with the idea that it would be more elegant to augment conda itself to understand Maven repositories directly, so that `conda install java:org.scijava:scijava-common` or some such would install the latest version of [org.scijava:scijava](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.scijava%22%20a%3A%22scijava-common%22) directly from Maven Central.\r\n\r\nA third related question is: would it be OK to simply ship binaries, rather than rebuilding from source? I am ignorant of the conda-forge (and conda in general) policy on building from source... but one nice thing about Java artifacts is that once a release is built, it is completely portable and there is no need to rebuild it—and in fact, rebuilding it can be problematic, since JAR files are typically signed by the author to ensure fidelity. (Of course, artifacts _can_ be rebuilt from source by third parties, but the resulting JAR itself will not be identical, even if the bytecode of all the .class files inside is the same.) So it would be ideal if conda could support _distributing the already-built artifacts_ rather than mandating rebuilds from source.\r\n\r\nThere are many issues here, and I expect the conversation will be quite complex—but I am willing to invest some energy if people in the community is earnestly interested in making Java components available via conda. See also imagej/imagej#162 which is about packaging Java components for Gentoo but has probably a high degree of overlap with many of the concerns here.\r\n\r\nThoughts? Questions? Ideas?', 'title': 'Packaging of Java components', 'type': 'issue'}
 {'action': 'created', 'author': 'jakirkham', 'comment_id': 390834851.0, 'datetime': '2018-05-22 01:34:03+00:00', 'masked_author': 'username_1', 'text': 'cc @conda-forge/core', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'scopatz', 'comment_id': 390997113.0, 'datetime': '2018-05-22 13:49:38+00:00', 'masked_author': 'username_2', 'text': ""Yes, as long as they don't do anthing with the JNI or other external shared objects, this should be totally fine, and is in fact desirable.  There should probably be an equivalent `noarch: java` to denote that a java package is platform independent."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'CJ-Wright', 'comment_id': 391005788.0, 'datetime': '2018-05-22 14:13:16+00:00', 'masked_author': 'username_3', 'text': 'Attn: @justcalamari', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'ctrueden', 'comment_id': 391069141.0, 'datetime': '2018-05-22 17:11:10+00:00', 'masked_author': 'username_0', 'text': 'I think users would understand that java/maven packages are a different (but hopefully still well supported) beast than ""native"" packages in the primary channel itself. I caution against reflexively nixing fully automatic packaging approaches due to ""quality"" concerns. There are an astounding number of packages across many ecosystems. Requiring manual review of each and every package creates a commensurately astounding—and ultimately untenable—amount of work for the conda community. For conda to truly conquer cross-ecosystem packaging effectively, humans simply _cannot_ be involved with every new+existing package in the wild.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'dougalsutherland', 'comment_id': 391071375.0, 'datetime': '2018-05-22 17:18:29+00:00', 'masked_author': 'username_4', 'text': ""Updating conda to understand maven might be nice, but that's not a conda-forge thing, that's a conda thing. The only thing conda-forge itself can do is make it easier to create and maintain packages from Maven, through the bot and a templating script like we have for R packages.\r\n\r\n(In any case, it would be nicer to have all of Java available for free than having to opt-in – we have the same problem with PyPI and CRAN – but previous attempts at making conda automatically load things from pypi didn't work out, because as @username_2 pointed out not all of the metadata that conda needs was available there.)\r\n\r\nI know very little about Java, but we could probably use `noarch: generic` for Java packages, if they're literally just a JAR file that needs to go in some system-agnostic location."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'jakirkham', 'comment_id': 391102866.0, 'datetime': '2018-05-22 18:56:17+00:00', 'masked_author': 'username_1', 'text': 'cc @username_5 @msarahan @mingwandroid', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'kalefranz', 'comment_id': 391137865.0, 'datetime': '2018-05-22 20:56:21+00:00', 'masked_author': 'username_5', 'text': ""If java actually needs special things done at install time, that's fine.  For example, `noach: python` (1) creates .pyc files, (2) does a translation to the correct `lib/pythonX.Y/site-packages` directory, and (3) creates entry points.  If nothing like that is required, we can just use `noarch: generic`.  If there are special things for java though, I'm very happy to add them to conda as a `noarch: java` package type."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'ctrueden', 'comment_id': 391141866.0, 'datetime': '2018-05-22 21:10:31+00:00', 'masked_author': 'username_0', 'text': '@username_5 I can\'t think of anything that would be necessary for Java components. The only thing that occurs to me that _might_ be useful is creating a launcher in the case of an ""executable"" JAR file—i.e., a JAR file with a declared Main-Class attribute, which can be run via `java -jar myJar.jar` invocation. I actually wrote a simple Java code launcher called [jrun](https://github.com/username_0/jrun) to facilitate running Java code from Maven repositories; something like that could be built in to conda, perhaps. But it is hardly a necessary feature.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'kalefranz', 'comment_id': 391144131.0, 'datetime': '2018-05-22 21:18:41+00:00', 'masked_author': 'username_5', 'text': ""Conda's original language ecosystem target was the python world. And I'm calling that out because we're *just now* in the last several months starting to work out if/how we want to give conda the ability to directly install packages from PyPI.  It's not an easy problem to solve, even though we eventually want to get there someday.  Ultimately, if we succeed, it's not going to be something that'll be complete in the next month or two.  It could be a year or more before we're able to directly install even a subset of packages (e.g. pure-python wheels) directly from a PyPI-like repository.  This, after a half-decade of this conda community working most intensely around python.\r\n\r\nI *love* this topic, and the discussion about more richly supporting the java community.  I'm personally 👍 👍 .  However, we need to start with conda packages.  We need to build out a substantial base of java as conda packages, just as we have for python and r, so that we can understand the design, architecture, and usage patterns involved.  So that we can gain enough expertise as a community for us to know what something much more advanced like having the conda solver interact with a maven repository, and having conda's unlink-link transactions directly install artifacts from such repositories, might ultimately look like."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'kalefranz', 'comment_id': 391149293.0, 'datetime': '2018-05-22 21:38:18+00:00', 'masked_author': 'username_5', 'text': ""I also appreciate the listing of package types from https://github.com/conda-forge/conda-forge.github.io/issues/590#issuecomment-391095456.  For a while now I've been a proponent of having separate package types for source, test, docs, and build logs, in addition to the primary binary artifact."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'jakirkham', 'comment_id': 391185674.0, 'datetime': '2018-05-23 00:48:56+00:00', 'masked_author': 'username_1', 'text': 'This seems worth noting in a `conda`/`conda-build` issue to start. Should be useful regardless how the rest of this discussion shakes out.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'sodre', 'comment_id': 391193441.0, 'datetime': '2018-05-23 01:42:07+00:00', 'masked_author': 'username_6', 'text': 'Maybe a perfectly actionable starting point is for `conda-forge` to agree on a naming convention for java (go, etc..) packages before we start getting into more package name conflicts.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'jakirkham', 'comment_id': 391414968.0, 'datetime': '2018-05-23 16:35:32+00:00', 'masked_author': 'username_1', 'text': 'As to naming, would propose `java-*` to match with existing names of the same form.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'dougalsutherland', 'comment_id': 391421967.0, 'datetime': '2018-05-23 16:55:10+00:00', 'masked_author': 'username_4', 'text': 'Agreed with `java-*`. Though there will continue to be annoyances related to that, and something like [the namespaces proposal](https://gist.github.com/mcg1969/da5aec380d2ed083b79ddcf151ca16f1) would probably be nice....', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'ctrueden', 'comment_id': 391448687.0, 'datetime': '2018-05-23 18:21:10+00:00', 'masked_author': 'username_0', 'text': 'I understand the rationale. What I\'m afraid of is the code paralysis effect where once there are a bunch of Java packages on conda, backwards compatibility becomes paramount, and the mechanism behind how Java fundamentally works on conda becomes extremely painful to change. We see this all the time in tech: phase 1 = ""I know I\'m reinventing a wheel, but this is just an exploratory prototype"" followed by phase 2 = ""I added a bunch of features my growing user base wants since I control all the code"" and finally phase 3 = ""we can\'t reconcile with other projects because it would break backwards compatibility for my thousands of users."" I\'m not saying this would definitely happen here, but I hear alarm bells in my head. In many ways, now is a perfect time to attempt a true cross-repository integration.\r\n\r\nI guess I should put my money where my mouth is and try forking conda itself and adding some automagical Java support. Then we\'d have a starting point for further discussion. Unfortunately, the earliest I could work on something like that would be July. And if you all think I\'m totally crazy here then I won\'t pursue it.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'jakirkham', 'comment_id': 391460354.0, 'datetime': '2018-05-23 19:00:40+00:00', 'masked_author': 'username_1', 'text': ""It may be crazy or it may be genius. It's really hard to say until someone tries it and discovers what dragons may lay hidden. So 👍 for trying and seeing what happens.\r\n\r\nFWIW it's only after repeated efforts trying this with Python packages on PyPI that we are anywhere close to seeing this happen correctly in `conda`. Expect that Java has fewer problems than the Python ecosystem does in this regard. Though I say this mostly being an outsider of the Java world these days.\r\n\r\nAs to the creating `conda` packages in the interim, I'm far less pessimistic. Especially if we pick a uniform way of doing these packages. This [approach]( https://github.com/conda-forge/staged-recipes/issues/2009#issuecomment-298247065 ) was applied when porting R to conda-forge and not only did it make it much easier to review and add `conda` packages, but it has been incredibly useful in shaping discussions about how these packages might be changed and updated.\r\n\r\nSome thoughts on how to proceed. Adding a [skeleton]( https://github.com/conda/conda-build/tree/master/conda_build/skeletons ) for Java packages to [conda-build]( https://github.com/conda/conda-build ) would be a good first step for this and likely easier to start with. Also taking a look at [`conda pipbuild` in all of its former glory]( https://github.com/conda/conda-build/blob/44af01a58aea30fbff8be6ca4584c532f4581deb/conda_build/main_pipbuild.py ). Should provide some inspiration for something similar on the Java front. Maybe @username_5 has some more recent scripts along these lines that could be helpful."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'sodre', 'comment_id': 391490670.0, 'datetime': '2018-05-23 20:46:42+00:00', 'masked_author': 'username_6', 'text': 'I agree with @username_1, it could go either way 👍. With that in mind, consider the need to reproduce/install packages *and their dependencies* in more [restricted environments]( https://docs.anaconda.com/anaconda-repository/admin-guide/install/air-gap). I think a solution should continue to leverage Anaconda.org as the place to download conda packages.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'kmader', 'comment_id': 391662508.0, 'datetime': '2018-05-24 10:13:02+00:00', 'masked_author': 'username_7', 'text': ""@username_0 this is slightly off topic here, but for the 'simple' use-case it would be nice to `import` and use batteries-included fiji functions as if they were normal python packages without having to worry about versions, dependencies and maven. So a monthy date-stamped conda package for fiji would make it easy to use the distance map or thickness map functionality within a python script or notebook and barely realize that java is behind it. For specific packages and dependencies probably a more complicated approach makes sense."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'kalefranz', 'comment_id': 391746929.0, 'datetime': '2018-05-24 15:00:28+00:00', 'masked_author': 'username_5', 'text': 'Also slightly off topic... For the Java people here new-ish to conda, how do the conda open-jdk packages work for you? I believe we have environment variables set during activate, so the best experience probably comes from properly activating and deactivating environments. Mostly just interested in thoughts, feedback, and any suggestions on improving the foundational infrastructure and tooling.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'jakirkham', 'comment_id': 392176395.0, 'datetime': '2018-05-25 20:36:15+00:00', 'masked_author': 'username_1', 'text': ""If we have already done a bit of designing on a smaller scale by creating best practices, recipe templates, naming schemes, maybe even a `conda skeleton mvn` option, we can guide the process with an eye towards standardization that doesn't break everything when our grand vision can be more easily materialized (e.g. `conda mvnbuild` ;)."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'hanslovsky', 'comment_id': 402330874.0, 'datetime': '2018-07-04 00:48:45+00:00', 'masked_author': 'username_8', 'text': 'FYI, I created a PR with my Python port of jrun:\r\nhttps://github.com/username_0/jrun/pull/12\r\nAlso, I created a preliminary jrun conda package on my conda channel as well as [an example of how I think Java main class entry points can be distributed](https://github.com/username_8/conda-build-scripts/tree/e640bdbe7f4c6ea9e2a01d141cd40f7b60066672/paintera-conversion-helper):\r\n```\r\nconda install -c username_8 jrun paintera-conversion-helper\r\npaintera-conversion-helper -h\r\n```\r\nIf you do not have maven and/or openjdk on your system, you can get them from conda-forge (I chose not to add them as a dependency to jrun).', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'hanslovsky', 'comment_id': 404242397.0, 'datetime': '2018-07-11 17:04:45+00:00', 'masked_author': 'username_8', 'text': 'As far as I can tell, there is no JavaFX package in default or conda-forge. Without a JavaFX package in conda-forge, users will have to use their system java/javafx:\r\n 1. Distribution less simple: especially if users are not familiar with installing Java on their system (instead of a single `conda install`).\r\n 2. Users of relevant packages (e.g. https://anaconda.org/username_8/paintera) must not install the openjdk package from conda-forge.\r\n\r\nThese are good reasons to introduce a JavaFX package in conda-forge, which will require some effort. If people have interest and resources, please step up on this. For starters, I tried to follow the [OpenJDK build instructions](https://wiki.openjdk.java.net/display/OpenJFX/Building+OpenJFX#BuildingOpenJFX-GettingtheSources) but I failed miserably. I do not have any of the OSes that they have instructions for, though.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'hadim', 'comment_id': 404244233.0, 'datetime': '2018-07-11 17:10:58+00:00', 'masked_author': 'username_9', 'text': ""FYI: it might be possible that in the future JavaFX is distributed on Maven (instead of bundled with a Java distribution): http://mail.openjdk.java.net/pipermail/openjfx-dev/2018-July/022088.html\r\n\r\nThat being said, it's not gonna happen in the short term."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'hanslovsky', 'comment_id': 404244762.0, 'datetime': '2018-07-11 17:12:42+00:00', 'masked_author': 'username_8', 'text': 'Good point @username_9 I wish that had happened already, then this would be a non-issue.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'hadim', 'comment_id': 404245364.0, 'datetime': '2018-07-11 17:14:45+00:00', 'masked_author': 'username_9', 'text': 'As conda-forge uses Docker and Centos 6 to compile things I would suggest you to try building JavaFX directly in a Docker instance. (but then what about OSX and Windows?).', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'hanslovsky', 'comment_id': 404252484.0, 'datetime': '2018-07-11 17:39:15+00:00', 'masked_author': 'username_8', 'text': 'FYI I am not going to put more time into this at the moment. I will just add a note to affected packages that users should use system java (jrun conda package does not have openjdk as dependency).', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'kalefranz', 'comment_id': 404349876.0, 'datetime': '2018-07-12 00:18:01+00:00', 'masked_author': 'username_5', 'text': 'FYI ecosystem namespaces are happening in conda! PR is nearing completion. Will land in either 4.6 or 4.7. Nothing you need to do to change packaging at the moment. Probably just keep prepending `java-` to the package name and make sure open-jdk is listed as a dependency.  \r\n\r\nhttps://gist.github.com/mcg1969/da5aec380d2ed083b79ddcf151ca16f1\r\n\r\nhttps://github.com/conda/conda/pull/7446', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'scopatz', 'comment_id': 404550748.0, 'datetime': '2018-07-12 15:23:48+00:00', 'masked_author': 'username_2', 'text': 'Hi @username_5 - this is pretty exciting!  However, it might have interesting implications for the bot and creating and storing historical versions of the graph.  Will the rendered meta.yamls contain the fully expanded / qualified package names?', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'ctrueden', 'comment_id': 439664504.0, 'datetime': '2018-11-18 03:17:06+00:00', 'masked_author': 'username_0', 'text': ',,,--+oo******oo+--,,,,,--+oo******o++--,,,,,--+oo******o++--,,,\r\n...,--+ooo**oo++--,....,,--+ooo**oo++-,,....,,--+ooo**oo++-,,...\r\n ...,--++oooo++--,... ...,--++oooo++--,... ...,--++oooo++-,,...\r\n   ..,--++++++--,..     ..,--++o+++--,..     .,,--++o+++--,..\r\n   ..,,-++++++-,,.      ..,,-++++++-,,.      ..,--++++++-,,.\r\n    .,,--++++--,,.       .,,--++++--,,.       .,,--++++--,..\r\n    .,,--++++--,,.       .,,-+++++--,,.       .,,-+++++--,,.\r\n   ..,--++++++--,..     ..,--++++++--,..     ..,--++++++-,,..\r\n  ..,,-++oooo++-,,..   ..,,-++oooo++-,,..   ..,,-++ooo+++-,,..\r\n...,,-++oooooo++-,,.....,,-++oooooo++-,,.....,,-++oooooo+--,,...\r\n.,,,-++oo****oo++-,,,.,,,-++oo****oo+--,,,.,,,-++oo****oo+--,,,.\r\n,,--++o***OO**oo++-,,,,--++o***OO**oo+--,,,,--++o***OO**oo+--,,,\r\n---++o**OOOOOO**o++-----++o**OOOOOO*oo++-----++o**OOOOOO*oo++---\r\n--++oo*OO####OO*oo++---++oo*OO####OO*oo++---++o**OO####OO*oo++--\r\n+++oo*OO######O**oo+++++oo*OO######O**oo+++++oo*OO######O**oo+++\r\n+++oo*OO######OO*oo+++++oo*OO######OO*oo+++++oo*OO######OO*oo+++\r\n```\r\nOf course, this does not solve the non-Python-centric ""install Java packages via conda"" question. But it bridges the two worlds in a fairly convenient and extensible way.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'coderextreme', 'comment_id': 494450637.0, 'datetime': '2019-05-21 15:53:45+00:00', 'masked_author': 'username_10', 'text': 'Looking to install jar http://www.web3d.org/specifications/java/jars/X3DJSAIL.3.3.full.jar in a package x3dpsail.  Have no familiarity with creating conda packages.  Link to best page for instructions on how to achieve this are welcome!  I will look in staged-recipes now that i see it', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'ctrueden', 'comment_id': 494503013.0, 'datetime': '2019-05-21 18:21:57+00:00', 'masked_author': 'username_0', 'text': '@username_10 My advice would be: A) get x3djsail deployed to a Maven repository as an artifact; and then B) access its API from Python via the [scyjava](https://pypi.org/project/scyjava/) approach.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'coderextreme', 'comment_id': 495078919.0, 'datetime': '2019-05-23 06:00:01+00:00', 'masked_author': 'username_10', 'text': ""No, we've never deployed that jar.  We have a fat jar created through ant which contains all java dependencies.  Old habits and build scripts die hard.  That is, the primary maintainer has been doing ant scripts for a very long time.   Thus we have another package [here](https://github.com/carlsonsolutiondesign/x3dpsail)"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'beenje', 'comment_id': 793063713.0, 'datetime': '2021-03-08 20:44:51+00:00', 'masked_author': 'username_11', 'text': ""Hello! I'm looking into packaging some java applications with conda. I was wondering if some best practices have emerged since this issue was opened?\r\n\r\nThe app has a few jar files as dependencies. I'm planning to make one recipe per jar.\r\nIs it ok to download directly an existing jar file or should we try to compile it in the recipe?"", 'title': None, 'type': 'comment'}]","<issue_start><issue_comment>Title: Packaging of Java components
username_0: At the suggestion of @username_1, I am opening this issue here to start a conversation about how conda might manage the packaging for Java components in a uniform way.

Quick introduction: I am maintainer of the [ImageJ](https://github.com/imagej/imagej) and [Fiji](https://github.com/fiji/fiji) projects for N-dimensional scientific image processing and analysis. A major interest of mine is making ImageJ accessible from other ecosystems such as PyData and Node.js. We now have an [imagej module on PyPI](https://pypi.org/project/imagej/) allowing to access an ImageJ installation as Python code in-process or interprocess. But it was suggested that we also create a conda package that packages and installs ImageJ. @username_1 indicated the most proper way to do this would be publish each Java component (i.e. JAR file) as its own conda package, with a dependency hierarchy matching that declared in the Maven POMs.

So my first question is: do others concur that the ideal thing would be a one-for-one correspondence between Java components and Conda packages?

If so, my second question then is: what would be the best way forward to achieve that?

@username_1 suggested we could invent some machinery to auto-update conda packages of Java comopnents based on their Maven releases. I countered with the idea that it would be more elegant to augment conda itself to understand Maven repositories directly, so that `conda install java:org.scijava:scijava-common` or some such would install the latest version of [org.scijava:scijava](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.scijava%22%20a%3A%22scijava-common%22) directly from Maven Central.

A third related question is: would it be OK to simply ship binaries, rather than rebuilding from source? I am ignorant of the conda-forge (and conda in general) policy on building from source... but one nice thing about Java artifacts is that once a release is built, it is completely portable and there is no need to rebuild it—and in fact, rebuilding it can be problematic, since JAR files are typically signed by the author to ensure fidelity. (Of course, artifacts _can_ be rebuilt from source by third parties, but the resulting JAR itself will not be identical, even if the bytecode of all the .class files inside is the same.) So it would be ideal if conda could support _distributing the already-built artifacts_ rather than mandating rebuilds from source.

There are many issues here, and I expect the conversation will be quite complex—but I am willing to invest some energy if people in the community is earnestly interested in making Java components available via conda. See also imagej/imagej#162 which is about packaging Java components for Gentoo but has probably a high degree of overlap with many of the concerns here.

Thoughts? Questions? Ideas?
<issue_comment>username_1: cc @conda-forge/core
<issue_comment>username_2: Yes, as long as they don't do anthing with the JNI or other external shared objects, this should be totally fine, and is in fact desirable.  There should probably be an equivalent `noarch: java` to denote that a java package is platform independent.
<issue_comment>username_3: Attn: @justcalamari
<issue_comment>username_0: I think users would understand that java/maven packages are a different (but hopefully still well supported) beast than ""native"" packages in the primary channel itself. I caution against reflexively nixing fully automatic packaging approaches due to ""quality"" concerns. There are an astounding number of packages across many ecosystems. Requiring manual review of each and every package creates a commensurately astounding—and ultimately untenable—amount of work for the conda community. For conda to truly conquer cross-ecosystem packaging effectively, humans simply _cannot_ be involved with every new+existing package in the wild.
<issue_comment>username_4: Updating conda to understand maven might be nice, but that's not a conda-forge thing, that's a conda thing. The only thing conda-forge itself can do is make it easier to create and maintain packages from Maven, through the bot and a templating script like we have for R packages.

(In any case, it would be nicer to have all of Java available for free than having to opt-in – we have the same problem with PyPI and CRAN – but previous attempts at making conda automatically load things from pypi didn't work out, because as @username_2 pointed out not all of the metadata that conda needs was available there.)

I know very little about Java, but we could probably use `noarch: generic` for Java packages, if they're literally just a JAR file that needs to go in some system-agnostic location.
<issue_comment>username_1: cc @username_5 @msarahan @mingwandroid
<issue_comment>username_5: If java actually needs special things done at install time, that's fine.  For example, `noach: python` (1) creates .pyc files, (2) does a translation to the correct `lib/pythonX.Y/site-packages` directory, and (3) creates entry points.  If nothing like that is required, we can just use `noarch: generic`.  If there are special things for java though, I'm very happy to add them to conda as a `noarch: java` package type.
<issue_comment>username_0: @username_5 I can't think of anything that would be necessary for Java components. The only thing that occurs to me that _might_ be useful is creating a launcher in the case of an ""executable"" JAR file—i.e., a JAR file with a declared Main-Class attribute, which can be run via `java -jar myJar.jar` invocation. I actually wrote a simple Java code launcher called [jrun](https://github.com/username_0/jrun) to facilitate running Java code from Maven repositories; something like that could be built in to conda, perhaps. But it is hardly a necessary feature.
<issue_comment>username_5: Conda's original language ecosystem target was the python world. And I'm calling that out because we're *just now* in the last several months starting to work out if/how we want to give conda the ability to directly install packages from PyPI.  It's not an easy problem to solve, even though we eventually want to get there someday.  Ultimately, if we succeed, it's not going to be something that'll be complete in the next month or two.  It could be a year or more before we're able to directly install even a subset of packages (e.g. pure-python wheels) directly from a PyPI-like repository.  This, after a half-decade of this conda community working most intensely around python.

I *love* this topic, and the discussion about more richly supporting the java community.  I'm personally 👍 👍 .  However, we need to start with conda packages.  We need to build out a substantial base of java as conda packages, just as we have for python and r, so that we can understand the design, architecture, and usage patterns involved.  So that we can gain enough expertise as a community for us to know what something much more advanced like having the conda solver interact with a maven repository, and having conda's unlink-link transactions directly install artifacts from such repositories, might ultimately look like.
<issue_comment>username_5: I also appreciate the listing of package types from https://github.com/conda-forge/conda-forge.github.io/issues/590#issuecomment-391095456.  For a while now I've been a proponent of having separate package types for source, test, docs, and build logs, in addition to the primary binary artifact.
<issue_comment>username_1: This seems worth noting in a `conda`/`conda-build` issue to start. Should be useful regardless how the rest of this discussion shakes out.
<issue_comment>username_6: Maybe a perfectly actionable starting point is for `conda-forge` to agree on a naming convention for java (go, etc..) packages before we start getting into more package name conflicts.
<issue_comment>username_1: As to naming, would propose `java-*` to match with existing names of the same form.
<issue_comment>username_4: Agreed with `java-*`. Though there will continue to be annoyances related to that, and something like [the namespaces proposal](https://gist.github.com/mcg1969/da5aec380d2ed083b79ddcf151ca16f1) would probably be nice....
<issue_comment>username_0: I understand the rationale. What I'm afraid of is the code paralysis effect where once there are a bunch of Java packages on conda, backwards compatibility becomes paramount, and the mechanism behind how Java fundamentally works on conda becomes extremely painful to change. We see this all the time in tech: phase 1 = ""I know I'm reinventing a wheel, but this is just an exploratory prototype"" followed by phase 2 = ""I added a bunch of features my growing user base wants since I control all the code"" and finally phase 3 = ""we can't reconcile with other projects because it would break backwards compatibility for my thousands of users."" I'm not saying this would definitely happen here, but I hear alarm bells in my head. In many ways, now is a perfect time to attempt a true cross-repository integration.

I guess I should put my money where my mouth is and try forking conda itself and adding some automagical Java support. Then we'd have a starting point for further discussion. Unfortunately, the earliest I could work on something like that would be July. And if you all think I'm totally crazy here then I won't pursue it.
<issue_comment>username_1: It may be crazy or it may be genius. It's really hard to say until someone tries it and discovers what dragons may lay hidden. So 👍 for trying and seeing what happens.

FWIW it's only after repeated efforts trying this with Python packages on PyPI that we are anywhere close to seeing this happen correctly in `conda`. Expect that Java has fewer problems than the Python ecosystem does in this regard. Though I say this mostly being an outsider of the Java world these days.

As to the creating `conda` packages in the interim, I'm far less pessimistic. Especially if we pick a uniform way of doing these packages. This [approach]( https://github.com/conda-forge/staged-recipes/issues/2009#issuecomment-298247065 ) was applied when porting R to conda-forge and not only did it make it much easier to review and add `conda` packages, but it has been incredibly useful in shaping discussions about how these packages might be changed and updated.

Some thoughts on how to proceed. Adding a [skeleton]( https://github.com/conda/conda-build/tree/master/conda_build/skeletons ) for Java packages to [conda-build]( https://github.com/conda/conda-build ) would be a good first step for this and likely easier to start with. Also taking a look at [`conda pipbuild` in all of its former glory]( https://github.com/conda/conda-build/blob/44af01a58aea30fbff8be6ca4584c532f4581deb/conda_build/main_pipbuild.py ). Should provide some inspiration for something similar on the Java front. Maybe @username_5 has some more recent scripts along these lines that could be helpful.
<issue_comment>username_6: I agree with @username_1, it could go either way 👍. With that in mind, consider the need to reproduce/install packages *and their dependencies* in more [restricted environments]( https://docs.anaconda.com/anaconda-repository/admin-guide/install/air-gap). I think a solution should continue to leverage Anaconda.org as the place to download conda packages.
<issue_comment>username_7: @username_0 this is slightly off topic here, but for the 'simple' use-case it would be nice to `import` and use batteries-included fiji functions as if they were normal python packages without having to worry about versions, dependencies and maven. So a monthy date-stamped conda package for fiji would make it easy to use the distance map or thickness map functionality within a python script or notebook and barely realize that java is behind it. For specific packages and dependencies probably a more complicated approach makes sense.
<issue_comment>username_5: Also slightly off topic... For the Java people here new-ish to conda, how do the conda open-jdk packages work for you? I believe we have environment variables set during activate, so the best experience probably comes from properly activating and deactivating environments. Mostly just interested in thoughts, feedback, and any suggestions on improving the foundational infrastructure and tooling.
<issue_comment>username_1: If we have already done a bit of designing on a smaller scale by creating best practices, recipe templates, naming schemes, maybe even a `conda skeleton mvn` option, we can guide the process with an eye towards standardization that doesn't break everything when our grand vision can be more easily materialized (e.g. `conda mvnbuild` ;).
<issue_comment>username_8: FYI, I created a PR with my Python port of jrun:
https://github.com/username_0/jrun/pull/12
Also, I created a preliminary jrun conda package on my conda channel as well as [an example of how I think Java main class entry points can be distributed](https://github.com/username_8/conda-build-scripts/tree/e640bdbe7f4c6ea9e2a01d141cd40f7b60066672/paintera-conversion-helper):
```
conda install -c username_8 jrun paintera-conversion-helper
paintera-conversion-helper -h
```
If you do not have maven and/or openjdk on your system, you can get them from conda-forge (I chose not to add them as a dependency to jrun).
<issue_comment>username_8: As far as I can tell, there is no JavaFX package in default or conda-forge. Without a JavaFX package in conda-forge, users will have to use their system java/javafx:
 1. Distribution less simple: especially if users are not familiar with installing Java on their system (instead of a single `conda install`).
 2. Users of relevant packages (e.g. https://anaconda.org/username_8/paintera) must not install the openjdk package from conda-forge.

These are good reasons to introduce a JavaFX package in conda-forge, which will require some effort. If people have interest and resources, please step up on this. For starters, I tried to follow the [OpenJDK build instructions](https://wiki.openjdk.java.net/display/OpenJFX/Building+OpenJFX#BuildingOpenJFX-GettingtheSources) but I failed miserably. I do not have any of the OSes that they have instructions for, though.
<issue_comment>username_9: FYI: it might be possible that in the future JavaFX is distributed on Maven (instead of bundled with a Java distribution): http://mail.openjdk.java.net/pipermail/openjfx-dev/2018-July/022088.html

That being said, it's not gonna happen in the short term.
<issue_comment>username_8: Good point @username_9 I wish that had happened already, then this would be a non-issue.
<issue_comment>username_9: As conda-forge uses Docker and Centos 6 to compile things I would suggest you to try building JavaFX directly in a Docker instance. (but then what about OSX and Windows?).
<issue_comment>username_8: FYI I am not going to put more time into this at the moment. I will just add a note to affected packages that users should use system java (jrun conda package does not have openjdk as dependency).
<issue_comment>username_5: FYI ecosystem namespaces are happening in conda! PR is nearing completion. Will land in either 4.6 or 4.7. Nothing you need to do to change packaging at the moment. Probably just keep prepending `java-` to the package name and make sure open-jdk is listed as a dependency.  

https://gist.github.com/mcg1969/da5aec380d2ed083b79ddcf151ca16f1

https://github.com/conda/conda/pull/7446
<issue_comment>username_2: Hi @username_5 - this is pretty exciting!  However, it might have interesting implications for the bot and creating and storing historical versions of the graph.  Will the rendered meta.yamls contain the fully expanded / qualified package names?
<issue_comment>username_0: ,,,--+oo******oo+--,,,,,--+oo******o++--,,,,,--+oo******o++--,,,
...,--+ooo**oo++--,....,,--+ooo**oo++-,,....,,--+ooo**oo++-,,...
 ...,--++oooo++--,... ...,--++oooo++--,... ...,--++oooo++-,,...
   ..,--++++++--,..     ..,--++o+++--,..     .,,--++o+++--,..
   ..,,-++++++-,,.      ..,,-++++++-,,.      ..,--++++++-,,.
    .,,--++++--,,.       .,,--++++--,,.       .,,--++++--,..
    .,,--++++--,,.       .,,-+++++--,,.       .,,-+++++--,,.
   ..,--++++++--,..     ..,--++++++--,..     ..,--++++++-,,..
  ..,,-++oooo++-,,..   ..,,-++oooo++-,,..   ..,,-++ooo+++-,,..
...,,-++oooooo++-,,.....,,-++oooooo++-,,.....,,-++oooooo+--,,...
.,,,-++oo****oo++-,,,.,,,-++oo****oo+--,,,.,,,-++oo****oo+--,,,.
,,--++o***OO**oo++-,,,,--++o***OO**oo+--,,,,--++o***OO**oo+--,,,
---++o**OOOOOO**o++-----++o**OOOOOO*oo++-----++o**OOOOOO*oo++---
--++oo*OO####OO*oo++---++oo*OO####OO*oo++---++o**OO####OO*oo++--
+++oo*OO######O**oo+++++oo*OO######O**oo+++++oo*OO######O**oo+++
+++oo*OO######OO*oo+++++oo*OO######OO*oo+++++oo*OO######OO*oo+++
```
Of course, this does not solve the non-Python-centric ""install Java packages via conda"" question. But it bridges the two worlds in a fairly convenient and extensible way.
<issue_comment>username_10: Looking to install jar http://www.web3d.org/specifications/java/jars/X3DJSAIL.3.3.full.jar in a package x3dpsail.  Have no familiarity with creating conda packages.  Link to best page for instructions on how to achieve this are welcome!  I will look in staged-recipes now that i see it
<issue_comment>username_0: @username_10 My advice would be: A) get x3djsail deployed to a Maven repository as an artifact; and then B) access its API from Python via the [scyjava](https://pypi.org/project/scyjava/) approach.
<issue_comment>username_10: No, we've never deployed that jar.  We have a fat jar created through ant which contains all java dependencies.  Old habits and build scripts die hard.  That is, the primary maintainer has been doing ant scripts for a very long time.   Thus we have another package [here](https://github.com/carlsonsolutiondesign/x3dpsail)
<issue_comment>username_11: Hello! I'm looking into packaging some java applications with conda. I was wondering if some best practices have emerged since this issue was opened?

The app has a few jar files as dependencies. I'm planning to make one recipe per jar.
Is it ok to download directly an existing jar file or should we try to compile it in the recipe?"
