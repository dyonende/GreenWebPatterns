fluxcd/website,969318160,457,,"[{'action': 'opened', 'author': 'staceypotter', 'comment_id': None, 'datetime': '2021-08-12 18:16:22+00:00', 'masked_author': 'username_0', 'text': ""It's been a while since we updated the Resources section (see #90) and it's time for a refresh to this section. I would like to propose the following, but open to other suggestions.\r\n\r\n1.  The Power of GitOps with Flux Playlist (https://youtube.com/playlist?list=PL9lTuCFNLaD3fI_g-NXWVxopnJ0adn65d)\r\nDescription: This playlist is designed to show the powerful GitOps capabilities of Flux (and the GitOps Toolkit). Videos include project overviews, reviews, technical demos, and walk-throughs of our guides. \r\n\r\n2.  Flux Deep Dive with Stefan Prodan (https://youtu.be/Fzzg4KQavEU)\r\nDescription: Stefan walks through what Flux is, who it’s for and it’s components. Then gives a demo on how to use Flux for delivering infrastructure and applications changes onto Kubernetes.\r\n\r\n3.  From Wild West to Flux Multi-tenancy with Mae Large & Russ Parmer (https://youtu.be/NLU6b82FhFs)\r\nDescription:  Mae and Russ share how the State Farm GitOps team helped to simplify application deployment while meeting compliance requirements, enable the admin team to handle scale, embrace the declarative nature of kubernetes, increase transparency, and mature the shared responsibility model between administrators and consumers of our kubernetes platform.\r\n\r\n4.  Flux's Catalog - Keeping Track of Things! with Leigh Capili (https://youtu.be/gfyo6VqgD_k)\r\nDescription:  Leigh Capili gives us a black belt, under-the-covers look at how Flux's kustomize-controller tracks the child objects for a Kustomization in the Kubernetes API. He demonstrates how labels, checksums, and a GVK+Namespace list called the catalog can be used together to build detailed Object trees of everything Flux is managing in a cluster. This design is transparent, ergonomic, and performant! Learn how to use Flux's object tracking in your own extensions and UI's atop Flux and the GitOps Toolkit as \r\n\r\n5.  Handling Dependencies with Flux with Jason Morgan (https://youtu.be/laMwuG8r7Tw)\r\nDescription:  Kubernetes provides a simple way to apply configuration against a cluster but sometimes the order of operations matters. Using a tool like a service mesh requires that the control plane and proxy injector, a mutating webhook, be ready before you install your applications. Jason walks through how to use Flux’s dependency manager to ensure that your apps get added to your mesh every time.\r\n\r\n6.  Flux v2 Deep Dive series with Geert Baeke: https://www.youtube.com/playlist?list=PLG9qZAczREKmCq6on_LG8D0uiHMx1h3yn\r\nDescription: In this 5 video series, Geert Baeke takes a deep dive of Flux v2 and the use of GitOps principles with an Intro to Flux v2, Intro to Kustomize, Deploying Manifests, Monitoring & Alerting, and Helm Basics."", 'title': 'Refresh of resources section', 'type': 'issue'}
 {'action': 'created', 'author': 'staceypotter', 'comment_id': 897864254.0, 'datetime': '2021-08-12 18:16:59+00:00', 'masked_author': 'username_0', 'text': 'cc @username_1 :)', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'dholbach', 'comment_id': 898267360.0, 'datetime': '2021-08-13 08:02:05+00:00', 'masked_author': 'username_1', 'text': 'Please take a look at https://github.com/fluxcd/website/pull/459 and its preview.\r\n\r\nI need to find a good way of showing nicer previews for the playlist links - it looks a bit bland otherwise.\r\n\r\nThe selection of videos is great - thanks @username_0', 'title': None, 'type': 'comment'}
 {'action': 'closed', 'author': 'dholbach', 'comment_id': None, 'datetime': '2021-08-16 08:14:36+00:00', 'masked_author': 'username_1', 'text': '', 'title': None, 'type': 'issue'}]","<issue_start><issue_comment>Title: Refresh of resources section
username_0: It's been a while since we updated the Resources section (see #90) and it's time for a refresh to this section. I would like to propose the following, but open to other suggestions.

1.  The Power of GitOps with Flux Playlist (https://youtube.com/playlist?list=PL9lTuCFNLaD3fI_g-NXWVxopnJ0adn65d)
Description: This playlist is designed to show the powerful GitOps capabilities of Flux (and the GitOps Toolkit). Videos include project overviews, reviews, technical demos, and walk-throughs of our guides. 

2.  Flux Deep Dive with Stefan Prodan (https://youtu.be/Fzzg4KQavEU)
Description: Stefan walks through what Flux is, who it’s for and it’s components. Then gives a demo on how to use Flux for delivering infrastructure and applications changes onto Kubernetes.

3.  From Wild West to Flux Multi-tenancy with Mae Large & Russ Parmer (https://youtu.be/NLU6b82FhFs)
Description:  Mae and Russ share how the State Farm GitOps team helped to simplify application deployment while meeting compliance requirements, enable the admin team to handle scale, embrace the declarative nature of kubernetes, increase transparency, and mature the shared responsibility model between administrators and consumers of our kubernetes platform.

4.  Flux's Catalog - Keeping Track of Things! with Leigh Capili (https://youtu.be/gfyo6VqgD_k)
Description:  Leigh Capili gives us a black belt, under-the-covers look at how Flux's kustomize-controller tracks the child objects for a Kustomization in the Kubernetes API. He demonstrates how labels, checksums, and a GVK+Namespace list called the catalog can be used together to build detailed Object trees of everything Flux is managing in a cluster. This design is transparent, ergonomic, and performant! Learn how to use Flux's object tracking in your own extensions and UI's atop Flux and the GitOps Toolkit as 

5.  Handling Dependencies with Flux with Jason Morgan (https://youtu.be/laMwuG8r7Tw)
Description:  Kubernetes provides a simple way to apply configuration against a cluster but sometimes the order of operations matters. Using a tool like a service mesh requires that the control plane and proxy injector, a mutating webhook, be ready before you install your applications. Jason walks through how to use Flux’s dependency manager to ensure that your apps get added to your mesh every time.

6.  Flux v2 Deep Dive series with Geert Baeke: https://www.youtube.com/playlist?list=PLG9qZAczREKmCq6on_LG8D0uiHMx1h3yn
Description: In this 5 video series, Geert Baeke takes a deep dive of Flux v2 and the use of GitOps principles with an Intro to Flux v2, Intro to Kustomize, Deploying Manifests, Monitoring & Alerting, and Helm Basics.
<issue_comment>username_0: cc @username_1 :)
<issue_comment>username_1: Please take a look at https://github.com/fluxcd/website/pull/459 and its preview.

I need to find a good way of showing nicer previews for the playlist links - it looks a bit bland otherwise.

The selection of videos is great - thanks @username_0<issue_closed>"
ethereum/ethereum-org-website,887504238,3025,,"[{'action': 'opened', 'author': 'ryancreatescopy', 'comment_id': None, 'datetime': '2021-05-11T14:44:06Z', 'masked_author': 'username_0', 'text': ""**Is your feature request related to a problem? Please describe.**\r\n\r\nA page that explains some of Ethereum's design principles around decentralization.\r\n\r\n**Describe the solution you'd like**\r\n\r\nA page that lives in our learn section that digs into what we mean by decentralization and decentralized services. It's not always clear to new users why it matters or what it even means. When you grasp this, the power of Ethereum becomes more apparent. So this could be a very useful way of pushing people further down the rabbit hole. \r\n\r\nCan discuss further when someone registers interest.\r\n\r\nWe love contributions from the Ethereum community! Please comment on an issue if you're interested in helping out with a PR."", 'title': 'Learn page: what is decentralization?', 'type': 'issue'}
 {'action': 'created', 'author': 'jkbishbish', 'comment_id': 840169991.0, 'datetime': '2021-05-12 23:35:14+00:00', 'masked_author': 'username_1', 'text': 'Hey Ryan, I\'m interested in writing about this.  Here\'s an outline of what I think might work. Just quick brainstorming here so please forgive any typos:\r\n\r\n### Main sections\r\nDefining ""decentralization""\r\n\r\n- Building something where everyone can have input and no single authority can make major decisions\r\n- Going beyond reactive definitions (focus on the fact that Ethereum has a purposeful, fromthegroundup mission to distribute resources and authority)\r\n- Technical explanation of Ethereum network architecture\r\n- Discussion of how the development community works\r\n\r\nOther decentralization efforts that support what people do on Ethereum\r\n\r\n- Oracle networks\r\n- IPFS\r\n- etc?\r\n\r\nChallenges to Ethereum\'s decentralization\r\n\r\n- Virtual machines on Amazon, etc.\r\n- Centralized third parties (exchanges, service providers)\r\n\r\nWhat people can do to help / to get involved\r\n\r\n- Running light Ethereum nodes\r\n- Running IPFS nodes\r\n- Learning more about internet architecture\r\n- etc?\r\n\r\n### Possible other sections?\r\nCentralization of the web\r\n\r\n- How ISPs work\r\n- DNS and similar services\r\n- ""Big Tech""\r\n- Government authorities over infrastructure\r\n- Private/semiprivate infrastructure companies that also provide consumer/business services\r\n\r\nDecentralization is already here\r\n\r\n- Other familiar decentralized tech\r\n\r\nSecurity advantages / disadvantages\r\n\r\n- Autonomy of decentralized computing/recordkeeping\r\n- Dependence on participation\r\n\r\nHow to tell if something is decentralized / the extent of its decentralization\r\n\r\n- (for blockchains) looking at what people need to do to participate in running/supporting the network\r\n- (for services) Smart contract basics\r\n- (for all open-source projects) Using github', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'ryancreatescopy', 'comment_id': 840570848.0, 'datetime': '2021-05-13 13:44:12+00:00', 'masked_author': 'username_0', 'text': ""Hey @username_1 this looks like a great outline! I think comparing to heavily centralized companies is always a really good way to explain the benefits of decentralization, so I'd encourage that line of argument. \r\n\r\nI'd be comfortable if you wanted to do a first draft of this. Take a look at our recent use-case pages (https://ethereum/org/en/defi) to get a sense of our writing style... and remember we're aiming this content at beginners so if you **need** to use any jargon or technical language, make sure it's explained or (there's links to a beginner-friendly explanation).\r\n\r\nLet me know if you're happy to get started."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'jkbishbish', 'comment_id': 840647956.0, 'datetime': '2021-05-13 15:42:27+00:00', 'masked_author': 'username_1', 'text': ""Yeah! Sounds great. I forked the depository and I'm using the link you sent as a template, if that works."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'qbzzt', 'comment_id': 846151532.0, 'datetime': '2021-05-21 18:25:46+00:00', 'masked_author': 'username_2', 'text': 'You might find part of this useful to take ideas from: https://github.com/username_2/etherdocs/blob/master/what_can_Ethereum_do.md', 'title': None, 'type': 'comment'}]","<issue_start><issue_comment>Title: Learn page: what is decentralization?
username_0: **Is your feature request related to a problem? Please describe.**

A page that explains some of Ethereum's design principles around decentralization.

**Describe the solution you'd like**

A page that lives in our learn section that digs into what we mean by decentralization and decentralized services. It's not always clear to new users why it matters or what it even means. When you grasp this, the power of Ethereum becomes more apparent. So this could be a very useful way of pushing people further down the rabbit hole. 

Can discuss further when someone registers interest.

We love contributions from the Ethereum community! Please comment on an issue if you're interested in helping out with a PR.
<issue_comment>username_1: Hey Ryan, I'm interested in writing about this.  Here's an outline of what I think might work. Just quick brainstorming here so please forgive any typos:

### Main sections
Defining ""decentralization""

- Building something where everyone can have input and no single authority can make major decisions
- Going beyond reactive definitions (focus on the fact that Ethereum has a purposeful, fromthegroundup mission to distribute resources and authority)
- Technical explanation of Ethereum network architecture
- Discussion of how the development community works

Other decentralization efforts that support what people do on Ethereum

- Oracle networks
- IPFS
- etc?

Challenges to Ethereum's decentralization

- Virtual machines on Amazon, etc.
- Centralized third parties (exchanges, service providers)

What people can do to help / to get involved

- Running light Ethereum nodes
- Running IPFS nodes
- Learning more about internet architecture
- etc?

### Possible other sections?
Centralization of the web

- How ISPs work
- DNS and similar services
- ""Big Tech""
- Government authorities over infrastructure
- Private/semiprivate infrastructure companies that also provide consumer/business services

Decentralization is already here

- Other familiar decentralized tech

Security advantages / disadvantages

- Autonomy of decentralized computing/recordkeeping
- Dependence on participation

How to tell if something is decentralized / the extent of its decentralization

- (for blockchains) looking at what people need to do to participate in running/supporting the network
- (for services) Smart contract basics
- (for all open-source projects) Using github
<issue_comment>username_0: Hey @username_1 this looks like a great outline! I think comparing to heavily centralized companies is always a really good way to explain the benefits of decentralization, so I'd encourage that line of argument. 

I'd be comfortable if you wanted to do a first draft of this. Take a look at our recent use-case pages (https://ethereum/org/en/defi) to get a sense of our writing style... and remember we're aiming this content at beginners so if you **need** to use any jargon or technical language, make sure it's explained or (there's links to a beginner-friendly explanation).

Let me know if you're happy to get started.
<issue_comment>username_1: Yeah! Sounds great. I forked the depository and I'm using the link you sent as a template, if that works.
<issue_comment>username_2: You might find part of this useful to take ideas from: https://github.com/username_2/etherdocs/blob/master/what_can_Ethereum_do.md"
dart-lang/site-www,404409125,1329,,"[{'action': 'opened', 'author': 'pq', 'comment_id': None, 'datetime': '2019-01-29 17:42:00+00:00', 'masked_author': 'username_0', 'text': 'Following up on https://github.com/dart-lang/linter/issues/365, it would be great to settle whether the Effective Dart [advice on `forEach`](https://www.dartlang.org/guides/language/effective-dart/usage#avoid-using-iterableforeach-with-a-function-literal) could be loosened to allow for functional-style chaining (e.g. `a .where().forEach()`) as proposed by @zoechi and mores recently by @username_1  in https://github.com/dart-lang/linter/issues/365#issuecomment-458194690.\r\n\r\n@username_2?', 'title': 'Loosen Effective Dart forEach advice to allow chaining?', 'type': 'issue'}
 {'action': 'created', 'author': 'sjmcdowall', 'comment_id': 458662191.0, 'datetime': '2019-01-29 18:55:16+00:00', 'masked_author': 'username_1', 'text': ""Just wanted to add my 2 cents in that this is an excellent programming technique as it leads to cleaner and more comprehensible code.  I wouldn't even mind doing a PR on the second if there is a documented procedure on how to do that :)"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'pq', 'comment_id': 459445428.0, 'datetime': '2019-01-31 18:05:50+00:00', 'masked_author': 'username_0', 'text': ""Challenge accepted. 😄 \r\n\r\nHow about:\r\n\r\n```dart\r\nrequest.definitions?.forEach(_server.stdin.writeln);\r\n```\r\n\r\nvs... ?\r\n\r\n(Actually, I'm not sure it's better, but certainly more terse and I think not _worse_ than alternatives.  WDYT?)"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'sjmcdowall', 'comment_id': 459508527.0, 'datetime': '2019-01-31 21:13:40+00:00', 'masked_author': 'username_1', 'text': ""I was actually thinking more along the lines of something like array function chaining... \r\n\r\n```\r\nmyArray\r\n    .filter((Task xxx) => xxx.type == 2)\r\n    .map((Task yyy) => yyy.readyPayload())\r\n    .sort((Task a,Task  b) => a.compareTo(b))\r\n    .forEach((result) {\r\n        switch(result.command) {\r\n            case 'transmit': {\r\n                Xmiter.send(result.payload);\r\n                break;\r\n           }\r\n           case 'dump': {\r\n               print(result);\r\n               break;\r\n           }\r\n           default : {\r\n               Queue.insert(result);\r\n               break;\r\n         }\r\n    }\r\n  };\r\n```\r\n\r\nOK -- grant you -- rather contrived -- and I'm not sure it's syntactically correct .. but it's close..but I think it gets the idea?"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'munificent', 'comment_id': 459828719.0, 'datetime': '2019-02-01 18:53:53+00:00', 'masked_author': 'username_2', 'text': ""@username_0, your two examples already fall under the existing exception because you aren't passing a lambda to `forEach()`.\r\n\r\n@username_1, something along the lines of your example is a good one. Basically a case where you have a method chain too big to stick after the `in` in a for-in loop and where the last thing you do is a block of code executed for its side effect."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'sjmcdowall', 'comment_id': 462143185.0, 'datetime': '2019-02-10 15:43:52+00:00', 'masked_author': 'username_1', 'text': 'OK -- soooo -- are we stuck here?', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'munificent', 'comment_id': 463429733.0, 'datetime': '2019-02-14 00:13:35+00:00', 'masked_author': 'username_2', 'text': ""Not stuck, but no one's put work into moving it forward. Can you come up with a smaller but more complete looking example that we can show as an exception? Yours is partway there, but something with real types and only a few lines long would be better. 😄"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'sjmcdowall', 'comment_id': 463464701.0, 'datetime': '2019-02-14 02:45:19+00:00', 'masked_author': 'username_1', 'text': '@username_2 -- I can certainly try -- but where do I post such a thing? Here?', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'munificent', 'comment_id': 463804557.0, 'datetime': '2019-02-14 21:28:14+00:00', 'masked_author': 'username_2', 'text': 'Yes, here is fine. :)', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'dramos07', 'comment_id': 497833689.0, 'datetime': '2019-05-31 19:30:36+00:00', 'masked_author': 'username_3', 'text': 'Any updates on this? this is currently blocking dart-lang/linter#365', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'munificent', 'comment_id': 512986020.0, 'datetime': '2019-07-18 21:01:22+00:00', 'masked_author': 'username_2', 'text': 'On further thought, I don\'t think we\'re helping users by loosening this guideline. If you have a long method chain that produces an Iterable and you need to walk that iterable and do some kind of side effect, I think it\'s clearer to simply use a local variable and a for-in loop. So [this example](https://github.com/dart-lang/site-www/issues/1329#issuecomment-459508527) would become:\r\n\r\n```dart\r\nvar tasks = myArray\r\n    .filter((Task xxx) => xxx.type == 2)\r\n    .map((Task yyy) => yyy.readyPayload())\r\ntasks.sort((Task a,Task  b) => a.compareTo(b));\r\nfor (var result in tasks) {\r\n  switch(result.command) {\r\n    case \'transmit\':\r\n      Xmiter.send(result.payload);\r\n      break;\r\n    case \'dump\':\r\n      print(result);\r\n      break;\r\n    default:\r\n      Queue.insert(result);\r\n      break;\r\n  }\r\n}\r\n```\r\n\r\nI think that\'s better than:\r\n\r\n```dart\r\n(myArray\r\n    .filter((Task xxx) => xxx.type == 2)\r\n    .map((Task yyy) => yyy.readyPayload())\r\n    ..sort((Task a,Task  b) => a.compareTo(b)))\r\n    .forEach((result) {\r\n      switch(result.command) {\r\n        case \'transmit\':\r\n          Xmiter.send(result.payload);\r\n          break;\r\n        case \'dump\':\r\n          print(result);\r\n          break;\r\n        default:\r\n          Queue.insert(result);\r\n          break;\r\n      }\r\n    });\r\n```\r\n\r\nMy reasons:\r\n\r\n* It\'s less error-prone. (Note that the original example has a syntax error. @username_1 forgot the closing `)` at the end. Also note that `sort()` can\'t be used in a method chain.)\r\n* There\'s less indentation and less nesting.\r\n* The formatting is more obvious and less likely to be annoying. (dartfmt doesn\'t always do what you want when there are long method chains and big nested lambdas.)\r\n* You can do more powerful control flow inside the body. You can use `return` or `break` to interact with control flow outside of the loop.\r\n* Keeping the rule simpler gives users less to think about and less to argue about in code reviews. If we say ""long"" method chains are the exception, then people have to agree on what ""long"" means.\r\n\r\nSo I think we should just keep the rule as it is. How does that sound?', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'sjmcdowall', 'comment_id': 513182557.0, 'datetime': '2019-07-19 10:39:07+00:00', 'masked_author': 'username_1', 'text': ""I still disagree @username_2  -- to me this sounds like YOUR opinion on how things should go.  Yes, you have some good arguments but I don't believe they are worth taking away an option for a programmer to use a feature available in the ecosystem.  I thought some reasonable (and simple) use cases to allow this were given -- yes, for a long complex chain maybe it's not the best (although who I am to dictate that anyway) but for simpler chains this is still annoying in my opinion.\r\n\r\nOf course, the above is just **my** opinion -- but I'm more a libertarian programmer. :)"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'munificent', 'comment_id': 514328758.0, 'datetime': '2019-07-23 18:28:29+00:00', 'masked_author': 'username_2', 'text': ""That's entirely valid, but in that case, an opinionated automated formatter might not be the right tool for you. :) dartfmt is *not* a libertarian tool. Its philosophy is that we are all more productive *in aggregate* when we agree to do things the same way, based on the assumption that we will frequently work with each others' code.\r\n\r\nIf the roads are empty, it doesn't matter which side you drive on, and you can leave it up to personal preference. But when traffic gets heavy, it's better for everyone to have established rules for which side to drive on, even when the rule itself is arbitrary.\r\n\r\nBut if you're driving on your own private road, by all means don't use dartfmt and drive how you like."", 'title': None, 'type': 'comment'}
 {'action': 'closed', 'author': 'munificent', 'comment_id': None, 'datetime': '2019-07-23 19:11:34+00:00', 'masked_author': 'username_2', 'text': '', 'title': None, 'type': 'issue'}]","<issue_start><issue_comment>Title: Loosen Effective Dart forEach advice to allow chaining?
username_0: Following up on https://github.com/dart-lang/linter/issues/365, it would be great to settle whether the Effective Dart [advice on `forEach`](https://www.dartlang.org/guides/language/effective-dart/usage#avoid-using-iterableforeach-with-a-function-literal) could be loosened to allow for functional-style chaining (e.g. `a .where().forEach()`) as proposed by @zoechi and mores recently by @username_1  in https://github.com/dart-lang/linter/issues/365#issuecomment-458194690.

@username_2?
<issue_comment>username_1: Just wanted to add my 2 cents in that this is an excellent programming technique as it leads to cleaner and more comprehensible code.  I wouldn't even mind doing a PR on the second if there is a documented procedure on how to do that :)
<issue_comment>username_0: Challenge accepted. 😄 

How about:

```dart
request.definitions?.forEach(_server.stdin.writeln);
```

vs... ?

(Actually, I'm not sure it's better, but certainly more terse and I think not _worse_ than alternatives.  WDYT?)
<issue_comment>username_1: I was actually thinking more along the lines of something like array function chaining... 

```
myArray
    .filter((Task xxx) => xxx.type == 2)
    .map((Task yyy) => yyy.readyPayload())
    .sort((Task a,Task  b) => a.compareTo(b))
    .forEach((result) {
        switch(result.command) {
            case 'transmit': {
                Xmiter.send(result.payload);
                break;
           }
           case 'dump': {
               print(result);
               break;
           }
           default : {
               Queue.insert(result);
               break;
         }
    }
  };
```

OK -- grant you -- rather contrived -- and I'm not sure it's syntactically correct .. but it's close..but I think it gets the idea?
<issue_comment>username_2: @username_0, your two examples already fall under the existing exception because you aren't passing a lambda to `forEach()`.

@username_1, something along the lines of your example is a good one. Basically a case where you have a method chain too big to stick after the `in` in a for-in loop and where the last thing you do is a block of code executed for its side effect.
<issue_comment>username_1: OK -- soooo -- are we stuck here?
<issue_comment>username_2: Not stuck, but no one's put work into moving it forward. Can you come up with a smaller but more complete looking example that we can show as an exception? Yours is partway there, but something with real types and only a few lines long would be better. 😄
<issue_comment>username_1: @username_2 -- I can certainly try -- but where do I post such a thing? Here?
<issue_comment>username_2: Yes, here is fine. :)
<issue_comment>username_3: Any updates on this? this is currently blocking dart-lang/linter#365
<issue_comment>username_2: On further thought, I don't think we're helping users by loosening this guideline. If you have a long method chain that produces an Iterable and you need to walk that iterable and do some kind of side effect, I think it's clearer to simply use a local variable and a for-in loop. So [this example](https://github.com/dart-lang/site-www/issues/1329#issuecomment-459508527) would become:

```dart
var tasks = myArray
    .filter((Task xxx) => xxx.type == 2)
    .map((Task yyy) => yyy.readyPayload())
tasks.sort((Task a,Task  b) => a.compareTo(b));
for (var result in tasks) {
  switch(result.command) {
    case 'transmit':
      Xmiter.send(result.payload);
      break;
    case 'dump':
      print(result);
      break;
    default:
      Queue.insert(result);
      break;
  }
}
```

I think that's better than:

```dart
(myArray
    .filter((Task xxx) => xxx.type == 2)
    .map((Task yyy) => yyy.readyPayload())
    ..sort((Task a,Task  b) => a.compareTo(b)))
    .forEach((result) {
      switch(result.command) {
        case 'transmit':
          Xmiter.send(result.payload);
          break;
        case 'dump':
          print(result);
          break;
        default:
          Queue.insert(result);
          break;
      }
    });
```

My reasons:

* It's less error-prone. (Note that the original example has a syntax error. @username_1 forgot the closing `)` at the end. Also note that `sort()` can't be used in a method chain.)
* There's less indentation and less nesting.
* The formatting is more obvious and less likely to be annoying. (dartfmt doesn't always do what you want when there are long method chains and big nested lambdas.)
* You can do more powerful control flow inside the body. You can use `return` or `break` to interact with control flow outside of the loop.
* Keeping the rule simpler gives users less to think about and less to argue about in code reviews. If we say ""long"" method chains are the exception, then people have to agree on what ""long"" means.

So I think we should just keep the rule as it is. How does that sound?
<issue_comment>username_1: I still disagree @username_2  -- to me this sounds like YOUR opinion on how things should go.  Yes, you have some good arguments but I don't believe they are worth taking away an option for a programmer to use a feature available in the ecosystem.  I thought some reasonable (and simple) use cases to allow this were given -- yes, for a long complex chain maybe it's not the best (although who I am to dictate that anyway) but for simpler chains this is still annoying in my opinion.

Of course, the above is just **my** opinion -- but I'm more a libertarian programmer. :)
<issue_comment>username_2: That's entirely valid, but in that case, an opinionated automated formatter might not be the right tool for you. :) dartfmt is *not* a libertarian tool. Its philosophy is that we are all more productive *in aggregate* when we agree to do things the same way, based on the assumption that we will frequently work with each others' code.

If the roads are empty, it doesn't matter which side you drive on, and you can leave it up to personal preference. But when traffic gets heavy, it's better for everyone to have established rules for which side to drive on, even when the rule itself is arbitrary.

But if you're driving on your own private road, by all means don't use dartfmt and drive how you like.<issue_closed>"
docpress/docpress,173640375,139,,"[{'action': 'opened', 'author': 'Kikobeats', 'comment_id': None, 'datetime': '2016-08-28 10:47:55+00:00', 'masked_author': 'username_0', 'text': ""Let's support comments using disqus!\r\n\r\nJust need to append extra HTML of bottom of doc pages:\r\n\r\nhttps://kikobeats.disqus.com/admin/universalcode/\r\n\r\nI think that this plugin is easy to write and useful, jut need a little of information about how to connect it with docpress core.\r\n\r\nWhat do you think? @rstacruz knownasilya"", 'title': 'disqus plugin', 'type': 'issue'}
 {'action': 'created', 'author': 'Kikobeats', 'comment_id': 243003469.0, 'datetime': '2016-08-28 22:27:39+00:00', 'masked_author': 'username_0', 'text': 'Ok, I understood now how works plugins.\r\n\r\nMy idea is add a metada similar to:\r\n\r\n```json\r\n""disqus"": {\r\n    ""shortname"": ""myShortName"",\r\n    ""exclude"": [\r\n      ""/index.html"",\r\n      ""/bibliography.html"",\r\n      ""/resources.html""\r\n    ]\r\n  }\r\n```\r\n\r\nand the follow snippet in the correct section of `layout.pug`:\r\n\r\n```\r\nmixin disqus(shortname)\r\n  #disqus_thread\r\n  script.\r\n    var disqus_shortname = \'#{shortname}\';\r\n\r\n    /* * * DON\'T EDIT BELOW THIS LINE * * */\r\n    (function() {\r\n      var dsq = document.createElement(\'script\'); dsq.type = \'text/javascript\'; dsq.async = true;\r\n      dsq.src = \'//\' + disqus_shortname + \'.disqus.com/embed.js\';\r\n      (document.getElementsByTagName(\'head\')[0] || document.getElementsByTagName(\'body\')[0]).appendChild(dsq);\r\n    })();\r\n  noscript\r\n    | Please enable JavaScript to view the \r\n    a(href=""http://disqus.com/?ref_noscript"") comments powered by Disqus.\r\n  a(href=""http://disqus.com"", class=""dsq-brlink"")\r\n    | comments powered by \r\n    span(class=\'logo-disqus\') Disqus\r\n```\r\n\r\n```jade\r\n- if (meta.disqus)\r\n            - var page = window.location.pathname\r\n            - if (meta.disqus.exclude.indexOf(page) === -1)\r\n              +disqus(meta.disqus.shortname)\r\n```\r\n\r\nThe only problem is that the template is render by jade in the server, so `window` object to recover `window.location.pathname` is `undefined` and doesn\'t work.\r\n\r\nAny idea to resolve this @rstacruz ?', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'Kikobeats', 'comment_id': 243084815.0, 'datetime': '2016-08-29 10:04:20+00:00', 'masked_author': 'username_0', 'text': 'Added here: https://github.com/docpress/docpress-base/pull/136', 'title': None, 'type': 'comment'}
 {'action': 'closed', 'author': 'Kikobeats', 'comment_id': None, 'datetime': '2016-08-29 13:41:26+00:00', 'masked_author': 'username_0', 'text': '', 'title': None, 'type': 'issue'}]","<issue_start><issue_comment>Title: disqus plugin
username_0: Let's support comments using disqus!

Just need to append extra HTML of bottom of doc pages:

https://kikobeats.disqus.com/admin/universalcode/

I think that this plugin is easy to write and useful, jut need a little of information about how to connect it with docpress core.

What do you think? @rstacruz knownasilya
<issue_comment>username_0: Ok, I understood now how works plugins.

My idea is add a metada similar to:

```json
""disqus"": {
    ""shortname"": ""myShortName"",
    ""exclude"": [
      ""/index.html"",
      ""/bibliography.html"",
      ""/resources.html""
    ]
  }
```

and the follow snippet in the correct section of `layout.pug`:

```
mixin disqus(shortname)
  #disqus_thread
  script.
    var disqus_shortname = '#{shortname}';

    /* * * DON'T EDIT BELOW THIS LINE * * */
    (function() {
      var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
      dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
      (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
  noscript
    | Please enable JavaScript to view the 
    a(href=""http://disqus.com/?ref_noscript"") comments powered by Disqus.
  a(href=""http://disqus.com"", class=""dsq-brlink"")
    | comments powered by 
    span(class='logo-disqus') Disqus
```

```jade
- if (meta.disqus)
            - var page = window.location.pathname
            - if (meta.disqus.exclude.indexOf(page) === -1)
              +disqus(meta.disqus.shortname)
```

The only problem is that the template is render by jade in the server, so `window` object to recover `window.location.pathname` is `undefined` and doesn't work.

Any idea to resolve this @rstacruz ?
<issue_comment>username_0: Added here: https://github.com/docpress/docpress-base/pull/136<issue_closed>"
devopsdays/devopsdays-web,175563642,1063,,"[{'action': 'opened', 'author': 'mattstratton', 'comment_id': None, 'datetime': '2016-09-07 17:40:41+00:00', 'masked_author': 'username_0', 'text': ""There is now a script that will load all the hugo goodness in a docker container [here](https://github.com/devopsdays/devopsdays-web/blob/master/hugoserver.sh).\r\n\r\nWe need to turn this into a functional PowerShell script that will work on a Windows machine running Docker.\r\n\r\nI've made a couple passes at it, but I'm having some issues translating some of the bash stuff into posh. Anyone want to take a swing?"", 'title': 'get the hugo docker script to work on Windows', 'type': 'issue'}
 {'action': 'created', 'author': 'mattstratton', 'comment_id': 245584637.0, 'datetime': '2016-09-08 12:42:53+00:00', 'masked_author': 'username_0', 'text': 'More details here - https://gist.github.com/username_0/471a7e1cf781d10de47cb44b69fa3a8e', 'title': None, 'type': 'comment'}
 {'action': 'closed', 'author': 'mattstratton', 'comment_id': None, 'datetime': '2016-10-24 20:59:21+00:00', 'masked_author': 'username_0', 'text': '', 'title': None, 'type': 'issue'}]","<issue_start><issue_comment>Title: get the hugo docker script to work on Windows
username_0: There is now a script that will load all the hugo goodness in a docker container [here](https://github.com/devopsdays/devopsdays-web/blob/master/hugoserver.sh).

We need to turn this into a functional PowerShell script that will work on a Windows machine running Docker.

I've made a couple passes at it, but I'm having some issues translating some of the bash stuff into posh. Anyone want to take a swing?
<issue_comment>username_0: More details here - https://gist.github.com/username_0/471a7e1cf781d10de47cb44b69fa3a8e<issue_closed>"
