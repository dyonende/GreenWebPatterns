ethereum/ethereum-org-website,984239744,3777,"{'number': 3777.0, 'repo': 'ethereum-org-website', 'user_login': 'ethereum'}","[{'action': 'opened', 'author': 'joakimengerstam', 'comment_id': None, 'datetime': '2021-08-31T19:46:59Z', 'masked_author': 'username_0', 'text': ""Aligned energy calculations with Carl's article\r\n\r\n## Description\r\n\r\n1: Added link on NFT page to Carl's energy article: https://blog.ethereum.org/2021/05/18/country-power-no-more/\r\n\r\n![added-link](https://user-images.githubusercontent.com/12713452/131566109-b146cf98-02bb-42c3-bb75-117210382b9a.jpg)\r\n\r\n2: Aligned energy calculations with Carl's article.\r\n\r\n![Updated-calculations](https://user-images.githubusercontent.com/12713452/131566143-ba7ee017-fe14-4c1c-bbb6-ae8cf55ea7e9.jpg)\r\n\r\n## Related Issue\r\n3072\r\nhttps://github.com/ethereum/ethereum-org-website/issues/3072"", 'title': 'Align energy calculations with Carl´s article [Fixes #3072]', 'type': 'issue'}
 {'action': 'created', 'author': 'minimalsm', 'comment_id': 910145360.0, 'datetime': '2021-09-01 10:19:45+00:00', 'masked_author': 'username_1', 'text': ""Big thanks for this @username_0, it's a bigger help than you know 😃. FYI I changed `energy use` to `energy usage` as I think it's clearer and `Proof of Stake` to `proof-of-stake` as that is the spelling we'll be using site-wide going forward. \r\n\r\nBe sure to [join the discord](https://discord.gg/CetY6Y4) if you are interested in contributing further to the project or have any questions for the team. And remember to [claim your POAP](https://ethereum.org/en/contributing/#poap) also 🥳!"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'minimalsm', 'comment_id': 910145477.0, 'datetime': '2021-09-01 10:19:56+00:00', 'masked_author': 'username_1', 'text': '@all-contributors please add @username_0 for docs', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'minimalsm', 'comment_id': 910148856.0, 'datetime': '2021-09-01 10:24:52+00:00', 'masked_author': 'username_1', 'text': 'Also `gross overestimate` to `gross overestimation`', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'joakimengerstam', 'comment_id': 910158430.0, 'datetime': '2021-09-01 10:39:48+00:00', 'masked_author': 'username_0', 'text': 'Thanks Joshua for reviewing!  I enjoyed it, and and will do more contributions in the future.', 'title': None, 'type': 'comment'}]","<issue_start><issue_comment>Title: Align energy calculations with Carl´s article [Fixes #3072]
username_0: Aligned energy calculations with Carl's article

## Description

1: Added link on NFT page to Carl's energy article: https://blog.ethereum.org/2021/05/18/country-power-no-more/

![added-link](https://user-images.githubusercontent.com/12713452/131566109-b146cf98-02bb-42c3-bb75-117210382b9a.jpg)

2: Aligned energy calculations with Carl's article.

![Updated-calculations](https://user-images.githubusercontent.com/12713452/131566143-ba7ee017-fe14-4c1c-bbb6-ae8cf55ea7e9.jpg)

## Related Issue
3072
https://github.com/ethereum/ethereum-org-website/issues/3072
<issue_comment>username_1: Big thanks for this @username_0, it's a bigger help than you know 😃. FYI I changed `energy use` to `energy usage` as I think it's clearer and `Proof of Stake` to `proof-of-stake` as that is the spelling we'll be using site-wide going forward. 

Be sure to [join the discord](https://discord.gg/CetY6Y4) if you are interested in contributing further to the project or have any questions for the team. And remember to [claim your POAP](https://ethereum.org/en/contributing/#poap) also 🥳!
<issue_comment>username_1: @all-contributors please add @username_0 for docs
<issue_comment>username_1: Also `gross overestimate` to `gross overestimation`
<issue_comment>username_0: Thanks Joshua for reviewing!  I enjoyed it, and and will do more contributions in the future."
flutter/website,391425693,2055,,"[{'action': 'opened', 'author': 'pedromorgan', 'comment_id': None, 'datetime': '2018-12-16 01:13:56+00:00', 'masked_author': 'username_0', 'text': 'It would be nice to have dart and flutter link hightlighted..\r\neg from https://github.com/revel/revel.github.io/blob/master/css/revel.17.css\r\n```\r\n/* golang.org and base packages */\r\n.main a[href^=""https://www.golang.org""],\r\n.main a[href^=""http://www.golang.org""],\r\n.main a[href^=""http://golang.org""],\r\n.main a[href^=""https://golang.org""]\r\n{ \r\n  color: #222222; \r\n  background-color: #CBFFFD !important;\r\n  font-family: monospace;\r\n  background: url(/img/gopher-link.png);\r\n  background-position: top right;\r\n  background-repeat: no-repeat;\r\n  padding-right: 12px;\r\n}\r\n/* godoc.org + revel */\r\n.main a[href^=""https://godoc.org/github.com/revel""] { \r\n\tcolor: #535353 !important; \r\n\tbackground-color: #E9F5FF !important;\r\n\tfont-family: monospace;\r\n\tfont-weight: bold;\r\n\t/* background: url(/img/godoc.png);\r\n\tbackground-position: top right;\r\n\tbackground-repeat: no-repeat; padding-right: 16px; */\r\n```', 'title': 'Highlight CSS links', 'type': 'issue'}
 {'action': 'created', 'author': 'pedromorgan', 'comment_id': 447611153.0, 'datetime': '2018-12-16 01:44:54+00:00', 'masked_author': 'username_0', 'text': 'so `dart-link`, and `flutter-core` and `plugin` style would be nice,', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'pedromorgan', 'comment_id': 447611259.0, 'datetime': '2018-12-16 01:47:32+00:00', 'masked_author': 'username_0', 'text': 'Orange = [Positiv](https://www.empower-yourself-with-color-psychology.com/color-orange.html)\r\n\r\nBlue = [stable](https://graf1x.com/shades-of-blue-color-palette/)', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'sfshaza2', 'comment_id': 458716965.0, 'datetime': '2019-01-29 21:37:42+00:00', 'masked_author': 'username_1', 'text': 'Sorry, but not a priority. Closing.', 'title': None, 'type': 'comment'}
 {'action': 'closed', 'author': 'sfshaza2', 'comment_id': None, 'datetime': '2019-01-29 21:37:43+00:00', 'masked_author': 'username_1', 'text': '', 'title': None, 'type': 'issue'}]","<issue_start><issue_comment>Title: Highlight CSS links
username_0: It would be nice to have dart and flutter link hightlighted..
eg from https://github.com/revel/revel.github.io/blob/master/css/revel.17.css
```
/* golang.org and base packages */
.main a[href^=""https://www.golang.org""],
.main a[href^=""http://www.golang.org""],
.main a[href^=""http://golang.org""],
.main a[href^=""https://golang.org""]
{ 
  color: #222222; 
  background-color: #CBFFFD !important;
  font-family: monospace;
  background: url(/img/gopher-link.png);
  background-position: top right;
  background-repeat: no-repeat;
  padding-right: 12px;
}
/* godoc.org + revel */
.main a[href^=""https://godoc.org/github.com/revel""] { 
	color: #535353 !important; 
	background-color: #E9F5FF !important;
	font-family: monospace;
	font-weight: bold;
	/* background: url(/img/godoc.png);
	background-position: top right;
	background-repeat: no-repeat; padding-right: 16px; */
```
<issue_comment>username_0: so `dart-link`, and `flutter-core` and `plugin` style would be nice,
<issue_comment>username_0: Orange = [Positiv](https://www.empower-yourself-with-color-psychology.com/color-orange.html)

Blue = [stable](https://graf1x.com/shades-of-blue-color-palette/)
<issue_comment>username_1: Sorry, but not a priority. Closing.<issue_closed>"
bevyengine/bevy-website,932141842,182,"{'number': 182.0, 'repo': 'bevy-website', 'user_login': 'bevyengine'}","[{'action': 'opened', 'author': 'alice-i-cecile', 'comment_id': None, 'datetime': '2021-06-29T02:19:34Z', 'masked_author': 'username_0', 'text': ""Incomplete, but still useful enough to start getting reviews on. To do:\r\n\r\n- [ ] Consider chapter order: I think I would prefer all chapters on queries to live beside each other.\r\n- [ ] Finish the page on exclusive world access: there are some advanced (and new!) APIs that I'm not familiar with.\r\n- [ ] Swap to the properly compiled / embedded code style.\r\n- [ ] Write several code examples for the last few pages in the chapter."", 'title': 'ECS chapter for new book', 'type': 'issue'}
 {'action': 'created', 'author': 'Nilirad', 'comment_id': 870421652.0, 'datetime': '2021-06-29 09:10:29+00:00', 'masked_author': 'username_1', 'text': '@username_2 I think this PR involves more files than it should, probably because @username_0 included the commit ""Book structure"" (252325d)', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'MinerSebas', 'comment_id': 870431738.0, 'datetime': '2021-06-29 09:24:04+00:00', 'masked_author': 'username_2', 'text': 'I think the problem is more that this targets the `master` branch, and not the `new-book` branch which already includes 252325d', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'Nilirad', 'comment_id': 870492300.0, 'datetime': '2021-06-29 10:56:06+00:00', 'masked_author': 'username_1', 'text': 'So changing the base branch would fix this?', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'MinerSebas', 'comment_id': 870534651.0, 'datetime': '2021-06-29 12:04:30+00:00', 'masked_author': 'username_2', 'text': 'Yes it should. I leave the Github documentation here, because this feature is pretty hidden: https://docs.github.com/en/github/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/changing-the-base-branch-of-a-pull-request', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'alice-i-cecile', 'comment_id': 870757761.0, 'datetime': '2021-06-29 16:49:54+00:00', 'masked_author': 'username_0', 'text': ""Awesome feedback! Let's get the branch fixed up first..."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'alice-i-cecile', 'comment_id': 870761217.0, 'datetime': '2021-06-29 16:55:07+00:00', 'masked_author': 'username_0', 'text': 'Yeah, I\'m not sure how I feel about complex examples. The entities-components example definitely needs to be cut in favor of something simpler. At the same time, I want to have complete, runnable snippets that actually demonstrate the features.\r\n\r\nThere\'s a lot of ground to cover, and just talking about things in the abstract is not going to do a lot of good for beginners. I also very often find myself trying to figure out ""oh what\'s the exact syntax / snippet for this again..."", and looking at resources like this to find a complete working example I can hack on.\r\n\r\nI\'m not a fan of the running example, since it\'s hard to avoid shoe-horning features in, and the book is not always going to be read in a linear order. Originally I\'d proposed end-of-chapter examples, but those were cut due to perceived effort required (per @cart\'s request). I think simplify + link to existing Bevy examples for more depth might be the way to go?', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'alice-i-cecile', 'comment_id': 870767928.0, 'datetime': '2021-06-29 17:05:19+00:00', 'masked_author': 'username_0', 'text': '- @username_1\r\n\r\nFirst off, this particular example needs to be *massively* reduced and simplified. I\'ll do that ASAP and then we can see how it looks.\r\n\r\nIMO the proposed style of running example is *much* better handled by the quick start guides: that\'s the learning style they\'re designed for. The book itself is intended to be more comprehensive and academic, getting into the how and why on a deeper level and serving as a reference to refer back to later.\r\n\r\nThe entangled nature of many of these topics is rough for strictly-in-order topics: I\'d prefer to lean more heavily on the chapter introduction to mention topics and preserve the value of each page as more in-depth reference material. We can\'t introduce entities without a way to spawn them, and talking about commands immediately is worthless for example. Instead, I\'d like to lean on the high level introduction to briefly define concepts and not worry aggressively about out-of-order concepts.\r\n\r\nWe\'ll do our best on that of course, but ""beginner who reads the entire book cover-to-cover in order"" is not our only (or likely most common) audience.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'ickk', 'comment_id': 870969933.0, 'datetime': '2021-06-29 22:52:24+00:00', 'masked_author': 'username_3', 'text': 'Out of curiosity, is this functionally the same as just a rebase on `new-book` follow by a force push?', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'MinerSebas', 'comment_id': 871174165.0, 'datetime': '2021-06-30 07:46:00+00:00', 'masked_author': 'username_2', 'text': ""No, it wouldn't. Let me show it with some commit trees\r\nHere Main represents the Main branch, Book the `new-book` branch with  252325d and PR this PR.\r\n\r\n```\r\nMain\r\n    \\\r\n    Book\r\n       \\ \r\n         PR\r\n```\r\n\r\nOriginally this PR tried to merge all changes into Main, but because Main didn't have 252325d  yet it was also shown in difff.\r\n\r\n```\r\nMain -------- Merge\r\n    \\         /\r\n    Book     /\r\n       \\    /\r\n         PR\r\n```\r\n\r\nThe change was which branch was targeted. \r\nBy targeting `new-book` the diff no longer shows changes that 252325d did, because they are already present in `new-book` \r\n\r\n```\r\nMain\r\n    \\\r\n    Book --- Merge\r\n       \\    /\r\n         PR\r\n```\r\n\r\nBut by the same token, rebasing onto `new-book` wouldn't have changed anything, because 1.) the target/base branch would have still been Main which doesn't have 252325d  and 2.) the rebase wouldnt have removed 252325d"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'Nilirad', 'comment_id': 871221460.0, 'datetime': '2021-06-30 08:57:56+00:00', 'masked_author': 'username_1', 'text': ""Yeah, you convinced me, I also thought about quick start guides at a certain point. I think that the examples can be simplified a lot. To make the examples as practical and lightweight as possible, I thought about a couple of things:\r\n\r\n- **Using `MinimalPlugins` or `ScheduleRunnerPlugin`.** Differently from `DefaultPlugins`, they give the ability to control the frequency of the game loop. This will make the user understand better what's going on.\r\n- **Stripping out unnecessary features.** Excluding from the examples things like user input and assets will drastically reduce its cognitive load.\r\n- **Simpler problem domain.** If the idea of the example is simple, it's implementation will also be simple. Less systems, less components, less entities."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'alice-i-cecile', 'comment_id': 871226792.0, 'datetime': '2021-06-30 09:05:25+00:00', 'masked_author': 'username_0', 'text': 'This is a good call. I may also poke around and see if I can make a `CommandLinePlugins`, to create a custom runner designed for terminal games. This would be fantastic for examples, allowing us to gloss over the hard bits of making things work (and would be handy for quite a few games / applications as well).', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'Nilirad', 'comment_id': 871237342.0, 'datetime': '2021-06-30 09:20:10+00:00', 'masked_author': 'username_1', 'text': ""There is the `bevy_crossterm` plugin that does a similar job. It's outdated (supports Bevy 0.4) and maybe a bit too complex for our purposes, but it may be a good source of inspiration."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'Nilirad', 'comment_id': 872398678.0, 'datetime': '2021-07-01 16:46:38+00:00', 'masked_author': 'username_1', 'text': ""I thought about a potential chapter structure that could expose the topics in a more relaxed manner. I think that we can actually do that if we don't hurry about showing complete code examples too early. The secret is not strictly following the structure of the API, that, while being optimized for *usage*, it does not care about laying out concepts.\r\n\r\nI sorted out the main ECS concepts in my mind (and on paper) and I came out with a peculiar structure, that while I don't expect it to be adopted as-is, can give some insight.\r\n\r\nBasically, I subdivided the chapter in two cognitive sections, a theoric one and a practical one, with a soft boundary between the two. The first, theoric section, talks about the ecs world, where entities and components are stored inside. Then, in the second, mostly practical section, we talk about systems and the tools to govern them, with simple but representative examples.\r\n\r\n- **The ECS world (static viewpoint of ECS).** The world defines what exists in a Bevy application. Let's see how it does that.\r\n    - **Entities and components.** What are they? How do they relate to each other? Why is this kind of data organization so special? What does it have that a classical OOP approach doesn't?\r\n    - **Resources.** What are they? Why do they exist when we already have entities? What's are the differences from an entity? When should they be preferred over an entity?\r\n- **The ECS schedule (dynamic viewpoint of ECS).** The world is not static. The schedule makes stuff happen by reading from and writing data to the world, through systems.\r\n    - **Systems and parameters.** What are systems needed for in an ECS application? How can we read from and write to the world? Using system parameters. What are they? What system parameters can we use? How do we set up a world? Startup systems. How do we make the world look alive? Normal/update systems (we may add a couple of simple examples to show how those system _looks_, without focusing the attention to the specific parameters that are not introduced yet). Now let's see how some common system parameters work.\r\n    - **Commands.** Why do they exist? Here we start writing our first system, where we spawn and build our first entity (the tedious, component-wise way).\r\n    - **Component bundles.** Introduce bundles. Show how it's easier to build an entity now. This *may* be included in the same section of commands, since it's not too much content and they are often used in startup systems to spawn entities.\r\n    - **Resource fetching.** While resources have already been introduced, here they are shown in the context of system parameters. Also resource insertion during app setup should be shown, since in the theoric section code examples are very minimal if not absent.\r\n    - **Queries, filtering and component change detection.** Queries are often used in normal/update systems to make stuff happen. The current text for the section(s) is already good, maybe some tweaks for integration would be needed at max. As there is much content here, splitting it in two or three sections may be a good idea (as it's already done).\r\n    - **Generic systems and exclusive world access.** These two sections are a bit like an appendix, since they are not as much needed as the above, but they may still be good to have anyway. Actually, generic systems are not a proper Bevy ECS feature, but maybe it could be beneficial to show some examples, I can't know for sure.\r\n\r\n[This resource](https://www.youtube.com/watch?v=aKLntZcp27M) may be a good source of inspiration for the OOP vs ECS approaches to game development, if you didn't see it already."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'alice-i-cecile', 'comment_id': 892308914.0, 'datetime': '2021-08-04 02:23:22+00:00', 'masked_author': 'username_0', 'text': 'So https://github.com/bevyengine/bevy-website/pull/182/commits/4ed2ca5bcc7b8d17699f5cfcd7e84cd38ee3cbd1 adds a more involved example to the start of the chapter. There are two broad areas I want feedback on:\r\n\r\n**1. Is it correct to include a high-level, minimal explanation example at this point in the book?**\r\n\r\nMy core argument here is ""everything is too interwoven: there is no single linear order that works for learning the ECS"". Components and entities are unusable without basic commands, but you can\'t get into how commands *actually* work without a huge amount of background. As I\'d like to prioritize in-depth explanations of the details, to make the book more useful to convey subtleties and tricks, I want to keep e.g. ""commands 101"" and ""custom commands"" on the same page, even though the latter will not be useful until you\'re an advanced user.\r\n\r\nBy throwing an interwoven example in (and eventually, pointing the users to the quickstart guides) to supplement the high-level explanation, we can give the reader a vocabulary and basic gloss of the architecture used so they can follow along on their first read of the rest of the sub-chapters.\r\n\r\n**2. How is this particular example? Should it be replaced by something else? Concrete suggestions are useful.**\r\n\r\nI\'m not thrilled with several things:\r\n1. The player / enemy entity access pattern is not very pretty, although it *does* demonstrate the `query.get` API which is often seriously overlooked by newcomers.\r\n2. The example won\'t compile until someone (probably me...) adds an API for https://github.com/bevyengine/bevy/issues/2276 and it\'s merged in. This can be solved with marker components in place of a side enum, but then you get conflicting queries and have to do the dumb `(With<Player>, Without<Enemy>>)` thing.\r\n3. The complexity is a higher than I\'d *really* prefer for a first real example. Some trickiness with run criteria, change detection, random access to component data, fancy match statements, system ordering...\r\n4. We don\'t make use of the window created by `DefaultPlugins`. This could be solved by a better plugin set. I decided not to do input handling or graphics to manage complexity but it\'s not a very fun or impressive game at all. Maybe we can swallow the complexity here by swapping to a much simpler logic game?', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'Nilirad', 'comment_id': 892857175.0, 'datetime': '2021-08-04 17:57:26+00:00', 'masked_author': 'username_1', 'text': 'These are my thoughts on how it could be improved and what may look off:\r\n\r\n1. I suggest changing system function names to include the `_system` suffix, as convention in the Bevy source code and previous documentation.\r\n2. Declare resources and components earlier, before the main function. In this way, readers don\'t get confused too much when they read the main function. I think that systems can still come after `main` though.\r\n3. The `Side` component needs a comment showing its role inside the game.\r\n4. I think entity indexing through `CombatantEntities` can be avoided. We can still talk about `Query::{get, get_mut}` in the queries section. Query filtering based on `Side` should do the job.\r\n5. I don\'t think introducing bundles here has a high benefit/cost ratio. Inserting components one by one is not too much tedious (it is actually shorter in this case), and we can still introduce bundles later. Actually the real power of bundles come from the struct update syntax, where it can significantly reduce the number of lines. But not here, where it just increase them instead.\r\n6. `p_` and `e_` prefixes for ""player"" and ""enemy"" in `combat` makes everything a bit difficult to understand despite making things more compact.\r\n7. `check_victory` system is not immediately understandable. At first sight it even seems that the character whose life goes to 0 wins.\r\n8. The lack of a definitive game over condition looks a bit underwhelming. Despite the `if` statement in `combat`, systems continue to run, and `Victory::Concluded` can give a wrong value before settling to the correct one.\r\n\r\n### Alternative example\r\n\r\nI still think it is difficult to simplify the combat example under a non overwhelming level. Probably some useful `bevy_ecs` features are still not present or the domain is more complex than we thought (probably both are factors). So I propose a simpler example, that I prepared below, featuring a single entity and no resources. The problem domain is an entity falling by some sort of ""gravity"" towards y = 0, and receiving fall damage. I made two versions, where the simpler one may be around 100 LOC if we add more comments. If a resource is *really* needed, i thought about an achievement that gets unlocked if a fall doesn\'t kill the entity but it leaves it with 1 `Life` point or less.\r\n\r\n<details>\r\n<summary>More complex version</summary>\r\n\r\n```rust\r\nuse bevy::app::AppExit;\r\nuse bevy::log::LogPlugin;\r\nuse bevy::prelude::*;\r\n\r\n// This component defines our entity\'s life.\r\nstruct Life(f32);\r\n\r\n// This component is used to mark if our entity is currently airborne.\r\nstruct Falling {\r\n    // The higher the initial height of falling, the higher the damage.\r\n    height: f32,\r\n}\r\n\r\nfn main() {\r\n    App::new()\r\n        .add_plugins(MinimalPlugins)\r\n        .add_plugin(LogPlugin)\r\n        .add_startup_system(spawn_player_system)\r\n        .add_system_set(\r\n            SystemSet::new()\r\n                .label(""logic"")\r\n                .with_system(gravity_system.label(""gravity""))\r\n                .with_system(fall_damage_system.after(""gravity"")),\r\n        )\r\n        .add_system_set(\r\n            SystemSet::new()\r\n                .label(""report"")\r\n                .after(""logic"")\r\n                .with_system(report_life_system)\r\n                .with_system(report_height_system),\r\n        )\r\n        .add_system(game_over_system.after(""report""))\r\n        .run();\r\n}\r\n\r\n// This system spawns the player at a fairly high elevation.\r\nfn spawn_player_system(mut commands: Commands) {\r\n    const INITIAL_HEIGHT: f32 = 15.0;\r\n\r\n    commands\r\n        .spawn()\r\n        .insert(Life(20.0))\r\n        .insert(Transform::from_translation(Vec3::new(\r\n            0.0,\r\n            INITIAL_HEIGHT,\r\n            0.0,\r\n        )))\r\n        .insert(Falling {\r\n            height: INITIAL_HEIGHT,\r\n        });\r\n}\r\n\r\n// This system pulls down the entity towards the ground (at y = 0), at a constant velocity,\r\n// only while it\'s falling.\r\nfn gravity_system(mut query: Query<&mut Transform, With<Falling>>) {\r\n    // We use query.single since we are sure the query will match only one entity here.\r\n    if let Ok(mut transform) = query.single_mut() {\r\n        transform.translation.y = (transform.translation.y - 1.0).max(0.0);\r\n    }\r\n}\r\n\r\n[Truncated]\n    mut commands: Commands,\r\n    mut query: Query<(Entity, &mut Life, &Falling, &mut Transform), With<Falling>>,\r\n    mut exit: EventWriter<AppExit>,\r\n) {\r\n    if let Ok((entity, mut life, falling, mut transform)) = query.single_mut() {\r\n        // Our entity has touched the ground\r\n        if transform.translation.y <= 0.0 {\r\n            transform.translation.y = 0.0;\r\n            commands.entity(entity).remove::<Falling>();\r\n\r\n            let damage = (falling.height - 3.0).max(0.0);\r\n            life.0 = (life.0 - damage).max(0.0);\r\n            info!(""Damage: {}"", damage);\r\n            exit.send(AppExit);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n</details>', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'alice-i-cecile', 'comment_id': 892899284.0, 'datetime': '2021-08-04 19:03:17+00:00', 'masked_author': 'username_0', 'text': ""I agree with your assessment: the combat example is not feasible to adequately simplify.\r\n\r\nI'm going to replace it with a lightly tweaked version of your simpler example. I'll expand on the comments, and added a second entity. `.single()` is a lovely API, but it's not representative of typical ECS code and should not be the first thing we introduce."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'IceSentry', 'comment_id': 894509827.0, 'datetime': '2021-08-06 20:46:19+00:00', 'masked_author': 'username_4', 'text': ""There's a few inconsistencies with using .system(). The first example doesn't use .system() but most other examples after that use .system()."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'alice-i-cecile', 'comment_id': 961623676.0, 'datetime': '2021-11-05 04:42:08+00:00', 'masked_author': 'username_0', 'text': ""Alright, this is ready for final review! I'd prefer to merge this in ASAP if possible, and then make further additions or corrections in separate PRS: the length of both this thread and the PR is already excessive."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'colepoirier', 'comment_id': 961742356.0, 'datetime': '2021-11-05 09:24:04+00:00', 'masked_author': 'username_5', 'text': 'Small style note, if I run zola serve for the latest ecs book chapter pr the indentation looks to be double what it should be  http://127.0.0.1:1111/learn/book/ecs/queries/', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'mirkoRainer', 'comment_id': 961762473.0, 'datetime': '2021-11-05 09:56:45+00:00', 'masked_author': 'username_6', 'text': 'This looks to be a tabs vs spaces thing.\r\nPlaces where spaces are, the indentation looks fine:\r\n![image](https://user-images.githubusercontent.com/52899592/140491381-02730bfe-4fc3-482c-a188-4030ff2f77f4.png)\r\n\r\nBut where there are tabs:\r\n![image](https://user-images.githubusercontent.com/52899592/140491419-2d99a427-4c42-49c9-8310-100cf4db4d3d.png)\r\n\r\nThis should fix it if you want:\r\nhttps://github.com/username_0/bevy-website/pull/2', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'alice-i-cecile', 'comment_id': 962031980.0, 'datetime': '2021-11-05 16:20:30+00:00', 'masked_author': 'username_0', 'text': 'Merged, thanks!', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'KDecay', 'comment_id': 1037404780.0, 'datetime': '2022-02-12 19:13:54+00:00', 'masked_author': 'username_7', 'text': 'Enabled the anchor links for the ECS section in https://github.com/username_0/bevy-website/pull/4.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'alice-i-cecile', 'comment_id': 1067160179.0, 'datetime': '2022-03-14 18:38:57+00:00', 'masked_author': 'username_0', 'text': 'Closing this out in favor of the small, split PRs linked above. Working with all of the changes in a single PR is incredibly unwieldy as both an author and reviewer.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'C-BJ', 'comment_id': 1079900070.0, 'datetime': '2022-03-27 10:25:30+00:00', 'masked_author': 'username_8', 'text': 'Any plans to localize Bevy Book?', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'alice-i-cecile', 'comment_id': 1079962751.0, 'datetime': '2022-03-27 16:14:40+00:00', 'masked_author': 'username_0', 'text': ""@username_8 personally yes, but once it's significantly more stable. I don't think it makes sense until 1.0."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'doup', 'comment_id': 1080289283.0, 'datetime': '2022-03-28 07:21:53+00:00', 'masked_author': 'username_9', 'text': 'Maybe https://github.com/bevyengine/bevy-website/issues/265 can be updated listing the PRs on the description?\r\n\r\n```\r\n- [ ] https://github.com/bevyengine/bevy-website/pull/290\r\n- [ ] https://github.com/bevyengine/bevy-website/pull/291\r\n- [ ] https://github.com/bevyengine/bevy-website/pull/292\r\n- [ ] https://github.com/bevyengine/bevy-website/pull/293\r\n- [ ] https://github.com/bevyengine/bevy-website/pull/294\r\n- [ ] https://github.com/bevyengine/bevy-website/pull/295\r\n- [ ] https://github.com/bevyengine/bevy-website/pull/296\r\n- [ ] https://github.com/bevyengine/bevy-website/pull/297\r\n```', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'ickk', 'comment_id': 1080343636.0, 'datetime': '2022-03-28 08:23:07+00:00', 'masked_author': 'username_3', 'text': ""As an alternative, I'd advocate for setting up a project board instead of trying to use a tracking issue that needs to be manually kept in sync"", 'title': None, 'type': 'comment'}]","<issue_start><issue_comment>Title: ECS chapter for new book
username_0: Incomplete, but still useful enough to start getting reviews on. To do:

- [ ] Consider chapter order: I think I would prefer all chapters on queries to live beside each other.
- [ ] Finish the page on exclusive world access: there are some advanced (and new!) APIs that I'm not familiar with.
- [ ] Swap to the properly compiled / embedded code style.
- [ ] Write several code examples for the last few pages in the chapter.
<issue_comment>username_1: @username_2 I think this PR involves more files than it should, probably because @username_0 included the commit ""Book structure"" (252325d)
<issue_comment>username_2: I think the problem is more that this targets the `master` branch, and not the `new-book` branch which already includes 252325d
<issue_comment>username_1: So changing the base branch would fix this?
<issue_comment>username_2: Yes it should. I leave the Github documentation here, because this feature is pretty hidden: https://docs.github.com/en/github/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/changing-the-base-branch-of-a-pull-request
<issue_comment>username_0: Awesome feedback! Let's get the branch fixed up first...
<issue_comment>username_0: Yeah, I'm not sure how I feel about complex examples. The entities-components example definitely needs to be cut in favor of something simpler. At the same time, I want to have complete, runnable snippets that actually demonstrate the features.

There's a lot of ground to cover, and just talking about things in the abstract is not going to do a lot of good for beginners. I also very often find myself trying to figure out ""oh what's the exact syntax / snippet for this again..."", and looking at resources like this to find a complete working example I can hack on.

I'm not a fan of the running example, since it's hard to avoid shoe-horning features in, and the book is not always going to be read in a linear order. Originally I'd proposed end-of-chapter examples, but those were cut due to perceived effort required (per @cart's request). I think simplify + link to existing Bevy examples for more depth might be the way to go?
<issue_comment>username_0: - @username_1

First off, this particular example needs to be *massively* reduced and simplified. I'll do that ASAP and then we can see how it looks.

IMO the proposed style of running example is *much* better handled by the quick start guides: that's the learning style they're designed for. The book itself is intended to be more comprehensive and academic, getting into the how and why on a deeper level and serving as a reference to refer back to later.

The entangled nature of many of these topics is rough for strictly-in-order topics: I'd prefer to lean more heavily on the chapter introduction to mention topics and preserve the value of each page as more in-depth reference material. We can't introduce entities without a way to spawn them, and talking about commands immediately is worthless for example. Instead, I'd like to lean on the high level introduction to briefly define concepts and not worry aggressively about out-of-order concepts.

We'll do our best on that of course, but ""beginner who reads the entire book cover-to-cover in order"" is not our only (or likely most common) audience.
<issue_comment>username_3: Out of curiosity, is this functionally the same as just a rebase on `new-book` follow by a force push?
<issue_comment>username_2: No, it wouldn't. Let me show it with some commit trees
Here Main represents the Main branch, Book the `new-book` branch with  252325d and PR this PR.

```
Main
    \
    Book
       \ 
         PR
```

Originally this PR tried to merge all changes into Main, but because Main didn't have 252325d  yet it was also shown in difff.

```
Main -------- Merge
    \         /
    Book     /
       \    /
         PR
```

The change was which branch was targeted. 
By targeting `new-book` the diff no longer shows changes that 252325d did, because they are already present in `new-book` 

```
Main
    \
    Book --- Merge
       \    /
         PR
```

But by the same token, rebasing onto `new-book` wouldn't have changed anything, because 1.) the target/base branch would have still been Main which doesn't have 252325d  and 2.) the rebase wouldnt have removed 252325d
<issue_comment>username_1: Yeah, you convinced me, I also thought about quick start guides at a certain point. I think that the examples can be simplified a lot. To make the examples as practical and lightweight as possible, I thought about a couple of things:

- **Using `MinimalPlugins` or `ScheduleRunnerPlugin`.** Differently from `DefaultPlugins`, they give the ability to control the frequency of the game loop. This will make the user understand better what's going on.
- **Stripping out unnecessary features.** Excluding from the examples things like user input and assets will drastically reduce its cognitive load.
- **Simpler problem domain.** If the idea of the example is simple, it's implementation will also be simple. Less systems, less components, less entities.
<issue_comment>username_0: This is a good call. I may also poke around and see if I can make a `CommandLinePlugins`, to create a custom runner designed for terminal games. This would be fantastic for examples, allowing us to gloss over the hard bits of making things work (and would be handy for quite a few games / applications as well).
<issue_comment>username_1: There is the `bevy_crossterm` plugin that does a similar job. It's outdated (supports Bevy 0.4) and maybe a bit too complex for our purposes, but it may be a good source of inspiration.
<issue_comment>username_1: I thought about a potential chapter structure that could expose the topics in a more relaxed manner. I think that we can actually do that if we don't hurry about showing complete code examples too early. The secret is not strictly following the structure of the API, that, while being optimized for *usage*, it does not care about laying out concepts.

I sorted out the main ECS concepts in my mind (and on paper) and I came out with a peculiar structure, that while I don't expect it to be adopted as-is, can give some insight.

Basically, I subdivided the chapter in two cognitive sections, a theoric one and a practical one, with a soft boundary between the two. The first, theoric section, talks about the ecs world, where entities and components are stored inside. Then, in the second, mostly practical section, we talk about systems and the tools to govern them, with simple but representative examples.

- **The ECS world (static viewpoint of ECS).** The world defines what exists in a Bevy application. Let's see how it does that.
    - **Entities and components.** What are they? How do they relate to each other? Why is this kind of data organization so special? What does it have that a classical OOP approach doesn't?
    - **Resources.** What are they? Why do they exist when we already have entities? What's are the differences from an entity? When should they be preferred over an entity?
- **The ECS schedule (dynamic viewpoint of ECS).** The world is not static. The schedule makes stuff happen by reading from and writing data to the world, through systems.
    - **Systems and parameters.** What are systems needed for in an ECS application? How can we read from and write to the world? Using system parameters. What are they? What system parameters can we use? How do we set up a world? Startup systems. How do we make the world look alive? Normal/update systems (we may add a couple of simple examples to show how those system _looks_, without focusing the attention to the specific parameters that are not introduced yet). Now let's see how some common system parameters work.
    - **Commands.** Why do they exist? Here we start writing our first system, where we spawn and build our first entity (the tedious, component-wise way).
    - **Component bundles.** Introduce bundles. Show how it's easier to build an entity now. This *may* be included in the same section of commands, since it's not too much content and they are often used in startup systems to spawn entities.
    - **Resource fetching.** While resources have already been introduced, here they are shown in the context of system parameters. Also resource insertion during app setup should be shown, since in the theoric section code examples are very minimal if not absent.
    - **Queries, filtering and component change detection.** Queries are often used in normal/update systems to make stuff happen. The current text for the section(s) is already good, maybe some tweaks for integration would be needed at max. As there is much content here, splitting it in two or three sections may be a good idea (as it's already done).
    - **Generic systems and exclusive world access.** These two sections are a bit like an appendix, since they are not as much needed as the above, but they may still be good to have anyway. Actually, generic systems are not a proper Bevy ECS feature, but maybe it could be beneficial to show some examples, I can't know for sure.

[This resource](https://www.youtube.com/watch?v=aKLntZcp27M) may be a good source of inspiration for the OOP vs ECS approaches to game development, if you didn't see it already.
<issue_comment>username_0: So https://github.com/bevyengine/bevy-website/pull/182/commits/4ed2ca5bcc7b8d17699f5cfcd7e84cd38ee3cbd1 adds a more involved example to the start of the chapter. There are two broad areas I want feedback on:

**1. Is it correct to include a high-level, minimal explanation example at this point in the book?**

My core argument here is ""everything is too interwoven: there is no single linear order that works for learning the ECS"". Components and entities are unusable without basic commands, but you can't get into how commands *actually* work without a huge amount of background. As I'd like to prioritize in-depth explanations of the details, to make the book more useful to convey subtleties and tricks, I want to keep e.g. ""commands 101"" and ""custom commands"" on the same page, even though the latter will not be useful until you're an advanced user.

By throwing an interwoven example in (and eventually, pointing the users to the quickstart guides) to supplement the high-level explanation, we can give the reader a vocabulary and basic gloss of the architecture used so they can follow along on their first read of the rest of the sub-chapters.

**2. How is this particular example? Should it be replaced by something else? Concrete suggestions are useful.**

I'm not thrilled with several things:
1. The player / enemy entity access pattern is not very pretty, although it *does* demonstrate the `query.get` API which is often seriously overlooked by newcomers.
2. The example won't compile until someone (probably me...) adds an API for https://github.com/bevyengine/bevy/issues/2276 and it's merged in. This can be solved with marker components in place of a side enum, but then you get conflicting queries and have to do the dumb `(With<Player>, Without<Enemy>>)` thing.
3. The complexity is a higher than I'd *really* prefer for a first real example. Some trickiness with run criteria, change detection, random access to component data, fancy match statements, system ordering...
4. We don't make use of the window created by `DefaultPlugins`. This could be solved by a better plugin set. I decided not to do input handling or graphics to manage complexity but it's not a very fun or impressive game at all. Maybe we can swallow the complexity here by swapping to a much simpler logic game?
<issue_comment>username_1: These are my thoughts on how it could be improved and what may look off:

1. I suggest changing system function names to include the `_system` suffix, as convention in the Bevy source code and previous documentation.
2. Declare resources and components earlier, before the main function. In this way, readers don't get confused too much when they read the main function. I think that systems can still come after `main` though.
3. The `Side` component needs a comment showing its role inside the game.
4. I think entity indexing through `CombatantEntities` can be avoided. We can still talk about `Query::{get, get_mut}` in the queries section. Query filtering based on `Side` should do the job.
5. I don't think introducing bundles here has a high benefit/cost ratio. Inserting components one by one is not too much tedious (it is actually shorter in this case), and we can still introduce bundles later. Actually the real power of bundles come from the struct update syntax, where it can significantly reduce the number of lines. But not here, where it just increase them instead.
6. `p_` and `e_` prefixes for ""player"" and ""enemy"" in `combat` makes everything a bit difficult to understand despite making things more compact.
7. `check_victory` system is not immediately understandable. At first sight it even seems that the character whose life goes to 0 wins.
8. The lack of a definitive game over condition looks a bit underwhelming. Despite the `if` statement in `combat`, systems continue to run, and `Victory::Concluded` can give a wrong value before settling to the correct one.

### Alternative example

I still think it is difficult to simplify the combat example under a non overwhelming level. Probably some useful `bevy_ecs` features are still not present or the domain is more complex than we thought (probably both are factors). So I propose a simpler example, that I prepared below, featuring a single entity and no resources. The problem domain is an entity falling by some sort of ""gravity"" towards y = 0, and receiving fall damage. I made two versions, where the simpler one may be around 100 LOC if we add more comments. If a resource is *really* needed, i thought about an achievement that gets unlocked if a fall doesn't kill the entity but it leaves it with 1 `Life` point or less.

<details>
<summary>More complex version</summary>

```rust
use bevy::app::AppExit;
use bevy::log::LogPlugin;
use bevy::prelude::*;

// This component defines our entity's life.
struct Life(f32);

// This component is used to mark if our entity is currently airborne.
struct Falling {
    // The higher the initial height of falling, the higher the damage.
    height: f32,
}

fn main() {
    App::new()
        .add_plugins(MinimalPlugins)
        .add_plugin(LogPlugin)
        .add_startup_system(spawn_player_system)
        .add_system_set(
            SystemSet::new()
                .label(""logic"")
                .with_system(gravity_system.label(""gravity""))
                .with_system(fall_damage_system.after(""gravity"")),
        )
        .add_system_set(
            SystemSet::new()
                .label(""report"")
                .after(""logic"")
                .with_system(report_life_system)
                .with_system(report_height_system),
        )
        .add_system(game_over_system.after(""report""))
        .run();
}

// This system spawns the player at a fairly high elevation.
fn spawn_player_system(mut commands: Commands) {
    const INITIAL_HEIGHT: f32 = 15.0;

    commands
        .spawn()
        .insert(Life(20.0))
        .insert(Transform::from_translation(Vec3::new(
            0.0,
            INITIAL_HEIGHT,
            0.0,
        )))
        .insert(Falling {
            height: INITIAL_HEIGHT,
        });
}

// This system pulls down the entity towards the ground (at y = 0), at a constant velocity,
// only while it's falling.
fn gravity_system(mut query: Query<&mut Transform, With<Falling>>) {
    // We use query.single since we are sure the query will match only one entity here.
    if let Ok(mut transform) = query.single_mut() {
        transform.translation.y = (transform.translation.y - 1.0).max(0.0);
    }
}

[Truncated]
    mut commands: Commands,
    mut query: Query<(Entity, &mut Life, &Falling, &mut Transform), With<Falling>>,
    mut exit: EventWriter<AppExit>,
) {
    if let Ok((entity, mut life, falling, mut transform)) = query.single_mut() {
        // Our entity has touched the ground
        if transform.translation.y <= 0.0 {
            transform.translation.y = 0.0;
            commands.entity(entity).remove::<Falling>();

            let damage = (falling.height - 3.0).max(0.0);
            life.0 = (life.0 - damage).max(0.0);
            info!(""Damage: {}"", damage);
            exit.send(AppExit);
        }
    }
}
```

</details>
<issue_comment>username_0: I agree with your assessment: the combat example is not feasible to adequately simplify.

I'm going to replace it with a lightly tweaked version of your simpler example. I'll expand on the comments, and added a second entity. `.single()` is a lovely API, but it's not representative of typical ECS code and should not be the first thing we introduce.
<issue_comment>username_4: There's a few inconsistencies with using .system(). The first example doesn't use .system() but most other examples after that use .system().
<issue_comment>username_0: Alright, this is ready for final review! I'd prefer to merge this in ASAP if possible, and then make further additions or corrections in separate PRS: the length of both this thread and the PR is already excessive.
<issue_comment>username_5: Small style note, if I run zola serve for the latest ecs book chapter pr the indentation looks to be double what it should be  http://127.0.0.1:1111/learn/book/ecs/queries/
<issue_comment>username_6: This looks to be a tabs vs spaces thing.
Places where spaces are, the indentation looks fine:
![image](https://user-images.githubusercontent.com/52899592/140491381-02730bfe-4fc3-482c-a188-4030ff2f77f4.png)

But where there are tabs:
![image](https://user-images.githubusercontent.com/52899592/140491419-2d99a427-4c42-49c9-8310-100cf4db4d3d.png)

This should fix it if you want:
https://github.com/username_0/bevy-website/pull/2
<issue_comment>username_0: Merged, thanks!
<issue_comment>username_7: Enabled the anchor links for the ECS section in https://github.com/username_0/bevy-website/pull/4.
<issue_comment>username_0: Closing this out in favor of the small, split PRs linked above. Working with all of the changes in a single PR is incredibly unwieldy as both an author and reviewer.
<issue_comment>username_8: Any plans to localize Bevy Book?
<issue_comment>username_0: @username_8 personally yes, but once it's significantly more stable. I don't think it makes sense until 1.0.
<issue_comment>username_9: Maybe https://github.com/bevyengine/bevy-website/issues/265 can be updated listing the PRs on the description?

```
- [ ] https://github.com/bevyengine/bevy-website/pull/290
- [ ] https://github.com/bevyengine/bevy-website/pull/291
- [ ] https://github.com/bevyengine/bevy-website/pull/292
- [ ] https://github.com/bevyengine/bevy-website/pull/293
- [ ] https://github.com/bevyengine/bevy-website/pull/294
- [ ] https://github.com/bevyengine/bevy-website/pull/295
- [ ] https://github.com/bevyengine/bevy-website/pull/296
- [ ] https://github.com/bevyengine/bevy-website/pull/297
```
<issue_comment>username_3: As an alternative, I'd advocate for setting up a project board instead of trying to use a tracking issue that needs to be manually kept in sync"
kyma-project/website,446517681,323,,"[{'action': 'opened', 'author': 'tomekpapiernik', 'comment_id': None, 'datetime': '2019-05-21 09:39:32+00:00', 'masked_author': 'username_0', 'text': ""<!-- Thank you for your contribution. Before you submit the issue:\r\n1. Search open and closed issues for duplicates.\r\n2. Read the contributing guidelines.\r\n-->\r\n\r\n**Description**\r\n\r\nCurrently, people who use the documentation on kyma-project.io, don't have any way to let us know if the docs help them and provided the information they were searching for or if they need to be improved. \r\n\r\nIf the website had a feedback system, the user could: \r\n- thumb up/down a document\r\n- leave a written note saying what is wrong and (hopefully) how to fix it; it'd be great to have a bot that would create appropriately labeled issues in GitHub when users leave such suggestions\r\n\r\nImplementing such a system would empower the community. Not everybody has time to chat on Slack. (@username_2 )\r\n\r\n**Reasons**\r\n\r\nThe only sources of documentation-centered feedback are people who work with the project on a daily basis. There is very little feedback from newcomers and people who are not familiar with Kyma. \r\n\r\n**Attachments**\r\n\r\nnone"", 'title': 'Implement feedback system', 'type': 'issue'}
 {'action': 'created', 'author': 'magicmatatjahu', 'comment_id': 495153538.0, 'datetime': '2019-05-23 10:01:40+00:00', 'masked_author': 'username_1', 'text': 'Related issue: https://github.com/kyma-project/website/issues/105', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'derberg', 'comment_id': 514137340.0, 'datetime': '2019-07-23 09:46:33+00:00', 'masked_author': 'username_2', 'text': 'thumbs up/down do not help much, but next to the edit button that we plan with https://github.com/kyma-project/website/issues/105 we could have a feedback button or something like that that would take user to github issues -> https://github.com/kyma-project/kyma/issues/new/choose\r\n\r\nwe could track the usage with google analytics, if we would see many people click the feedback button but then do not create issues, we could consider adding a dedicated feedback form that would then create a github issue with proper labels, etc', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'pbochynski', 'comment_id': 742388934.0, 'datetime': '2020-12-10 09:13:40+00:00', 'masked_author': 'username_3', 'text': 'I think we can live with github issues and slack for now. No plans to implement it in the near future.', 'title': None, 'type': 'comment'}
 {'action': 'closed', 'author': 'pbochynski', 'comment_id': None, 'datetime': '2020-12-10 09:13:41+00:00', 'masked_author': 'username_3', 'text': '', 'title': None, 'type': 'issue'}]","<issue_start><issue_comment>Title: Implement feedback system
username_0: <!-- Thank you for your contribution. Before you submit the issue:
1. Search open and closed issues for duplicates.
2. Read the contributing guidelines.
-->

**Description**

Currently, people who use the documentation on kyma-project.io, don't have any way to let us know if the docs help them and provided the information they were searching for or if they need to be improved. 

If the website had a feedback system, the user could: 
- thumb up/down a document
- leave a written note saying what is wrong and (hopefully) how to fix it; it'd be great to have a bot that would create appropriately labeled issues in GitHub when users leave such suggestions

Implementing such a system would empower the community. Not everybody has time to chat on Slack. (@username_2 )

**Reasons**

The only sources of documentation-centered feedback are people who work with the project on a daily basis. There is very little feedback from newcomers and people who are not familiar with Kyma. 

**Attachments**

none
<issue_comment>username_1: Related issue: https://github.com/kyma-project/website/issues/105
<issue_comment>username_2: thumbs up/down do not help much, but next to the edit button that we plan with https://github.com/kyma-project/website/issues/105 we could have a feedback button or something like that that would take user to github issues -> https://github.com/kyma-project/kyma/issues/new/choose

we could track the usage with google analytics, if we would see many people click the feedback button but then do not create issues, we could consider adding a dedicated feedback form that would then create a github issue with proper labels, etc
<issue_comment>username_3: I think we can live with github issues and slack for now. No plans to implement it in the near future.<issue_closed>"
transitive-bullshit/nextjs-notion-starter-kit,857734405,95,,"[{'action': 'opened', 'author': 'onemonet', 'comment_id': None, 'datetime': '2021-04-14 09:59:52+00:00', 'masked_author': 'username_0', 'text': 'Can search be added to the mobile phone?\r\nComputer search is extremely slow, and sometimes it can’t be found.\r\nThanks!', 'title': 'about questions search', 'type': 'issue'}
 {'action': 'created', 'author': 'transitive-bullshit', 'comment_id': 819693444.0, 'datetime': '2021-04-14 17:33:17+00:00', 'masked_author': 'username_1', 'text': ""Hey @username_0, we're using notion's built-in search to power our search.\r\n\r\nThis is a lot easier than having our own search index, but it's not always performant.\r\n\r\nIdeas to improve features like search are more than welcome :)"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'wz1616', 'comment_id': 832449310.0, 'datetime': '2021-05-05 06:37:18+00:00', 'masked_author': 'username_2', 'text': 'I have the problem too.\nPlease improve search', 'title': None, 'type': 'comment'}
 {'action': 'closed', 'author': 'transitive-bullshit', 'comment_id': None, 'datetime': '2022-03-26 08:32:45+00:00', 'masked_author': 'username_1', 'text': '', 'title': None, 'type': 'issue'}
 {'action': 'created', 'author': 'transitive-bullshit', 'comment_id': 1079640278.0, 'datetime': '2022-03-26 08:32:45+00:00', 'masked_author': 'username_1', 'text': ""Search has been fixed in the latest release.\r\n\r\nHopefully it won't be as brittle anymore."", 'title': None, 'type': 'comment'}]","<issue_start><issue_comment>Title: about questions search
username_0: Can search be added to the mobile phone?
Computer search is extremely slow, and sometimes it can’t be found.
Thanks!
<issue_comment>username_1: Hey @username_0, we're using notion's built-in search to power our search.

This is a lot easier than having our own search index, but it's not always performant.

Ideas to improve features like search are more than welcome :)
<issue_comment>username_2: I have the problem too.
Please improve search<issue_closed>
<issue_comment>username_1: Search has been fixed in the latest release.

Hopefully it won't be as brittle anymore."
getnikola/nikola,313180782,3017,,"[{'action': 'opened', 'author': 'jmcp', 'comment_id': None, 'datetime': '2018-04-11 05:42:56+00:00', 'masked_author': 'username_0', 'text': 'The gallery feature is very powerful, but is missing two features: the ability to caption individual images, and the ability to specify the order in which the images are displayed.\r\n\r\nI have a patch available which resolves these two issues.\r\n\r\nFor ordering, create a file in your gallery directory called IDX. List the image filenames (one per line) in the order that you want them displayed in the gallery.\r\n\r\nFor captions, create a file in your gallery directory called captions. In that file, list the image filenames (one per line), whitespace, and then the text you want to use for the caption. You can specify that an image has *no* caption by using the string `::empty::`. Using a caption file also implicitly enables the gallery ordering feature.', 'title': 'Support for captioned and ordered images in galleries', 'type': 'issue'}
 {'action': 'created', 'author': 'ralsina', 'comment_id': 380437768.0, 'datetime': '2018-04-11 12:42:13+00:00', 'masked_author': 'username_1', 'text': 'Sounds good. Could you open a PR?', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'jmcp', 'comment_id': 380699573.0, 'datetime': '2018-04-12 07:01:07+00:00', 'masked_author': 'username_0', 'text': ""After review from Chris, I've re-implented the PR (#3018) so that the feature looks for a YAML-formatted 'metadata.yml' in the gallery directory, which contains\r\n\r\nname:\r\ncaption:\r\norder:\r\n\r\n(only name is mandatory) for as many images as the user cares to provide information about. There is no need to use `::empty::` for an uncaptioned image."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'ralsina', 'comment_id': 383395958.0, 'datetime': '2018-04-22 16:57:44+00:00', 'masked_author': 'username_1', 'text': '@username_0 @username_2 so, this is done?', 'title': None, 'type': 'comment'}
 {'action': 'closed', 'author': 'Kwpolska', 'comment_id': None, 'datetime': '2018-04-22 16:58:19+00:00', 'masked_author': 'username_2', 'text': '', 'title': None, 'type': 'issue'}
 {'action': 'created', 'author': 'Kwpolska', 'comment_id': 383396005.0, 'datetime': '2018-04-22 16:58:19+00:00', 'masked_author': 'username_2', 'text': 'Yes, it is.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'ralsina', 'comment_id': 383396141.0, 'datetime': '2018-04-22 17:00:15+00:00', 'masked_author': 'username_1', 'text': 'Cool!', 'title': None, 'type': 'comment'}]","<issue_start><issue_comment>Title: Support for captioned and ordered images in galleries
username_0: The gallery feature is very powerful, but is missing two features: the ability to caption individual images, and the ability to specify the order in which the images are displayed.

I have a patch available which resolves these two issues.

For ordering, create a file in your gallery directory called IDX. List the image filenames (one per line) in the order that you want them displayed in the gallery.

For captions, create a file in your gallery directory called captions. In that file, list the image filenames (one per line), whitespace, and then the text you want to use for the caption. You can specify that an image has *no* caption by using the string `::empty::`. Using a caption file also implicitly enables the gallery ordering feature.
<issue_comment>username_1: Sounds good. Could you open a PR?
<issue_comment>username_0: After review from Chris, I've re-implented the PR (#3018) so that the feature looks for a YAML-formatted 'metadata.yml' in the gallery directory, which contains

name:
caption:
order:

(only name is mandatory) for as many images as the user cares to provide information about. There is no need to use `::empty::` for an uncaptioned image.
<issue_comment>username_1: @username_0 @username_2 so, this is done?<issue_closed>
<issue_comment>username_2: Yes, it is.
<issue_comment>username_1: Cool!"
devopsdays/devopsdays-web,204017682,1664,,"[{'action': 'opened', 'author': 'mattstratton', 'comment_id': None, 'datetime': '2017-01-30 14:00:08+00:00', 'masked_author': 'username_0', 'text': ""```\r\nBuild started\r\ngit clone -q --branch=dodAMS-2017-content-chgs https://github.com/devopsdays/devopsdays-web.git C:\\projects\\devopsdays-web\r\ngit checkout -qf 2081c53942d173e6198a0c8798697b190c31dd08\r\nRunning Install scripts\r\nchoco install hugo -y\r\nChocolatey v0.10.3\r\nInstalling the following packages:\r\nhugo\r\nBy installing you accept licenses for the packages.\r\nhugo v0.18.1 [Approved]\r\nhugo package files install completed. Performing other installation steps.\r\nDownloading hugo 64 bit\r\n  from 'https://github.com/spf13/hugo/releases/download/v0.18.1/hugo_0.18.1_Windows-64bit.zip'\r\nProgress: 100% - Completed download of C:\\Users\\appveyor\\AppData\\Local\\Temp\\1\\chocolatey\\hugo\\0.18.1\\hugo_0.18.1_Windows-64bit.zip (5.11 MB).\r\nDownload of hugo_0.18.1_Windows-64bit.zip (5.11 MB) completed.\r\nHashes match.\r\nExtracting C:\\Users\\appveyor\\AppData\\Local\\Temp\\1\\chocolatey\\hugo\\0.18.1\\hugo_0.18.1_Windows-64bit.zip to C:\\ProgramData\\chocolatey\\lib\\hugo\\tools...\r\nC:\\ProgramData\\chocolatey\\lib\\hugo\\tools\r\n ShimGen has successfully created a shim for hugo_0.18.1_windows_amd64.exe\r\n The install of hugo was successful.\r\n  Software installed to 'C:\\ProgramData\\chocolatey\\lib\\hugo\\tools'\r\nChocolatey installed 1/1 packages. 0 packages failed.\r\n See the log for details (C:\\ProgramData\\chocolatey\\logs\\chocolatey.log).\r\nhugo version\r\n'hugo' is not recognized as an internal or external command,\r\noperable program or batch file.\r\nCommand exited with code 1\r\n```"", 'title': 'Appveyor job throwing error on hugo command', 'type': 'issue'}
 {'action': 'created', 'author': 'mattstratton', 'comment_id': 276131189.0, 'datetime': '2017-01-30 17:38:24+00:00', 'masked_author': 'username_0', 'text': ""Until the chocolatey package is updated to rename the hugo executable, we will need to refer to it explicitly, which isn't good for versions."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'mattstratton', 'comment_id': 276135222.0, 'datetime': '2017-01-30 17:50:38+00:00', 'masked_author': 'username_0', 'text': ""Fixed in 3a819d0bcf5172ab11c75b9008664bd0d6e0edce\r\n\r\nI'm leaving this open until the [chocolatey package](https://chocolatey.org/packages/hugo) gets updated."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'chantisnake', 'comment_id': 276140504.0, 'datetime': '2017-01-30 18:04:24+00:00', 'masked_author': 'username_1', 'text': 'I am the maintainer of Hugo. I saw your message. I personally think the original renaming command is not secure (there will be error if there is more than one exe in the root.\r\n\r\nI will find a way soon.\r\n\r\nI also recommend you guys to find a way to adopt the long name.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'mattstratton', 'comment_id': 276142383.0, 'datetime': '2017-01-30 18:09:49+00:00', 'masked_author': 'username_0', 'text': ""@username_1 thanks! I worked around it by explicitly referring to the executable, but my concern is that when a new version of hugo is released, that name will change and chocolatey will dump a different exe in there.\r\n\r\nI suspect the safest thing is to call the specific version of the chocolatey package, something like this:\r\n\r\n`choco install hugo -y --version 0.8.1`\r\n\r\nBecause then I'll know the exact exe name, etc. Seem logical?"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'chantisnake', 'comment_id': 276146285.0, 'datetime': '2017-01-30 18:23:52+00:00', 'masked_author': 'username_1', 'text': 'I have checked the zip file.\r\n\r\nCan you try using PowerShell to find the executable for now?\r\n\r\n$hogoExe = get-command hugo*.exe', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'chantisnake', 'comment_id': 276797129.0, 'datetime': '2017-02-01 22:01:58+00:00', 'masked_author': 'username_1', 'text': 'this is fixed.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'bridgetkromhout', 'comment_id': 276805907.0, 'datetime': '2017-02-01 22:37:25+00:00', 'masked_author': 'username_2', 'text': ""I see an error: https://ci.appveyor.com/project/DevOpsDays/devopsdays-web/build/1.0.62\r\n```\r\nhugo_0.18.1_windows_amd64.exe version\r\n'hugo_0.18.1_windows_amd64.exe' is not recognized as an internal or external command,\r\noperable program or batch file.\r\nCommand exited with code 1\r\n```"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'mattstratton', 'comment_id': 276808674.0, 'datetime': '2017-02-01 22:48:56+00:00', 'masked_author': 'username_0', 'text': 'Yep. I have to fix the appveyor job now that the chocolatey package is updated.', 'title': None, 'type': 'comment'}
 {'action': 'closed', 'author': 'mattstratton', 'comment_id': None, 'datetime': '2017-02-16 01:29:32+00:00', 'masked_author': 'username_0', 'text': '', 'title': None, 'type': 'issue'}
 {'action': 'created', 'author': 'mattstratton', 'comment_id': 280200537.0, 'datetime': '2017-02-16 01:29:32+00:00', 'masked_author': 'username_0', 'text': 'This was actually fixed in 2acd5d3fa5b4a1231a9a56074a54c9312c65f05e', 'title': None, 'type': 'comment'}]","<issue_start><issue_comment>Title: Appveyor job throwing error on hugo command
username_0: ```
Build started
git clone -q --branch=dodAMS-2017-content-chgs https://github.com/devopsdays/devopsdays-web.git C:\projects\devopsdays-web
git checkout -qf 2081c53942d173e6198a0c8798697b190c31dd08
Running Install scripts
choco install hugo -y
Chocolatey v0.10.3
Installing the following packages:
hugo
By installing you accept licenses for the packages.
hugo v0.18.1 [Approved]
hugo package files install completed. Performing other installation steps.
Downloading hugo 64 bit
  from 'https://github.com/spf13/hugo/releases/download/v0.18.1/hugo_0.18.1_Windows-64bit.zip'
Progress: 100% - Completed download of C:\Users\appveyor\AppData\Local\Temp\1\chocolatey\hugo\0.18.1\hugo_0.18.1_Windows-64bit.zip (5.11 MB).
Download of hugo_0.18.1_Windows-64bit.zip (5.11 MB) completed.
Hashes match.
Extracting C:\Users\appveyor\AppData\Local\Temp\1\chocolatey\hugo\0.18.1\hugo_0.18.1_Windows-64bit.zip to C:\ProgramData\chocolatey\lib\hugo\tools...
C:\ProgramData\chocolatey\lib\hugo\tools
 ShimGen has successfully created a shim for hugo_0.18.1_windows_amd64.exe
 The install of hugo was successful.
  Software installed to 'C:\ProgramData\chocolatey\lib\hugo\tools'
Chocolatey installed 1/1 packages. 0 packages failed.
 See the log for details (C:\ProgramData\chocolatey\logs\chocolatey.log).
hugo version
'hugo' is not recognized as an internal or external command,
operable program or batch file.
Command exited with code 1
```
<issue_comment>username_0: Until the chocolatey package is updated to rename the hugo executable, we will need to refer to it explicitly, which isn't good for versions.
<issue_comment>username_0: Fixed in 3a819d0bcf5172ab11c75b9008664bd0d6e0edce

I'm leaving this open until the [chocolatey package](https://chocolatey.org/packages/hugo) gets updated.
<issue_comment>username_1: I am the maintainer of Hugo. I saw your message. I personally think the original renaming command is not secure (there will be error if there is more than one exe in the root.

I will find a way soon.

I also recommend you guys to find a way to adopt the long name.
<issue_comment>username_0: @username_1 thanks! I worked around it by explicitly referring to the executable, but my concern is that when a new version of hugo is released, that name will change and chocolatey will dump a different exe in there.

I suspect the safest thing is to call the specific version of the chocolatey package, something like this:

`choco install hugo -y --version 0.8.1`

Because then I'll know the exact exe name, etc. Seem logical?
<issue_comment>username_1: I have checked the zip file.

Can you try using PowerShell to find the executable for now?

$hogoExe = get-command hugo*.exe
<issue_comment>username_1: this is fixed.
<issue_comment>username_2: I see an error: https://ci.appveyor.com/project/DevOpsDays/devopsdays-web/build/1.0.62
```
hugo_0.18.1_windows_amd64.exe version
'hugo_0.18.1_windows_amd64.exe' is not recognized as an internal or external command,
operable program or batch file.
Command exited with code 1
```
<issue_comment>username_0: Yep. I have to fix the appveyor job now that the chocolatey package is updated.<issue_closed>
<issue_comment>username_0: This was actually fixed in 2acd5d3fa5b4a1231a9a56074a54c9312c65f05e"
newrelic/docs-website,982265278,3704,"{'number': 3704.0, 'repo': 'docs-website', 'user_login': 'newrelic'}","[{'action': 'opened', 'author': 'djaffinito', 'comment_id': None, 'datetime': '2021-08-30T00:58:56Z', 'masked_author': 'username_0', 'text': ""Fixed the powershell script to restore all of the registry values needed\r\n\r\n<!-- Thanks for contributing to our docs! -->\r\n\r\n<!-- For Japanese readers: \r\nもしドキュメントの日本語訳で問題を見つけた場合はPRではなくissueを提出してください。\r\n日本語訳へのPRについてはまだ取り込む準備ができていません。-->\r\n\r\n### Give us some context\r\n\r\n* What problems does this PR solve?\r\n\r\nThe current powershell script doesn't restore the registry values needed for .NET Core.\r\n\r\n* Add any context that will help us review your changes such as testing notes,\r\n  links to related docs, screenshots, etc.\r\n* If your issue relates to an existing GitHub issue, please link to it.\r\n\r\n### Are you making a change to site code?\r\n\r\nIf you're changing site code (rather than the content of a doc), please follow\r\n[conventional commit standards](https://www.conventionalcommits.org/en/v1.0.0/)\r\nin your commit messages and pull request title."", 'title': 'Update resolve-net-scom-conflicts.mdx', 'type': 'issue'}]","<issue_start><issue_comment>Title: Update resolve-net-scom-conflicts.mdx
username_0: Fixed the powershell script to restore all of the registry values needed

<!-- Thanks for contributing to our docs! -->

<!-- For Japanese readers: 
もしドキュメントの日本語訳で問題を見つけた場合はPRではなくissueを提出してください。
日本語訳へのPRについてはまだ取り込む準備ができていません。-->

### Give us some context

* What problems does this PR solve?

The current powershell script doesn't restore the registry values needed for .NET Core.

* Add any context that will help us review your changes such as testing notes,
  links to related docs, screenshots, etc.
* If your issue relates to an existing GitHub issue, please link to it.

### Are you making a change to site code?

If you're changing site code (rather than the content of a doc), please follow
[conventional commit standards](https://www.conventionalcommits.org/en/v1.0.0/)
in your commit messages and pull request title."
stevenschobert/instafeed.js,716047631,702,,"[{'action': 'opened', 'author': 'dayneh88', 'comment_id': None, 'datetime': '2020-10-06 21:55:16+00:00', 'masked_author': 'username_0', 'text': 'Hi,\r\n\r\nIs anybody all of a sudden getting a similar error message on all of their feeds:\r\n\r\n**Error: api request error: 190 Error validating access token: Session has expired on Wednesday, 30-Sep-20 16:51:54 PDT.**\r\n\r\nWe are using Version 2 RC2 and it was all working fine before.\r\n\r\nThanks,\r\nDayne', 'title': 'Getting error message on all feeds: site-min.js?ver=5.5.1:4 Error: api request error: 190 Error validating access token: Session has expired on Wednesday, 30-Sep-20 16:51:54 PDT.', 'type': 'issue'}
 {'action': 'created', 'author': 'Jeemusu', 'comment_id': 704651732.0, 'datetime': '2020-10-07 02:17:45+00:00', 'masked_author': 'username_1', 'text': 'I wonder if there has been some change to the instagram API as all the tokens I have issued today or that have renewed themselves in the last few days are returning ""Uncaught Error: Error from Instagram: The access_token provided is invalid."" errors from instafeed. instant-tokens.com also seems to be having problems issuing me new tokens. I have checked all the tokens in the facebook token debugger, but they seems fine.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'vulkanus', 'comment_id': 706612821.0, 'datetime': '2020-10-10 21:17:58+00:00', 'masked_author': 'username_2', 'text': 'Hi,\r\n\r\nI´m not sure, but I think if you don´t have the API in live mode, that will happened, I think I was have an similar issue.\r\nWhat I done was regenerate new token, in my developed API.\r\n\r\nbut you can check it out here: https://developers.facebook.com/blog/post/2011/05/13/how-to--handle-expired-access-tokens/\r\n\r\nsorry if I was not correct', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'stevenschobert', 'comment_id': 725832536.0, 'datetime': '2020-11-12 04:41:27+00:00', 'masked_author': 'username_3', 'text': 'Hey @username_0! In the new Instagram Basic Display API, which powers v2 of Instafeed.js, access tokens do have a limited lifespan (60 days).\r\n\r\nThis means that with v2, you need some mechanism to refresh the access tokens routinely, to keep Instafeed.js working. I\'m still working on documenting some of the details, but you can find a couple of potential solutions in the [WIP ""Managing Access Tokens"" document](https://github.com/username_3/instafeed.js/blob/bc3c109abe088a322b97eb530d5613c1a1642a2d/docs/managing-access-tokens.md).', 'title': None, 'type': 'comment'}]","<issue_start><issue_comment>Title: Getting error message on all feeds: site-min.js?ver=5.5.1:4 Error: api request error: 190 Error validating access token: Session has expired on Wednesday, 30-Sep-20 16:51:54 PDT.
username_0: Hi,

Is anybody all of a sudden getting a similar error message on all of their feeds:

**Error: api request error: 190 Error validating access token: Session has expired on Wednesday, 30-Sep-20 16:51:54 PDT.**

We are using Version 2 RC2 and it was all working fine before.

Thanks,
Dayne
<issue_comment>username_1: I wonder if there has been some change to the instagram API as all the tokens I have issued today or that have renewed themselves in the last few days are returning ""Uncaught Error: Error from Instagram: The access_token provided is invalid."" errors from instafeed. instant-tokens.com also seems to be having problems issuing me new tokens. I have checked all the tokens in the facebook token debugger, but they seems fine.
<issue_comment>username_2: Hi,

I´m not sure, but I think if you don´t have the API in live mode, that will happened, I think I was have an similar issue.
What I done was regenerate new token, in my developed API.

but you can check it out here: https://developers.facebook.com/blog/post/2011/05/13/how-to--handle-expired-access-tokens/

sorry if I was not correct
<issue_comment>username_3: Hey @username_0! In the new Instagram Basic Display API, which powers v2 of Instafeed.js, access tokens do have a limited lifespan (60 days).

This means that with v2, you need some mechanism to refresh the access tokens routinely, to keep Instafeed.js working. I'm still working on documenting some of the details, but you can find a couple of potential solutions in the [WIP ""Managing Access Tokens"" document](https://github.com/username_3/instafeed.js/blob/bc3c109abe088a322b97eb530d5613c1a1642a2d/docs/managing-access-tokens.md)."
