flutter/website,562062608,3679,,"[{'action': 'opened', 'author': 'petermichaux', 'comment_id': None, 'datetime': '2020-02-08 18:58:15+00:00', 'masked_author': 'username_0', 'text': 'The cookbook has the recipe [Fetch data from the internet](https://flutter.dev/docs/cookbook/networking/fetch-data). Recipes also showing how to POST/PUT/DELETE data to the internet would be good to make a complete set of recipes for all four of the fundamental CRUD operations using `FutureBuilder`.\r\n\r\nFor example, the main point in the POST and PUT recipes would be to show that the future would be `null` to begin with. When the future is `null`, the widget will show the button. When a user presses the save button, then `setState` to change the future to non-`null`. When the future is non-`null` then the UI will show spinner, error message, or something indicating success. Anyway, it would be a very helpful companion to the ""Fetch data from the internet"" recipe.\r\n\r\nWith DELETE, there is an issue with what the future will return. It can\'t return `null` for success as then `snapshot.hasData` becomes complicated. It could return boolean value `true`.\r\n\r\nMaking this all easy for someone new would help get them up to speed with Flutter with less rethinking about things others have already had to think through.\r\n\r\nPerhaps changing the name of the existing recipe to ""Read data from the internet"" would help naming the three new recipes.', 'title': 'Cookbook recipes: POST/PUT/DELETE data to the internet.', 'type': 'issue'}
 {'action': 'created', 'author': 'sfshaza2', 'comment_id': 584198704.0, 'datetime': '2020-02-10 16:08:04+00:00', 'masked_author': 'username_1', 'text': 'Good idea.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'petermichaux', 'comment_id': 584257511.0, 'datetime': '2020-02-10 18:13:14+00:00', 'masked_author': 'username_0', 'text': '@username_1 are pull requests welcome?', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'sfshaza2', 'comment_id': 584318764.0, 'datetime': '2020-02-10 19:51:15+00:00', 'masked_author': 'username_1', 'text': ""You betcha!!! We don't always suggest it, but they are always welcome."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'petermichaux', 'comment_id': 584401335.0, 'datetime': '2020-02-10 23:03:43+00:00', 'masked_author': 'username_0', 'text': 'HTTP/2 200 \r\ndate: Mon, 10 Feb 2020 22:55:38 GMT\r\ncontent-type: application/json; charset=utf-8\r\ncontent-length: 41\r\nset-cookie: __cfduid=db769ca955f447cc90b485e86f39fc2981581375338; expires=Wed, 11-Mar-20 22:55:38 GMT; path=/; domain=.typicode.com; HttpOnly; SameSite=Lax\r\nx-powered-by: Express\r\nvary: Origin, Accept-Encoding\r\naccess-control-allow-credentials: true\r\ncache-control: no-cache\r\npragma: no-cache\r\nexpires: -1\r\nx-content-type-options: nosniff\r\netag: W/""29-ntvTOAUv21D/iEA6e5jBnEjOPXo""\r\nvia: 1.1 vegur\r\ncf-cache-status: DYNAMIC\r\nexpect-ct: max-age=604800, report-uri=""https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct""\r\nserver: cloudflare\r\ncf-ray: 5631abf69ab13adc-YVR\r\n\r\n{\r\n  ""id"": 1,\r\n  ""title"": ""Updated title""\r\n}\r\n```\r\n\r\nDelete/DELETE a resource.\r\n\r\n```\r\n$ curl -i -X DELETE https://jsonplaceholder.typicode.com/posts/1\r\nHTTP/2 200 \r\ndate: Mon, 10 Feb 2020 22:59:55 GMT\r\ncontent-type: application/json; charset=utf-8\r\ncontent-length: 2\r\nset-cookie: __cfduid=dea190c88efc87b2c7c8d2947b52ed8621581375595; expires=Wed, 11-Mar-20 22:59:55 GMT; path=/; domain=.typicode.com; HttpOnly; SameSite=Lax\r\nx-powered-by: Express\r\nvary: Origin, Accept-Encoding\r\naccess-control-allow-credentials: true\r\ncache-control: no-cache\r\npragma: no-cache\r\nexpires: -1\r\nx-content-type-options: nosniff\r\netag: W/""2-vyGp6PvFo4RvsFtPoIWeCReyIC8""\r\nvia: 1.1 vegur\r\ncf-cache-status: DYNAMIC\r\nexpect-ct: max-age=604800, report-uri=""https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct""\r\nserver: cloudflare\r\ncf-ray: 5631b23f6ffbf4a6-YVR\r\n\r\n{}\r\n```', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'tedhenry100', 'comment_id': 586011078.0, 'datetime': '2020-02-13 22:50:39+00:00', 'masked_author': 'username_2', 'text': ""Here is a top Google search result that shows the confusion.\r\n\r\nhttps://stackoverflow.com/questions/50014848/network-request-after-button-click-with-flutter\r\n\r\nThe original post is trying to find a way to related POST with the cookbook's GET example.\r\n\r\nThe person who answered gives a poor answer that might call setState after dispose. This could happen if the back button is pressed before the POST request completes."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'petermichaux', 'comment_id': 586100505.0, 'datetime': '2020-02-14 05:08:12+00:00', 'masked_author': 'username_0', 'text': ""The following POST example app attempts to remain in the spirit of the GET recipe that is already in the cookbook. By that, I mean it uses `FutureBuilder` and avoids getting into more complex state management architecture like Provider, Bloc, etc.\r\n\r\nThe user of `_futureAlbum` being set to `null` or not is the key feature in this example code that I wanted to propose for the cookbook article on POST. I'm open to discussion.\r\n\r\nThe use of a list to show all the created albums makes me think that the GET recipe could get the list of albums rather than just a single album. That way the POST, PUT, and DELETE recipes could each be extensions to the previous recipe.\r\n\r\n```dart\r\nimport 'dart:async';\r\nimport 'dart:convert';\r\nimport 'package:flutter/material.dart';\r\nimport 'package:http/http.dart' as http;\r\n\r\nFuture<Album> createAlbum(final String title) async {\r\n  final http.Response response = await http.post(\r\n    'https://jsonplaceholder.typicode.com/albums',\r\n    headers: <String, String>{\r\n      'Content-Type': 'application/json; charset=UTF-8',\r\n    },\r\n    body: jsonEncode(<String, String>{\r\n      'title': title,\r\n    }),\r\n  );\r\n\r\n  if (response.statusCode == 201) {\r\n    return Album.fromJson(json.decode(response.body));\r\n  } else {\r\n    throw Exception('Failed to create album.');\r\n  }\r\n}\r\n\r\nclass Album {\r\n  final int id;\r\n  final String title;\r\n\r\n  Album({this.id, this.title});\r\n\r\n  factory Album.fromJson(Map<String, dynamic> json) {\r\n    return Album(\r\n      id: json['id'],\r\n      title: json['title'],\r\n    );\r\n  }\r\n}\r\n\r\nvoid main() {\r\n  runApp(MyApp());\r\n}\r\n\r\nclass MyApp extends StatefulWidget {\r\n  MyApp({Key key}) : super(key: key);\r\n\r\n  @override\r\n  _MyAppState createState() {\r\n    return _MyAppState();\r\n  }\r\n}\r\n\r\nclass _MyAppState extends State<MyApp> {\r\n  final List<Album> _albums = <Album>[];\r\n  Future<Album> _futureAlbum;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return MaterialApp(\r\n      title: 'Create Data Example',\r\n      theme: ThemeData(\r\n        primarySwatch: Colors.blue,\r\n      ),\r\n      home: Scaffold(\r\n        appBar: AppBar(\r\n          title: Text('Create Data Example'),\r\n        ),\r\n        body: Column(\r\n          children: <Widget>[\r\n            Center(\r\n              child: (this._futureAlbum == null)\r\n                  ? RaisedButton(\r\n                      child: Text('Create Data'),\r\n                      onPressed: () {\r\n                        this.setState(() {\r\n[Truncated]\n                      },\r\n                    ),\r\n            ),\r\n            Expanded(\r\n              child: ListView.builder(\r\n                itemCount: this._albums.length,\r\n                itemBuilder: (final BuildContext context, final int index) {\r\n                  return ListTile(\r\n                    title: Text(this._albums[index].title),\r\n                  );\r\n                },\r\n              ),\r\n            ),\r\n          ],\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n```"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'petermichaux', 'comment_id': 586662837.0, 'datetime': '2020-02-16 02:52:46+00:00', 'masked_author': 'username_0', 'text': '@username_1 Can you review and merge @hemanthrajv recipe for `POST` requests?\r\n\r\nWe expect that both `PUT` and `DELETE` recipes will be quite similar to the `POST` recipe so having the `POST` recipe merged is a good sign that continuing is worthwhile.\r\n\r\nThanks.', 'title': None, 'type': 'comment'}
 {'action': 'closed', 'author': 'sfshaza2', 'comment_id': None, 'datetime': '2020-03-09 17:29:30+00:00', 'masked_author': 'username_1', 'text': '', 'title': None, 'type': 'issue'}]","<issue_start><issue_comment>Title: Cookbook recipes: POST/PUT/DELETE data to the internet.
username_0: The cookbook has the recipe [Fetch data from the internet](https://flutter.dev/docs/cookbook/networking/fetch-data). Recipes also showing how to POST/PUT/DELETE data to the internet would be good to make a complete set of recipes for all four of the fundamental CRUD operations using `FutureBuilder`.

For example, the main point in the POST and PUT recipes would be to show that the future would be `null` to begin with. When the future is `null`, the widget will show the button. When a user presses the save button, then `setState` to change the future to non-`null`. When the future is non-`null` then the UI will show spinner, error message, or something indicating success. Anyway, it would be a very helpful companion to the ""Fetch data from the internet"" recipe.

With DELETE, there is an issue with what the future will return. It can't return `null` for success as then `snapshot.hasData` becomes complicated. It could return boolean value `true`.

Making this all easy for someone new would help get them up to speed with Flutter with less rethinking about things others have already had to think through.

Perhaps changing the name of the existing recipe to ""Read data from the internet"" would help naming the three new recipes.
<issue_comment>username_1: Good idea.
<issue_comment>username_0: @username_1 are pull requests welcome?
<issue_comment>username_1: You betcha!!! We don't always suggest it, but they are always welcome.
<issue_comment>username_0: HTTP/2 200 
date: Mon, 10 Feb 2020 22:55:38 GMT
content-type: application/json; charset=utf-8
content-length: 41
set-cookie: __cfduid=db769ca955f447cc90b485e86f39fc2981581375338; expires=Wed, 11-Mar-20 22:55:38 GMT; path=/; domain=.typicode.com; HttpOnly; SameSite=Lax
x-powered-by: Express
vary: Origin, Accept-Encoding
access-control-allow-credentials: true
cache-control: no-cache
pragma: no-cache
expires: -1
x-content-type-options: nosniff
etag: W/""29-ntvTOAUv21D/iEA6e5jBnEjOPXo""
via: 1.1 vegur
cf-cache-status: DYNAMIC
expect-ct: max-age=604800, report-uri=""https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct""
server: cloudflare
cf-ray: 5631abf69ab13adc-YVR

{
  ""id"": 1,
  ""title"": ""Updated title""
}
```

Delete/DELETE a resource.

```
$ curl -i -X DELETE https://jsonplaceholder.typicode.com/posts/1
HTTP/2 200 
date: Mon, 10 Feb 2020 22:59:55 GMT
content-type: application/json; charset=utf-8
content-length: 2
set-cookie: __cfduid=dea190c88efc87b2c7c8d2947b52ed8621581375595; expires=Wed, 11-Mar-20 22:59:55 GMT; path=/; domain=.typicode.com; HttpOnly; SameSite=Lax
x-powered-by: Express
vary: Origin, Accept-Encoding
access-control-allow-credentials: true
cache-control: no-cache
pragma: no-cache
expires: -1
x-content-type-options: nosniff
etag: W/""2-vyGp6PvFo4RvsFtPoIWeCReyIC8""
via: 1.1 vegur
cf-cache-status: DYNAMIC
expect-ct: max-age=604800, report-uri=""https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct""
server: cloudflare
cf-ray: 5631b23f6ffbf4a6-YVR

{}
```
<issue_comment>username_2: Here is a top Google search result that shows the confusion.

https://stackoverflow.com/questions/50014848/network-request-after-button-click-with-flutter

The original post is trying to find a way to related POST with the cookbook's GET example.

The person who answered gives a poor answer that might call setState after dispose. This could happen if the back button is pressed before the POST request completes.
<issue_comment>username_0: The following POST example app attempts to remain in the spirit of the GET recipe that is already in the cookbook. By that, I mean it uses `FutureBuilder` and avoids getting into more complex state management architecture like Provider, Bloc, etc.

The user of `_futureAlbum` being set to `null` or not is the key feature in this example code that I wanted to propose for the cookbook article on POST. I'm open to discussion.

The use of a list to show all the created albums makes me think that the GET recipe could get the list of albums rather than just a single album. That way the POST, PUT, and DELETE recipes could each be extensions to the previous recipe.

```dart
import 'dart:async';
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

Future<Album> createAlbum(final String title) async {
  final http.Response response = await http.post(
    'https://jsonplaceholder.typicode.com/albums',
    headers: <String, String>{
      'Content-Type': 'application/json; charset=UTF-8',
    },
    body: jsonEncode(<String, String>{
      'title': title,
    }),
  );

  if (response.statusCode == 201) {
    return Album.fromJson(json.decode(response.body));
  } else {
    throw Exception('Failed to create album.');
  }
}

class Album {
  final int id;
  final String title;

  Album({this.id, this.title});

  factory Album.fromJson(Map<String, dynamic> json) {
    return Album(
      id: json['id'],
      title: json['title'],
    );
  }
}

void main() {
  runApp(MyApp());
}

class MyApp extends StatefulWidget {
  MyApp({Key key}) : super(key: key);

  @override
  _MyAppState createState() {
    return _MyAppState();
  }
}

class _MyAppState extends State<MyApp> {
  final List<Album> _albums = <Album>[];
  Future<Album> _futureAlbum;

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Create Data Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: Scaffold(
        appBar: AppBar(
          title: Text('Create Data Example'),
        ),
        body: Column(
          children: <Widget>[
            Center(
              child: (this._futureAlbum == null)
                  ? RaisedButton(
                      child: Text('Create Data'),
                      onPressed: () {
                        this.setState(() {
[Truncated]
                      },
                    ),
            ),
            Expanded(
              child: ListView.builder(
                itemCount: this._albums.length,
                itemBuilder: (final BuildContext context, final int index) {
                  return ListTile(
                    title: Text(this._albums[index].title),
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }
}
```
<issue_comment>username_0: @username_1 Can you review and merge @hemanthrajv recipe for `POST` requests?

We expect that both `PUT` and `DELETE` recipes will be quite similar to the `POST` recipe so having the `POST` recipe merged is a good sign that continuing is worthwhile.

Thanks.<issue_closed>"
facebook/docusaurus,860291470,4638,,"[{'action': 'opened', 'author': 'duanwilliam', 'comment_id': None, 'datetime': '2021-04-17 01:17:56+00:00', 'masked_author': 'username_0', 'text': ""## 🐛 Bug Report\r\n\r\nUsing a `type: autogenerated` with dirName not `.` results in category metadata not being parsed.\r\n\r\nThe bug does _not_ appear when no sidebar file is specified, nor when `dirName` is set to `.`\r\n\r\n### Have you read the [Contributing Guidelines on issues](https://github.com/facebook/docusaurus/blob/master/CONTRIBUTING.md#reporting-new-issues)?\r\n\r\nyes\r\n\r\n## To Reproduce\r\n\r\nhttps://codesandbox.io/s/keen-wozniak-cpdp0?file=/docs/tutorial/extras/_category_.yml\r\n\r\n1. Create a new Docusaurus site / CodeSandbox demo\r\n2. Add a subfolder to the `docs` directory\r\n3. add some categories to the subfolder\r\n4. add metadata to `_category_.yml` (json didn't work either)\r\n5. modify `sidebars.js` to contain a sidebar with the item `{type: 'autogenerated', dirName: '[subfolder name]'}`\r\n\r\n## Expected behavior\r\n\r\nSidebar categories have their metadata parsed\r\n\r\n## Actual Behavior\r\n\r\nCategory metadata isn't parsed.\r\n\r\nhttps://codesandbox.io/s/keen-wozniak-cpdp0?file=/docs/tutorial/extras/_category_.yml\r\n\r\nExpected:\r\n![image](https://user-images.githubusercontent.com/38791932/115097499-78696200-9edf-11eb-85ae-303e19ed5976.png)\r\n\r\nActual:\r\n![image](https://user-images.githubusercontent.com/38791932/115097605-0ba29780-9ee0-11eb-9a07-a4cd13313723.png)\r\n\r\n## Your Environment\r\n\r\n- CodeSandbox demo: https://codesandbox.io/s/keen-wozniak-cpdp0?file=/docs/tutorial/extras/_category_.yml\r\n- Docusaurus version used: 2.0.0-alpha.73\r\n## Reproducible Demo\r\n\r\nhttps://codesandbox.io/s/keen-wozniak-cpdp0?file=/docs/tutorial/extras/_category_.yml\r\n\r\nsteps made to create:\r\n\r\n```bash\r\nmkdir docs/tutorial\r\nmv -r docs/tutorial-basics docs/tutorial/basics\r\nmv -r docs/tutorial-extras docs/tutorial/extras\r\n```\r\n\r\n- renamed `_category_.json` in `docs/tutorial/extras` to `_category_.yml` and updated to yaml syntax; sidebar position also changed, so it _should_ be above `basics`.\r\n- in `sidebars.js`, changed `dirName` from `.` to `tutorial`\r\n- link in `src/pages/index.js:19` changed to `/docs/tutorial/basics/create-a-page` for ease of access."", 'title': 'Autogenerated sidebars fail to work when dirname is subdirectory', 'type': 'issue'}
 {'action': 'created', 'author': 'geekodour', 'comment_id': 821965660.0, 'datetime': '2021-04-18 09:54:25+00:00', 'masked_author': 'username_1', 'text': 'Just tried this locally, it seems the `position` is also not taken up it seems so that leaves the ordering of items in the sidebar to be manually arranged by updating filenames.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'slorber', 'comment_id': 822250041.0, 'datetime': '2021-04-19 07:44:17+00:00', 'masked_author': 'username_2', 'text': 'Hey, I think there\'s a misconception on how this feature is supposed to work.\r\n\r\nWhen you use `dirName: ""tutorials""`, it won\'t read the category metadata file at all not create a category for the tutorials folder\r\n\r\nIt will just read the docs of that subfolder and also the sub-subfolders. If you want a category, you have to add it explicitly to the sidebar.\r\n\r\nThe reason for this is that this allows to create a single category that can source multiple autogenerated directories, and generate a flat list of sidebar items.\r\n\r\nHere is the init template where we want a 100% flat structure. It will work and no category at all will be created (on purpose):\r\n\r\n```js\r\nmodule.exports = {\r\n  tutorialSidebar: [\r\n    ""intro"",\r\n    { type: ""autogenerated"", dirName: ""tutorial-basics"" },\r\n    { type: ""autogenerated"", dirName: ""tutorial-extras"" },\r\n  ],\r\n};\r\n```\r\n\r\n\r\nNow what you are looking for is probably something like this:\r\n\r\n```js\r\nmodule.exports = {\r\n  tutorialSidebar: [\r\n    ""intro"",\r\n    {\r\n      type: ""category"",\r\n      label: ""Tutorial - Basics"",\r\n      items: [{ type: ""autogenerated"", dirName: ""tutorial-basics"" }],\r\n    },\r\n    {\r\n      type: ""category"",\r\n      label: ""Tutorial - Extras"",\r\n      items: [{ type: ""autogenerated"", dirName: ""tutorial-extras"" }],\r\n    },\r\n  ],\r\n};\r\n```\r\n\r\nYou can also mix and match so that basic tutorials are flat and extra tutorials are nested:\r\n\r\nhttps://codesandbox.io/s/elated-heisenberg-6tu9g?file=/sidebars.js:0-261\r\n\r\n```js\r\nmodule.exports = {\r\n  tutorialSidebar: [\r\n    ""intro"",\r\n    { type: ""autogenerated"", dirName: ""tutorial-basics"" },\r\n    {\r\n      type: ""category"",\r\n      label: ""Tutorial - Extras"",\r\n      items: [{ type: ""autogenerated"", dirName: ""tutorial-extras"" }],\r\n    },\r\n  ],\r\n}; \r\n```\r\n\r\n---\r\n\r\nI think it\'s powerful to be able to source multiple distinct folders and ""concat"" the docs of those folders under a single list.\r\n\r\nDoes it make sense?\r\n\r\nHow can we document this better?\r\n\r\nShould we create an option so that a category is created for the target auto-gen dir by default?', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'duanwilliam', 'comment_id': 822674453.0, 'datetime': '2021-04-19 18:16:22+00:00', 'masked_author': 'username_0', 'text': ""I think the issue's more of that the autogenerated sidebar items _do_ recognize and create subcategories, except these _subcategories_ do not have metadata recognized unless `dirName='.'`. \r\n\r\ni.e. if I have a docs directory structure of \r\n```\r\ndocs\r\n└── tutorials\r\n    ├── basics\r\n    │   ├── _category_.yml\r\n    │   └── index.md\r\n    └── extras\r\n        ├── _category_.yml\r\n        └── index.md\r\n```\r\nwhere the category metadata defines\r\n```yml\r\n# basics/_category_.yml\r\nlabel: 'Tutorial - Basics'\r\nposition: 2\r\n\r\n# extras_category.yml\r\nlabel: 'Tutorial - Extras'\r\nposition: 1\r\n```\r\n, an autogenerated sidebar item with `dirName: '.'` gives a sidebar with the structure\r\n```\r\ntutorials\r\n├── Tutorial - Extras\r\n│   └── index.md\r\n└── Tutorial - Basics\r\n    └── index.md\r\n```\r\nIf I don't want a wrapper `tutorials` category in my sidebar, I would expect `dirName: 'tutorials'` to yield a sidebar with the structure\r\n```\r\nTutorial - Extras\r\n└── index.md\r\nTutorial - Basics\r\n└── index.md\r\n```\r\nwhereas currently it yields\r\n```\r\nbasics\r\n└── index.md\r\nextras\r\n└── index.md\r\n```"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'slorber', 'comment_id': 823344321.0, 'datetime': '2021-04-20 14:58:30+00:00', 'masked_author': 'username_2', 'text': '@username_0  agree, something does not work as intended and Docusaurus fails to read the metadatas of subcategories of the autogenerated source dir. Will fix this.', 'title': None, 'type': 'comment'}
 {'action': 'closed', 'author': 'slorber', 'comment_id': None, 'datetime': '2021-04-20 16:16:52+00:00', 'masked_author': 'username_2', 'text': '', 'title': None, 'type': 'issue'}
 {'action': 'created', 'author': 'geekodour', 'comment_id': 826200132.0, 'datetime': '2021-04-25 01:49:59+00:00', 'masked_author': 'username_1', 'text': 'Thanks @username_2 ! is it possible to use this directly from `master` now? sorry my npm foo is a bit weak :(', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'slorber', 'comment_id': 827017197.0, 'datetime': '2021-04-26 17:27:52+00:00', 'masked_author': 'username_2', 'text': '@username_1 you can use the canary release to get the code from master before we release it:\r\n\r\nhttps://www.npmjs.com/package/@docusaurus/core\r\n\r\n![image](https://user-images.githubusercontent.com/749374/116125196-7a90a500-a6c5-11eb-921f-e8b59b87c510.png)', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'slorber', 'comment_id': 827638222.0, 'datetime': '2021-04-27 14:11:38+00:00', 'masked_author': 'username_2', 'text': 'released in alpha 74', 'title': None, 'type': 'comment'}]","<issue_start><issue_comment>Title: Autogenerated sidebars fail to work when dirname is subdirectory
username_0: ## 🐛 Bug Report

Using a `type: autogenerated` with dirName not `.` results in category metadata not being parsed.

The bug does _not_ appear when no sidebar file is specified, nor when `dirName` is set to `.`

### Have you read the [Contributing Guidelines on issues](https://github.com/facebook/docusaurus/blob/master/CONTRIBUTING.md#reporting-new-issues)?

yes

## To Reproduce

https://codesandbox.io/s/keen-wozniak-cpdp0?file=/docs/tutorial/extras/_category_.yml

1. Create a new Docusaurus site / CodeSandbox demo
2. Add a subfolder to the `docs` directory
3. add some categories to the subfolder
4. add metadata to `_category_.yml` (json didn't work either)
5. modify `sidebars.js` to contain a sidebar with the item `{type: 'autogenerated', dirName: '[subfolder name]'}`

## Expected behavior

Sidebar categories have their metadata parsed

## Actual Behavior

Category metadata isn't parsed.

https://codesandbox.io/s/keen-wozniak-cpdp0?file=/docs/tutorial/extras/_category_.yml

Expected:
![image](https://user-images.githubusercontent.com/38791932/115097499-78696200-9edf-11eb-85ae-303e19ed5976.png)

Actual:
![image](https://user-images.githubusercontent.com/38791932/115097605-0ba29780-9ee0-11eb-9a07-a4cd13313723.png)

## Your Environment

- CodeSandbox demo: https://codesandbox.io/s/keen-wozniak-cpdp0?file=/docs/tutorial/extras/_category_.yml
- Docusaurus version used: 2.0.0-alpha.73
## Reproducible Demo

https://codesandbox.io/s/keen-wozniak-cpdp0?file=/docs/tutorial/extras/_category_.yml

steps made to create:

```bash
mkdir docs/tutorial
mv -r docs/tutorial-basics docs/tutorial/basics
mv -r docs/tutorial-extras docs/tutorial/extras
```

- renamed `_category_.json` in `docs/tutorial/extras` to `_category_.yml` and updated to yaml syntax; sidebar position also changed, so it _should_ be above `basics`.
- in `sidebars.js`, changed `dirName` from `.` to `tutorial`
- link in `src/pages/index.js:19` changed to `/docs/tutorial/basics/create-a-page` for ease of access.
<issue_comment>username_1: Just tried this locally, it seems the `position` is also not taken up it seems so that leaves the ordering of items in the sidebar to be manually arranged by updating filenames.
<issue_comment>username_2: Hey, I think there's a misconception on how this feature is supposed to work.

When you use `dirName: ""tutorials""`, it won't read the category metadata file at all not create a category for the tutorials folder

It will just read the docs of that subfolder and also the sub-subfolders. If you want a category, you have to add it explicitly to the sidebar.

The reason for this is that this allows to create a single category that can source multiple autogenerated directories, and generate a flat list of sidebar items.

Here is the init template where we want a 100% flat structure. It will work and no category at all will be created (on purpose):

```js
module.exports = {
  tutorialSidebar: [
    ""intro"",
    { type: ""autogenerated"", dirName: ""tutorial-basics"" },
    { type: ""autogenerated"", dirName: ""tutorial-extras"" },
  ],
};
```


Now what you are looking for is probably something like this:

```js
module.exports = {
  tutorialSidebar: [
    ""intro"",
    {
      type: ""category"",
      label: ""Tutorial - Basics"",
      items: [{ type: ""autogenerated"", dirName: ""tutorial-basics"" }],
    },
    {
      type: ""category"",
      label: ""Tutorial - Extras"",
      items: [{ type: ""autogenerated"", dirName: ""tutorial-extras"" }],
    },
  ],
};
```

You can also mix and match so that basic tutorials are flat and extra tutorials are nested:

https://codesandbox.io/s/elated-heisenberg-6tu9g?file=/sidebars.js:0-261

```js
module.exports = {
  tutorialSidebar: [
    ""intro"",
    { type: ""autogenerated"", dirName: ""tutorial-basics"" },
    {
      type: ""category"",
      label: ""Tutorial - Extras"",
      items: [{ type: ""autogenerated"", dirName: ""tutorial-extras"" }],
    },
  ],
}; 
```

---

I think it's powerful to be able to source multiple distinct folders and ""concat"" the docs of those folders under a single list.

Does it make sense?

How can we document this better?

Should we create an option so that a category is created for the target auto-gen dir by default?
<issue_comment>username_0: I think the issue's more of that the autogenerated sidebar items _do_ recognize and create subcategories, except these _subcategories_ do not have metadata recognized unless `dirName='.'`. 

i.e. if I have a docs directory structure of 
```
docs
└── tutorials
    ├── basics
    │   ├── _category_.yml
    │   └── index.md
    └── extras
        ├── _category_.yml
        └── index.md
```
where the category metadata defines
```yml
# basics/_category_.yml
label: 'Tutorial - Basics'
position: 2

# extras_category.yml
label: 'Tutorial - Extras'
position: 1
```
, an autogenerated sidebar item with `dirName: '.'` gives a sidebar with the structure
```
tutorials
├── Tutorial - Extras
│   └── index.md
└── Tutorial - Basics
    └── index.md
```
If I don't want a wrapper `tutorials` category in my sidebar, I would expect `dirName: 'tutorials'` to yield a sidebar with the structure
```
Tutorial - Extras
└── index.md
Tutorial - Basics
└── index.md
```
whereas currently it yields
```
basics
└── index.md
extras
└── index.md
```
<issue_comment>username_2: @username_0  agree, something does not work as intended and Docusaurus fails to read the metadatas of subcategories of the autogenerated source dir. Will fix this.<issue_closed>
<issue_comment>username_1: Thanks @username_2 ! is it possible to use this directly from `master` now? sorry my npm foo is a bit weak :(
<issue_comment>username_2: @username_1 you can use the canary release to get the code from master before we release it:

https://www.npmjs.com/package/@docusaurus/core

![image](https://user-images.githubusercontent.com/749374/116125196-7a90a500-a6c5-11eb-921f-e8b59b87c510.png)
<issue_comment>username_2: released in alpha 74"
microsoft/TypeScript-Website,524510895,130,,"[{'action': 'opened', 'author': 'orta', 'comment_id': None, 'datetime': '2019-11-18 17:29:47+00:00', 'masked_author': 'username_0', 'text': ""If you are interested on updates to the TypeScript web infra, you can subscribe to this issue. I'll comments with project updates. I try to do 3 days on web infra, and 2 days on compiler things a week, so there should be some progress every week or two.\r\n\r\nLong term roadmaps:\r\n\r\n- Website Vision https://github.com/microsoft/TypeScript-Website/issues/94\r\n- Internationalization https://github.com/microsoft/TypeScript-Website/issues/100\r\n- Community Section https://github.com/microsoft/TypeScript-Website/issues/63\r\n\r\nA lot of progress happens on the v2 branch of the TypeScript website repo, the results of this is attached to the main website under a folder called v2: https://www.typescriptlang.org/v2/\r\n\r\n### Upcoming \r\n\r\n- I'm currently looking at the [tsconfig reference](http://www.typescriptlang.org/v2/tsconfig), and [typescript powered code blocks](https://github.com/microsoft/TypeScript-Website/issues/120) for samples\r\n\r\n### About myself 👋\r\n\r\nHello there, I’m Orta! I'm reasonably new to the TypeScript team, and have been focusing on docs and web tooling. You can find more fine-grained updates on [my twitter](https://twitter.com/username_0) (plus y'know, other stuff) - also, thanks for the idea https://github.com/octokit/rest.js/issues/620"", 'title': '💌📯 Updates', 'type': 'issue'}
 {'action': 'created', 'author': 'orta', 'comment_id': 555136642.0, 'datetime': '2019-11-18 18:04:24+00:00', 'masked_author': 'username_0', 'text': 'Test', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'orta', 'comment_id': 555138684.0, 'datetime': '2019-11-18 18:09:24+00:00', 'masked_author': 'username_0', 'text': 'Another test for the webhook', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'orta', 'comment_id': 555142485.0, 'datetime': '2019-11-18 18:18:44+00:00', 'masked_author': 'username_0', 'text': 'Third time lucky', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'orta', 'comment_id': 555143668.0, 'datetime': '2019-11-18 18:21:26+00:00', 'masked_author': 'username_0', 'text': 'Fourth time is a charm.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'orta', 'comment_id': 555144540.0, 'datetime': '2019-11-18 18:23:31+00:00', 'masked_author': 'username_0', 'text': 'Fool me five times, shame on my lack of types.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'orta', 'comment_id': 555518195.0, 'datetime': '2019-11-19 13:55:50+00:00', 'masked_author': 'username_0', 'text': ""### November Catch-up\r\n\r\n[![btvGbI0 - Imgur](https://user-images.githubusercontent.com/49038/69150183-2502a280-0aa6-11ea-89d1-093906bf1696.gif)](http://www.crispe.net)\r\n\r\nI have two not yet published blogs posts on the [TypeScript product blog](https://devblogs.microsoft.com/typescript/), one on our usage of GitHub Actions in the Playground in the repo [`username_0/make-monaco-builds`](https://github.com/username_0/make-monaco-builds/), and an overview of the v2 of the TypeScript playground. The TLDR, because I have no clue how long these posts will be in publishing quagmire:\r\n\r\n- **Automatic Type Acquisition** (beta) - the site will grab the d.ts files for your imports\r\n- **Comprehensive Examples** - 40+ focused docs on different parts of TypeScript\r\n- **Example Hyperlinking** - Examples can link between each other\r\n- **Concise hrefs** - The URL is a gzipped string of the code, with all compiler flags etc\r\n- **Decoupled TypeScript Versions** - You can test many versions of TypeScript\r\n- **Theming Support** - from @keithlayne \r\n- **JavaScript Playgrounds**  - So you can help each other with JSDoc support \r\n- **Fixits** - Mainly so we can document new fixits on a release\r\n- **PR Based Playgrounds** - Any TS team member can request a playground for a PR via commenting\r\n\r\nThe playground self-documents a lot of these in a [set of examples](https://www.typescriptlang.org/play/#show-whatisnew)\r\n\r\n\r\n#####  Long term\r\n\r\nOn the website v2 side, I've created larger roadmaps which talk to some of the long-term vision on different parts:\r\n\r\n- [Website Vision](https://github.com/microsoft/TypeScript-Website/issues/94) - this includes links to all the designs too\r\n- [Internationalization](https://github.com/microsoft/TypeScript-Website/issues/100)\r\n- [Community Section](https://github.com/microsoft/TypeScript-Website/issues/63)\r\n\r\n#####  Work in Progress:\r\n\r\n- I've got a good chunk of the v2 website navigation working with [the current handbook](https://www.typescriptlang.org/v2/docs/handbook/classes.html)\r\n- I've built out a library which can power the [TypeScript-powered Code Block](https://github.com/microsoft/TypeScript-Website/tree/v2/packages/ts-twoslasher) which isn't hooked up to the v2 markdown pipeline yet\r\n- I've built a lot of infra for an internationalized [TSConfig reference](https://www.typescriptlang.org/v2/tsconfig) - which I'm in the process of [adding examples and richer descriptions](https://github.com/microsoft/TypeScript-Website/pull/121) to all keys. PR's welcome there.\r\n\r\n##### Shipped Infra I'm happy with:\r\n\r\nThe new website has a solid amount of automation:\r\n  -  PR based deploys of the site\r\n  - Lighthouse results for a few pages\r\n  - A [danger-js](https://github.com/username_0/danger-plugin-lighthouse#danger-plugin-lighthouse) plugin for showing lighthouse results\r\n  - I extended the [danger-js plugin for spell checking](https://github.com/username_0/danger-plugin-spellcheck) to also include code\r\n  - This post [auto-comments into the TypeScript Teams channel](https://github.com/microsoft/TypeScript-Website/blob/master/.github/workflows/send-updates.yml) via GitHub Actions"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'orta', 'comment_id': 560546774.0, 'datetime': '2019-12-02 19:33:55+00:00', 'masked_author': 'username_0', 'text': '## Website Navigation \r\n\r\nI\'ve focused my work with three main goals since the last update:\r\n\r\n- [Documentation for the TSConfig](https://github.com/microsoft/TypeScript-Website/pull/121)\r\n- [Tooling for how we want to show code blocks](https://github.com/microsoft/TypeScript-Website/issues/120)\r\n- Creating the navigation shell of the website so that we can preview pages\r\n\r\nI\'m going to focus this update on the navigation aspects of the site. Let\'s look at a few different places we have\r\nnavigation and talk about why it was designed this way\r\n\r\n### Site Navigation\r\n\r\nI tried to take a mix of modern native mobile app design, and website best practices to focus on three main audiences:\r\n\r\n- Desktop with mouse\r\n- Desktop via keyboard\r\n- Mobile Phones\r\n\r\nThe first two tend to have similar needs in terms of what they want for site navigation, but mobile devices themselves \r\nshould be treated quite differently both from a user\'s intent and how we should present navigation.\r\n\r\nHow does it look on desktop?\r\n\r\n![Screen Shot 2019-12-02 at 1 12 07 PM](https://user-images.githubusercontent.com/49038/69988504-c4e11700-150f-11ea-8d06-6b98f65c475c.png)\r\n\r\nHow does it look on mobile?\r\n\r\n![Screen Shot 2019-12-02 at 1 36 27 PM](https://user-images.githubusercontent.com/49038/69988540-d0ccd900-150f-11ea-9838-84c9c7b8e9ae.png)\r\n\r\n\r\n### Why the drastic change?\r\n\r\nNavigation on desktop tends to take a lot of design cues from headers in print design which aims to follow the path of reading:\r\n\r\n1. Have a strong visual distinction for a section of links\r\n1. Always have a brand mark link in the top corner where folks read from which takes you to the index\r\n1. Include a few links to the impusername_0nt places next to that\r\n1. Include a flexible whitespace gap then have secondary tiered navigation links at the end of your eye flow\r\n\r\nBut mobile really disrupted that from two factors:\r\n\r\n1. The horizontal space is so constrained, good luck getting more than 4-5 words in there\r\n1. There are \'blessed\' areas of the screen where it is physically easier to touch once mobile devices got big\r\n\r\nThis moved the design frames of references from one loosely based on [fitt\'s law](https://blog.codinghorror.com/fitts-law-and-infinite-width/) to\r\none based on thumb touch maps.\r\n\r\n<img src=""https://www.scotthurff.com/content/images/2019/06/thumb-zones-lineup.png"">\r\n\r\n[From scotthurff.com](https://www.scotthurff.com/posts/how-to-design-for-thumbs-in-the-era-of-huge-screens/)\r\n\r\nIn designing for mobile, I had to really narrow the priorities for people to two things. I wanted people to easily get to search, and to go to the root of the documentation. In my experience building websites for developer documentation, most people are using mobile as a reference or to quickly show something to someone.\r\n\r\nYou can see here that we barely get into the natural section in search\r\n\r\n\r\n![mobile-1](https://user-images.githubusercontent.com/49038/69988594-f0640180-150f-11ea-9cac-1525f6066338.png)\r\n\r\nThen just get comfy when the navigation bars appears\r\n\r\n![mobile-2](https://user-images.githubusercontent.com/49038/69988593-efcb6b00-150f-11ea-9989-7045d0cfc953.png)\r\n\r\n\r\nWith the navigation designed, I applied the same forms of navigation hiding which mobile browsers do. The navigation will only show when you start to move up. It also keeps track of display curves for phones like the iPhone X and my Samsung Note, you can see in this GIF when the browser includes a flat edge at the bottom then the navigation buttons lay flat.\r\n\r\n![Screen Recording 2019-12-02 at 12 51 24 PM 2019-12-02 12_55_45](https://user-images.githubusercontent.com/49038/69988794-5b153d00-1510-11ea-8858-0fcfbe113d10.gif)\r\n\r\nI still have a few questions to answer though:\r\n\r\n- What will the language selector look like?\r\n- What will the theme selector look like?\r\n\r\nI expect to take some cues from [docs.microsoft.com](https://docs.microsoft.com/en-us/aspnet/core/getting-started/?view=aspnetcore-3.0&tabs=macos).\r\n\r\n#### Footers\r\n\r\nI believe in mega-footers. A footer is the end of the information you were actually looking for and generally represents three things:\r\n\r\n- A jump-off section for people to get to related links\r\n[Truncated]\n\r\nFor mobile, I didn\'t need to do anything content-wise. I don\'t think there\'s any value in making it more focused. Design wise I only made a few tweaks but it felt fine in both.\r\n\r\n#### Internal Navigation\r\n\r\nThe other place where we have navigation is between pages. When you link into a handbook, we want to show a navigation between related documents. \r\n\r\n![2019-12-02 13-08-59 2019-12-02 13_11_05](https://user-images.githubusercontent.com/49038/69988709-2b663500-1510-11ea-9918-99508850e205.gif)\r\n\r\nThis is a pretty solid design pattern to work within, and one that\'s common on documentation sites. I took care to make it obvious which navigation section you\'re in and Gatsby made it so fast that it doesn\'t feel like you\'re navigating between web pages.\r\n\r\nThe tricky thing was making it feel right on keyboard, which I\'m really happy with.\r\n\r\n#### No runtime dependencies\r\n\r\nA lot of what you\'re seeing in these screenshots looks like a lot of complicated JavaScript code, but it\'s not. Apart from search which comes from Algolia, the v2 site has zero JavaScript dependencies at runtime, and is a static HTML site to an azure blob storage account.\r\n\r\nThe interaction patterns are built from first building the site with JavaScript disabled, and then JavaScript to handle some of the extra is added in at runtime. I use the `useEffect` pattern inside a React component to add client-side JS enhancements. For example [here is all the runtime JavaScript code](https://github.com/microsoft/TypeScript-Website/blob/6ed0a6021bd14e7f078ceb740c33c5d844f968f8/packages/typescriptlang-org/src/components/layout/SiteFooter-PlaygroundSamples.tsx#L75-L106) to handle allowing the popover in the footer. The rest is all CSS.\r\n\r\nThis pattern works really well for a medium sized site with only 1-2 core contributors.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'orta', 'comment_id': 567044712.0, 'datetime': '2019-12-18 14:04:01+00:00', 'masked_author': 'username_0', 'text': ""### Interactive Codeblocks\r\n\r\n![humanbouncinginice](https://user-images.githubusercontent.com/49038/71089569-14bf0f80-2199-11ea-80a6-70b9f11527b1.gif)\r\n\r\nIt's been a slow week on the web infra and docs world. The [tsconfig docs](https://github.com/microsoft/TypeScript-Website/pull/121) are pretty close to being wrapped up now. However, the main reason for the slow week has been that I was on my first [Definitely Typed rotation](https://github.com/DefinitelyTyped/DefinitelyTyped/pull/41063) last week, and I'm covering mornings this week.\r\n\r\nIn-between DT work, I've been wrapping my head around twoslash improvements. Twoslash is a mini-typescript sandbox environment where you can control the compiler and the output via comments. It's part of a larger roadmap https://github.com/microsoft/TypeScript-Website/issues/120 but it's basically the tool doing the heavy lift.\r\n\r\nFor example:\r\n\r\n```ts\r\n// @declaration: true\r\n// @showEmit\r\n// @showEmittedFile: index.d.ts\r\n\r\n/**\r\n * Gets the length of a string\r\n * @param value a string\r\n */\r\nexport function getStringLength(value: string) {\r\n  return value.length\r\n}\r\n```\r\n\r\nTells the compiler with the first three lines:\r\n - Set the compiler option `declaration` to true\r\n - Set the twoslash option`showEmit` to true (meaning that the code sample should show a different file and not the source TypeScript) \r\n - Set the file which it should show to be `index.d.ts`\r\n\r\nSo the user-facing code sample would be:\r\n\r\n```js\r\n/**\r\n * Gets the length of a string\r\n * @param value a string\r\n */\r\nexport declare function getStringLength(value: string): number;\r\n```\r\n\r\nThis means the code sample a user see is a `.d.ts` for a `.js` file, instead of the original source code.\r\n\r\n### Twoslash Features\r\n\r\n- Showing errors from the code sample, and leaving the messaging to the compiler\r\n - Declaratively highlight symbols you want to show\r\n- Handling showing the results of transpilation with certain flags\r\n- Splitting a code sample to hide distracting, or redundant code\r\n- Support an example referencing multiple files\r\n- Creating a playground link for the code\r\n\r\nFor us the critical stuff is showing errors, highlighting parts of source code and showing the results of transpilations. The nice to haves are things like handling imports in a single file, and playgrounds.\r\n\r\nThe advantages for the site are:\r\n - We can be sure TS emits, and error messages are always accurate between TS releases\r\n - We can do callouts in docs to show the exact results of a particular identifier\r\n\r\nThis last point is particularly useful because of how TypeScript type inference works with [narrowing or widening](https://www.typescriptlang.org/play/?e=58#example/type-widening-and-narrowing) - the same variable identifier could be very different objects in different parts of the same code sample. \r\n\r\n### Highlights for you, and you, and you\r\n\r\nWhile it's great for us to highlight the bits we think are impusername_0nt in a code sample, the ideal state is that our code samples provide a way to highlight the code at all the identifiers in that sample. This is one of the features I've been working on this week:\r\n\r\n![Screen Shot 2019-12-17 at 3 15 54 PM](https://user-images.githubusercontent.com/49038/71091805-c5c7a900-219d-11ea-840f-e4946779a850.png)\r\n\r\nWhile not working perfectly yet, you can feel all of the pieces coming together.\r\n\r\n#### Ecosystem Adoption\r\n\r\nNearly all of these twoslash features aren't problems unique to TypeScript, twoslash uses the language server protocol to extra all of these annotations - meaning essentially any language can re-create this infrastructure in their docs (and hopefully after seeing it on the TypeScript v2 site, they will!)\r\n\r\nI've also been building twoslash support out as a series of modules to work with Gatsby, so I would hope this makes it easy for folks to use adopt twoslash for their sites when they are writing about TypeScript."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'orta', 'comment_id': 569932561.0, 'datetime': '2019-12-31 13:57:00+00:00', 'masked_author': 'username_0', 'text': '<p align=""center""><img src=""https://user-images.githubusercontent.com/49038/71623454-9c167500-2bd4-11ea-8ef6-459c174d76ad.gif""></p>\r\n\r\n### TSConfig Reference\r\n\r\nOne of the completely new features in the new website is the TSConfig Reference. Since the last update, this page is now at a ""good enough"" stage that it\'s pretty publicly available. The design is a WIP, but the copy is 👍.\r\n\r\nhttps://www.typescriptlang.org/v2/en/tsconfig\r\n\r\nThe TSConfig Reference has a few goals:\r\n\r\n- De-mystify the configuration for TypeScript by providing more comprehensive examples per flag\r\n- Have examples for compiler flags use the compiler to show how the flag works\r\n- Make it easy for the community to contribute and improve the tsconfig docs\r\n- Provide a path for internationalization\r\n\r\n### De-mystifying Compiler Flags\r\n\r\nPrior to the TSConfig reference, the canonical source of information on the available flags and how they work is the overview of the command line flags for TypeScript. This [is/was a table of tweet-sized descriptions](https://www.typescriptlang.org/docs/handbook/compiler-options.html) of most CLI flags, of which the majority are also tsconfig options. You would then likely need to either get information from the release notes which introduced that flag, or to search the internet for that exact flag name to get more info.\r\n\r\nThis documentation structure is pretty logical because the TypeScript codebase keeps both tsconfig and CLI flags in the  same data-structure, which has made it hard to extract either for documentation purposes.\r\n\r\nMy first port of call at starting this page was to use the typescript API to [extract all of the compiler flags](https://github.com/microsoft/TypeScript-website/blob/v2/packages/tsconfig-reference/scripts/generateJSON.ts) and to generate a JSON dump of all the compile flags. This comes to about 100+ flags today.\r\n\r\n```ts\r\nexport type CompilerOptionName =  ""help"" | ""watch"" | ""preserveWatchOutput"" | ""listFiles"" | ""listEmittedFiles"" | ""pretty"" | ""traceResolution"" | ""diagnostics"" | ""extendedDiagnostics"" | ""generateCpuProfile"" | ""incremental"" | ""locale"" | ""all"" | ""version"" | ""init"" | ""project"" | ""build"" | ""showConfig"" | ""listFilesOnly"" | ""target"" | ""module"" | ""lib"" | ""allowJs"" | ""checkJs"" | ""jsx"" | ""declaration"" | ""declarationMap"" | ""emitDeclarationOnly"" | ""sourceMap"" | ""outFile"" | ""outDir"" | ""rootDir"" | ""composite"" | ""tsBuildInfoFile"" | ""removeComments"" | ""noEmit"" | ""importHelpers"" | ""downlevelIteration"" | ""isolatedModules"" | ""strict"" | ""noImplicitAny"" | ""strictNullChecks"" | ""strictFunctionTypes"" | ""strictBindCallApply"" | ""strictPropertyInitialization"" | ""noImplicitThis"" | ""alwaysStrict"" | ""noUnusedLocals"" | ""noUnusedParameters"" | ""noImplicitReturns"" | ""noFallthroughCasesInSwitch"" | ""moduleResolution"" | ""baseUrl"" | ""paths"" | ""rootDirs"" | ""typeRoots"" | ""types"" | ""allowSyntheticDefaultImports"" | ""esModuleInterop"" | ""preserveSymlinks"" | ""allowUmdGlobalAccess"" | ""sourceRoot"" | ""mapRoot"" | ""inlineSourceMap"" | ""inlineSources"" | ""experimentalDecorators"" | ""emitDecoratorMetadata"" | ""jsxFactory"" | ""resolveJsonModule"" | ""out"" | ""reactNamespace"" | ""skipDefaultLibCheck"" | ""charset"" | ""emitBOM"" | ""newLine"" | ""noErrorTruncation"" | ""noLib"" | ""noResolve"" | ""stripInternal"" | ""disableSizeLimit"" | ""disableSourceOfProjectReferenceRedirect"" | ""noImplicitUseStrict"" | ""noEmitHelpers"" | ""noEmitOnError"" | ""preserveConstEnums"" | ""declarationDir"" | ""skipLibCheck"" | ""allowUnusedLabels"" | ""allowUnreachableCode"" | ""suppressExcessPropertyErrors"" | ""suppressImplicitAnyIndexErrors"" | ""forceConsistentCasingInFileNames"" | ""maxNodeModuleJsDepth"" | ""noStrictGenericChecks"" | ""useDefineForClassFields"" | ""keyofStringsOnly"" | ""plugins"";\r\n```\r\n\r\nHaving a data-dump is a good first start, but some of these flags are obviously CLI only, for example: `""help""` or `""watch""` and the graph of these options is quite complex but not represented in the TypeScript codebase.\r\n\r\nTo map these domains, there is a [file called `tsconfigRules.ts`](https://github.com/microsoft/TypeScript-website/blob/v2/packages/tsconfig-reference/scripts/tsconfigRules.ts) which strives to be the source of truth for how the config options connects and their additional metadata.\r\n\r\nThis file tracks:\r\n\r\n - Denylisting CLI only options\r\n - Available options for a flag\r\n - Defaults for the flag\r\n - many to many relationships between options\r\n\r\nFrom there the next step is to generate a markdown file for the site to work with. This is done in [`generateMarkdown.ts`](https://github.com/microsoft/TypeScript-website/blob/v2/packages/tsconfig-reference/scripts/generateMarkdown.ts).\r\n\r\n### Real use-cases\r\n\r\nThe TSConfig reference is a perfect place for building out the features of [the twoslash](https://github.com/microsoft/TypeScript-Website/issues/130#issuecomment-567044712) because it requires making code samples which have all sorts of emits, compiler failures, and configuration options.\r\n\r\nA great example of this is the [`module`](https://typescript-v2-163.username_0m.now.sh/en/tsconfig#module) option - where the same code is ran with different settings for module and creates drastically different JavaScript. It makes it much easier to understand once you can see the outcome alongside.\r\n\r\n<img width=""945"" alt=""Screen Shot 2019-12-31 at 1 31 58 PM"" src=""https://user-images.githubusercontent.com/49038/71623490-ff080c00-2bd4-11ea-8c0f-15b9679fd90f.png"">\r\n\r\n### Low Barrier to Contribute\r\n\r\nEach compiler option is [a unique markdown file](https://github.com/microsoft/TypeScript-Website/tree/v2/packages/tsconfig-reference/copy/en/options) which will eventually be concatinated into a single file. This means a contributor can easily make isolated changes to just the file they\'re interested in. Because it\'s plain old markup and twoslash is reasonably simple then we can get a lot of bang for a small amount of code.\r\n\r\nBeing a series of markdown files means that tooling like Danger can run spellcheckers, and linters against each file individually to ensure we\'re shipping great docs.\r\n\r\n### Ready for Translations\r\n\r\nThis project was built with internationalization from day one. I\'ve been making a really bad language attempt at supporting a pirate dialect to prove the system:\r\n\r\nhttps://www.typescriptlang.org/v2/pirate/tsconfig#module\r\n\r\nThe idea is that the community can add translations option by option, and if they haven\'t included one yet then the english version is the fallback. So while it might be simple - it works well and it\'s the first part of the v2 website to hit [all three of the targets](https://github.com/microsoft/TypeScript-Website/issues/100) for the internationalization roadmap.\r\n\r\nMeaning it\'s ready to go it you want to start translation to a language you know. Docs are [in the README](https://github.com/microsoft/TypeScript-Website/tree/v2/packages/tsconfig-reference#generating-the-tsconfig-reference)', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'orta', 'comment_id': 575192008.0, 'datetime': '2020-01-16 15:02:56+00:00', 'masked_author': 'username_0', 'text': '## State of the v2nion\r\n\r\n![giphy](https://user-images.githubusercontent.com/49038/72535826-34546100-3847-11ea-8a04-9fe80fe41e83.gif)\r\n(How I feel after the winter holidays)\r\n\r\n```ts\r\ntype State = ""playground"" | ""internationalization"" | ""dev-pages""\r\n```\r\n\r\nI\'ve been plugging away occasionally on the last two weeks on the new Playground, and some developer pages for the node modules which I needed for the website. I\'ll cover those later, but now that we\'ve hit the 3.8 beta, it\'s time for me to slow down on the web infra to work on some compiler bugs. So, unless I feel like deep-diving on a particular topic there may not be an update in 2 weeks time.\r\n\r\n## Localization\r\n\r\nI [originally](https://github.com/microsoft/TypeScript-Website/commit/a1ca06febba972f4361713bba10fef4d0c114c01#diff-62e8aac4854aa468aaf8379ae9b073deR31) started working on supporting multi-lingual content for the site about 5 months ago, when I was doing my initial work on forking TypeScript-play to be the new TypeScript Playground. The site was still in design phase,  but it felt like an achievable goal, if done in small steps regularly while any type of content was being made. \r\n\r\nThat said, localization for v2 actually came with three interesting problems:\r\n\r\n- **What do you do with URLs?** To treat all languages equally, a page like `/community` should be `/en/community`   but that makes it tricky with losing existing SEO for these pages. We host statically, and I\'m not sure if we  can make [HTTP redirects](https://stackoverflow.com/questions/44274198/redirecting-base-url-in-azure-blob-storage?rq=1) \r\n  work with Azure Blob Storage.\r\n\r\n- **How do you handle fallbacks when some content for a localization isn\'t available?** E.g. someone has translated a  page of the playground, but not the tsconfig reference. The footer links from the playground should correctly  redirect to the english fallback, and not to a non-existent page.\r\n\r\n- **Where should localized content live?** Right now it\'s all in the main TypeScript website repo, and given that I  account for nearly all PRs on the repo, it\'s not a massive hub of activity. However, you want to give ownership to  translators and you want to be sure that code won\'t break the whole website. Right now, the other developer websites   with a similar set of constraints (size of documentation, potential contributors, complexity in domain) like   React use multi-repo approaches.  \r\n  \r\n  Right now my technique of keeping it in the TypeScript repo is a little ad-hoc, but I\'m keeping my eye on how Gatsby   handles [their translation efforts](https://github.com/gatsbyjs/rfcs/blob/master/text/0010-gatsby-docs-localization.md)   to see if there is work we can share.\r\n\r\n  You can see an [example of what adding a language looks like here](https://github.com/microsoft/TypeScript-Website/pull/181).\r\n\r\n## Playground\r\n\r\nI gave a TL:DR on the main changes to the TypeScript Playground v2 [back in Novemeber](https://github.com/microsoft/TypeScript-Website/issues/130#issuecomment-555518195), but now we have Playground v3. This has about 90% of the features of the v2 playground, \r\nand a few extra nicities:\r\n\r\n - It\'s now all in TypeScript and has some tests, as opposed to a single massive .JS file\r\n - The Sidebar UI is built for expansion (it is a plugin system, so people can create their own plugins in the future)\r\n - The code is split into ""Sandbox"" and ""Playground"", the sandbox being a monaco-editor wrapper and Playground as the \r\n   comprehensive UI for configs, examples and the sidebar.\r\n - It runs entirely on our infrastructure (except the type acquisition)\r\n - Type Acquisition now caches into localStorage, and so it should be pretty instant after the first time\r\n - There are options, so you can turn off updating the URL when you type, or ATA (and more later)\r\n\r\nThe playground was the first thing I designed for the TypeScript v2 website, and so it\'s nice to finally see and use it. I reflected [earlier on twitter](https://twitter.com/username_0/status/1212746649199685632) about how design work can feel like a rough plan, because the moment you start iterating - you have a much better set of assumptions about how something works.\r\n\r\n## Dependencies For Others\r\n\r\nI mentioned the Sandbox above, I\'ve taken some of the larger dependencies and given them their own section of the website. Both of these are really useful tools if you\'re working with TypeScript on the web, so I wanted to highlight tooling we\'ve made as quick overviews, \r\n\r\n- https://www.typescriptlang.org/v2/dev/sandbox/\r\n- https://www.typescriptlang.org/v2/dev/twoslash\r\n \r\nI\'m sure there are a lot of other cool modules the TypeScript team have shipped, so I want to try highlight how to work with the TypeScript compiler API and some other useful tools. \r\n\r\n## Current Sitemap\r\n\r\n- Existing Handbook Content: https://www.typescriptlang.org/v2/docs/handbook/basic-types.html (just this page has twoslash enabled)\r\n- Docs root: https://www.typescriptlang.org/v2/en/documentation/\r\n- TSConfig Reference: https://www.typescriptlang.org/v2/en/tsconfig\r\n- Playground: https://www.typescriptlang.org/v2/en/play\r\n- Dev page, Sandbox: https://www.typescriptlang.org/v2/dev/sandbox/\r\n- Dev page, Twoslash: https://www.typescriptlang.org/v2/dev/twoslash\r\n\r\nMy aim once I get back to the site: \r\n\r\n- [Index page](https://www.figma.com/file/x8FJrNqj6oupqWn1s3uMg4/Website?node-id=1%3A129)\r\n- Infra for localized Handbook content (though I\'ll not recommend folks actually translate them because a v2 for the handbook is still in the works)\r\n- Dark & High contrast modes\r\n- Initial polish passes for design, keyboard accessibility', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'orta', 'comment_id': 577445454.0, 'datetime': '2020-01-23 00:08:11+00:00', 'masked_author': 'username_0', 'text': '[![gatsby 2020-01-22 19_03_11-3](https://user-images.githubusercontent.com/49038/72945460-df828000-3d49-11ea-8a66-2867de8b8ddd.gif)](https://username_0stuff.s3.us-east-1.amazonaws.com/gifs/other/gatsby.mp4)\r\n[HQ vid](https://username_0stuff.s3.us-east-1.amazonaws.com/gifs/other/gatsby.mp4)\r\n\r\n## Why Gatsby?\r\n\r\nThe TypeScript v1 site is a jekyll website, and Jekyll packs a lot of power into a small tool. Jekyll is really great way to build static websites, but it\'s built to work for small websites of around 1-20 pages.\r\n\r\nYou can feel this in how they treat templating (liquid, which is a logic-less templating engine), how they treat the data modelling internally (there are only really \'[Posts](https://jekyllrb.com/docs/posts/\' & \'[Pages](https://jekyllrb.com/docs/pages/)\') and how in how the tool is set up to work with a specific folder structure.\r\n\r\nAt Artsy, where I worked at before TypeScript, we had started to hit the limits of [working within Jekyll](https://artsy.github.io/blog/2019/01/30/why-we-run-our-blog/) at around 200 blog posts and a lot of custom pages, and we were exploring different tools to use as a writing environment. In the process I looked deeply into Gatsby, and concluded that it was the right abstraction for building static sites.\r\n\r\n### What Makes Gatsby Unique\r\n\r\nWhat makes Gatsby unique among static site generators is this idea that it adds an extra step to the process. In a normal static site generator, you would more or less directly map files to their output:\r\n\r\n```ts\r\nconst files = fs.getDirSync()\r\nconst htmlFiles = files.map(makePage)\r\nhtmlFiles.forEach(html => {\r\n  fs.writeFileSync(filename, html)\r\n})\r\n```\r\n\r\nGatsy on the other hand does something a bit more like this:\r\n\r\n```ts\r\nconst setupSite = () => {\r\n  const files = fs.getDirSync()\r\n  const data = files.map(makePage)\r\n  graphQLServer.add(data)\r\n}\r\n\r\nconst createBlog = () => {\r\n  const pages = graphQLServer.query(""{  pages { title, text } }"")\r\n  htmlFiles.forEach(html => {\r\n    fs.writeFileSync(filename, html)\r\n  })\r\n}\r\n\r\nsetupSite()\r\ncreateBlog()\r\n```\r\n\r\nGatsby adds a GraphQL API which sits in-between the setup of the data and the generation of files in your static site. This abstraction providing a very strong separation of ""setting up the site"" vs ""representation on the file system"" which I\'ve found makes it easier to reason about what\'s going on internally.\r\n\r\nWhat does this look like in practice? It starts at [`gatsby-node.js`](https://github.com/microsoft/TypeScript-Website/blob/0afd526969d98c321787ab1962f72f9361ab54bd/packages/typescriptlang-org/gatsby-node.js) but an interesting example is how a TSConfig Reference page is set up:\r\n\r\n- In the Gatsby config file, [we request a plugin](https://github.com/microsoft/TypeScript-Website/blob/0afd526969d98c321787ab1962f72f9361ab54bd/packages/typescriptlang-org/gatsby-config.js#L52-L58) to look for markdown files in a particular folder and to mark them as `tsconfig-reference`\r\n- Then in `onCreatePages` in `gatsby-node.js` we make a [GraphQL query to get all these files](https://github.com/microsoft/TypeScript-Website/blob/0afd526969d98c321787ab1962f72f9361ab54bd/packages/typescriptlang-org/lib/bootup/ingestion/createTSConfigReference.ts#L12-L26) via the name `""tsconfig-reference""`. \r\n  These files are then used to create Pages inside Gatsby (e.g. `en.md` => `/en/tsconfig`, `pt.md` => `/pt/tsconfig`) and we link the React component used to render them.\r\n- Once all of the pages are set up, Gatsby runs through each page. \r\n- For the TSConfig it would load [this template](https://github.com/microsoft/TypeScript-Website/blob/0afd526969d98c321787ab1962f72f9361ab54bd/packages/typescriptlang-org/src/templates/tsconfigReference.tsx), run this query,and pass the results as the initial argument to [this function](https://github.com/microsoft/TypeScript-Website/blob/0afd526969d98c321787ab1962f72f9361ab54bd/packages/typescriptlang-org/src/templates/tsconfigReference.tsx#L9) - it does this per language.\r\n\r\nIt\'s a few more steps then `mv ../tsconfig/en.html en/tsconfig.html` - yep, but once you grok the larger idea then each step is a well composed, isolated and easily tested part of a larger system. That\'s what makes Gatsby a great abstraction.\r\n\r\n### Types For Tools\r\n\r\nThe TypeScript support in Gatsby is good, and improving as they start to port their own codebase to TypeScript. When I first started, I shipped a few `d.ts` file improvements and welcome the pings from their team with questions when it changes. In the last 2-3 months, I\'ve been running in a fully typed codebase which has been a breeze.\r\n\r\nIf you\'re familiar with React, and clicked through into the [TSConfig Template](https://github.com/microsoft/TypeScript-Website/blob/0afd526969d98c321787ab1962f72f9361ab54bd/packages/typescriptlang-org/src/templates/tsconfigReference.tsx#L9) - you might have been a bit surprised by the somewhat unorthodox usage of React.\r\n\r\nI\'m using React as a templating language, and not as a reactive UI framework, the site never use a `setState`-like API in React.  Effectively meaning React runs once when the site is generated, and then never used again.\r\n\r\nMy goal is that the TypeScript v2 website, with all its complexity, needs to be understood with the least amount of abstractions possible. It should not be too surprising, but vast majority of the TypeScript compiler team have a compiler background, and don\'t really do web development. To ensure that they can contribute, and understand the codebase I\'m aiming to use Gatsby and React to get as close to HTML + CSS as possible.\r\n\r\nOne way to do that is to separate the generation of HTML + CSS, from any extra JS which happens at runtime.  This means almost every component in the site conforms to this pattern:\r\n\r\n```tsx\r\n// JS imports\r\nimport React, { useEffect } from ""react""\r\nimport { Layout } from ""../components/layout""\r\n\r\n// Style\r\nimport ""./tsconfig.scss""\r\n\r\n// The main React component\r\nconst TSConfigReferenceTemplateComponent = (props: PropTypes) => {\r\n  useEffect(() => {\r\n    // code which happens when the page has finished loading\r\n  })\r\n[Truncated]\n\r\nBy not using any of the React `setState`-ish APIs, I can guarantee there is no ""runtime"" React rendering happening on a user\'s browser.  This means the HTML in the built file is exactly what someone will see whether they have JS enabled or not.\r\n\r\nOne advantage of this has been that I can reliably run [`BackstopJS`](https://garris.github.io/BackstopJS/) to take screenshots of these static files to keep track of visual regressions as the site grows and others start to contribute.\r\n\r\nWould I recommend this technique to people making Gatsby websites, probably not, it\'s going against the grain (React is a really good tool) of how you\'re expected to use Gatsby. But the trade-off is worth it for me, and I spent some time thinking about that.\r\n\r\n### Speed\r\n\r\nI\'m blown away by how fast Gatsby is for a user.\r\n\r\nThe founder of Gatsby, Kyle Mathews [gave a great talk in 2017 on the ways in which Gatsby is fast](https://youtu.be/Gtd-Ht-D0sg?t=961) and [here more recently](https://www.youtube.com/watch?v=HQEotVfTXwk), in rough:\r\n\r\n- Prefetching of related links\r\n- Clever splitting of code\r\n- Shrinking of assets\r\n- Offline support\r\n- Native lazy loading\r\n\r\nHis long term visions is to think of Gatsby as a compiler which takes a set of input source files, and will keep trying to make a static output which is faster and faster for users.  Another great resource for understanding the mechanics about why Gatsby is fast is this talk by [Nicolas Goutay at GOTO 2019](https://www.youtube.com/watch?v=p14g-Sep7HY).', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'orta', 'comment_id': 578536586.0, 'datetime': '2020-01-26 19:52:25+00:00', 'masked_author': 'username_0', 'text': 'I took ^ and turned it into a well rounded blog post for the Gatsby blog: https://www.gatsbyjs.org/blog/2020-01-23-why-typescript-chose-gatsby/', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'johnnyreilly', 'comment_id': 578543982.0, 'datetime': '2020-01-26 21:15:48+00:00', 'masked_author': 'username_1', 'text': ""Awesome post @username_0 - I've always meant to check Gatsby out and so I really appreciate how you talk this through. It's really clear 🤗"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'orta', 'comment_id': 582030065.0, 'datetime': '2020-02-04 17:43:27+00:00', 'masked_author': 'username_0', 'text': 'I learned to build open source projects which have a small (ish) core, but are extensible in ways you can\'t predict:\r\n\r\n- [Danger](https:///danger.systems) - has a small user-facing API, but always have hooks for plugins to integrate with CI tools\r\n- [CocoaPods](https://cocoapods.org) - has a few tiny kernel-like libraries then UI layers on top, then a plugin infra to allow all sorts of unique use-cases\r\n\r\nNow, today, the TypeScript Playground is in that list. I can now give the right answer to folks asking  ""I\'d love to be  able to present in the Playground"" which is ""Built it yourself! Make a plugin."" ([or extend mine](https://github.com/username_0/playground-slides)).\r\n\r\nDo I know what people will do with it? Nope. \r\n\r\nThat\'s the good bit though.\r\n\r\n### Making a Plugin Eco-system\r\n\r\nI\'ve done this a few times now, so here\'s what I think you need to start up a plugin eco-system:\r\n\r\n- User-facing overview of what they are\r\n- User-facing plugin registry\r\n- Developer tutorial for getting started\r\n- Template to bootstrap project\r\n- API docs\r\n- Reference Implementation\r\n\r\nEach one of these address funnel transitions as people get closer to building something cool, you know you\'ve succeeded in building a good plugin infrastructure when people start making fun & frivolous plugins:\r\n\r\n- [cocoapods-roulette](https://github.com/sirlantis/cocoapods-roulette)\r\n- [danger-the_coding_love](https://github.com/sirlantis/cocoapods-roulette)\r\n- [xcode-you-can-do-it](https://github.com/username_0/You-Can-Do-It#you-can-do-it)\r\n\r\nWhy? Because the barrier to entry is so low that you can try a throwaway idea. I guess I\'m excited to see when we get\r\n[fireworks in the playground](https://github.com/hoovercj/vscode-power-mode) as you type.\r\n\r\nSo, for the Playground Plugins:\r\n\r\n- User facing overview ([in the playground](https://www.typescriptlang.org/v2/en/play/) under options)\r\n- User facing plugin registry ([in the playground](https://www.typescriptlang.org/v2/en/play/) under options)\r\n- [Developer tutorial for getting started](https://www.typescriptlang.org/v2/dev/playground-plugins/)\r\n- [Template to bootstrap project](https://github.com/microsoft/TypeScript-Website/tree/v2/packages/create-typescript-playground-plugin)\r\n- [API docs](https://github.com/microsoft/TypeScript-Website/blob/v2/packages/create-typescript-playground-plugin/template/CONTRIBUTING.md)\r\n- [Reference Implementation](https://github.com/username_0/playground-slides)\r\n\r\nThen to dog-food plugins, the v3 version of the playground uses plugins itself for all of the sidebar tabs. This means anything I need to get the playground up and running is also available to any plugin developers.\r\n\r\n## Plugin Downsides\r\n\r\nI\'d be amiss if I didn\'t at least talk about the downsides of a plugin ecosystem:\r\n\r\n- Performance: Plugin authors are very likely to have less knowledge of the whole system, and that can cause their code to not work as well as code inside the main tool. Slow plugins cause users to blame the host tool as being slow. (For example, webpack)\r\n\r\n- Lack of Isolation: Some of the best abstractions are inter-process tools: [LSP](https://langserver.org), [XPC](https://medium.com/@theninjaprawn/breaking-ios-xpc-cfe2c3083c87) - these are effectively a way to ensure that each plugin is isolated safely. That\'s a lot of engineering which you might not need, but without it you can\'t guarantee that 2 plugins won\'t break each other (or your tool) and this is at the expense of performance\r\n\r\n- Additional support burden: A plugin might be breaking your tool, suddenly you have to ask ""What plugins do you have running?"" and re-direct folks around\r\n\r\n## Playground Plugins \r\n\r\nNone of those are too much of a problem for the playground, I think. If it does, then I\'ll improve it in the future. In the meantime, I\'d love to see some plugins from folks!', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'orta', 'comment_id': 587943151.0, 'datetime': '2020-02-18 22:47:51+00:00', 'masked_author': 'username_0', 'text': '<p align=""center""><img src=""https://media.giphy.com/media/1oLgKZz8wxUb1Rvkjc/giphy.gif"" /></p>\r\n\r\n## Why is the new TypeScript website Internationalised?\r\n\r\nI grew up in an English speaking county, so I was never forced into a position to learn a second language. \r\n\r\nFor the major of the world though, folks had to learn English on top of their own native tongue - either through [exposure to culture](https://us.macmillan.com/books/9780374172145) or as a potential route for self-improvement. \r\n\r\nI\'ve always had a chip on my shoulder about this. In-fact, I [moved to Brazil](https://www.youtube.com/watch?v=83K1Qgr4lf4) for my first programming job explicitly to try learn a second language and I\'m so thankful I got the chance to do that. The only blocking question I had for the interview was ""Do we program in English?"" - turns out everyone does.\r\n\r\nI spent the next decade and a half basically only writing software which works in English, and it\'s time to stop that. This year when I visited Brazil for [BrazilJS](https://twitter.com/braziljs), a [talk by @sudowilliam](https://www.youtube.com/watch?v=yveyngN-UJs&list=PLg2lQYZDBwOSAzmv-4x92409OH5IZUtGL&index=11) (sorry, it\'s in Portuguese) really hammered the point home: _By only providing documentation in English, only 3% of Brazilians could use the resources I was creating._ Access to learning English is also effectively class based. If you want to help with social mobility then helping to lower barriers by translation is a great way to contribute.\r\n\r\nIn Microsoft, everyone has a bi-annual set of goals/deliverables and luckily for me one of them **has** to relate to diversity and inclusion of some sort. You can [read my self-review](https://gist.github.com/username_0/d2b3cc779cdf6b5ccf2e5cfc04c75682) but I choose a stretch goal of getting the new site internationalized. \r\n\r\nTurns out doing it is significantly more complex than just saying ""let\'s do it"" - so, I\'ve been treating internationalization as my personal side-project since wrapping up [Flappy Royale](https://flappyroyale.io) and it\'s really starting to come together now.\r\n\r\n## Internationalizing the TypeScript Website\r\n\r\nWhen your tools are pretty low-level like Gatsby, internationalization isn\'t just a tick box you can hit and magically start producing sites which work logically across many languages. This website needs to be deploying as static HTML files for every language, and so we can\'t rely own runtime trickery. You need to think of how you are going to approach this from many different angles:\r\n\r\n##### Incremental Language Adoption\r\n\r\nShould a translation be available publicly if not everything is available? IMO, yes. My technique has been to effectively treat a translation as a layer above English - so for every potential set of translatable documents, you can add only one to get the language URLs set up, and anything you haven\'t provided yet will have the English link provided. \r\n\r\nGiven that we\'re relying on the OSS community to do translations, I don\'t think it\'s reasonable to put some kind of informal SLA on their time to block new parts of the website in English coming online. It can appear in English, and as someone finds the time, it can then be translated.\r\n\r\n##### URL schemes\r\n\r\nA very reasonable constraint we had was that [cool URIs don\'t change](https://www.w3.org/Provider/Style/URI.html) - switching to the new website should not break old links. This meant that English gets to be a bit of a special case in the TypeScript website. For example:\r\n\r\n- `/play` - the Playground in English\r\n- `/ja/play` - the Playground in Japanese\r\n\r\nThis is not ideal. My initial goal was to have `/en/play` but in the end, once I considered the downside of losing SEO juice for pages as they both switched from the old TypeScript website to the new one, and then with corresponding language change in URL shift - it didn\'t seem worth the trade-off.\r\n\r\n##### Linking\r\n\r\nInternally there is a [custom linking component](https://github.com/microsoft/TypeScript-Website/blob/v2/packages/typescriptlang-org/src/components/IntlLink.tsx) which understands the patterns of internationalized URLs in this website. \r\n\r\nThis means that I can write internal, English, URLs inside the website. Then depending on the current language of the page, it will resolve to either the localized page or an English one.\r\n\r\nThis simplifies the React components considerably, it\'s kind of wild thinking that every internal anchor knows the URL for every page on the site - but the way gatsby is architected makes that pretty easy to do. \r\n\r\n##### Content Generation\r\n\r\nThe TypeScript Website v2 is a monorepo, where I treat sections of documentation as unique packages. There are packages for:\r\n\r\n- [tsconfig reference](https://github.com/microsoft/TypeScript-Website/tree/v2/packages/tsconfig-reference) markdown files\r\n- [playground example](https://github.com/microsoft/TypeScript-Website/tree/v2/packages/playground-examples) `.ts` / `.js` files\r\n- [the handbook](https://github.com/microsoft/TypeScript-Website/tree/v2/packages/handbook-v1)\r\n\r\nEach of these has a `build` command which generates the hybrid English and per-language files and keeps them in an output folder. \r\n\r\nThe TypeScript website then uses these output folders to generate pages on the website. This two-step process is made easier by using [watchman](https://github.com/microsoft/TypeScript-Website/blob/v2/watcher.js) to automatically run the build scripts when markdown/ts/json files are changed in documentation.\r\n\r\n##### Strings\r\n\r\nBetween the options for Internationalizing React components, there wasn\'t an outstanding and obvious highlight. They all seemed good, but [React Intl](https://github.com/formatjs/react-intl#react-intl) felt like it was the closest to the to the [TC-39 standards](http://formatjs.io) - so I went with that.\r\n\r\nThere are per-language [sets](https://github.com/microsoft/TypeScript-Website/tree/v2/packages/typescriptlang-org/src/copy) of TypeScript objects which are [simple](https://github.com/microsoft/TypeScript-Website/blob/v2/packages/typescriptlang-org/src/copy/en/playground.ts) [key-value](https://github.com/microsoft/TypeScript-Website/blob/v2/packages/typescriptlang-org/src/copy/en/nav.ts) [objects](https://github.com/microsoft/TypeScript-Website/blob/v2/packages/typescriptlang-org/src/copy/en/documentation.ts) for the name of the copy and then the languages copy. \r\n\r\nThe site uses TypeScript types to ensure every language has every string (again, they have English fallbacks if missing too) by using [TypeScript\'s `typeof`](https://github.com/microsoft/TypeScript-Website/blob/17e12cf6c688187acb6afdbc2034d5df921057c6/packages/typescriptlang-org/src/copy/en.ts#L18).\r\n\r\n##### Uplifting Translators\r\n\r\nI want to provide as many tools as possible for folks wanting to pitch in on translations. Their questions and blockers are one of my highest priorities because their work is unique and impusername_0nt.\r\n\r\nTo give a space for collaboration, we create a channel in the TypeScript Community Discord, then an issue which shows how many files need translating. On a nightly basis, there is a GitHub Action [which updates](https://github.com/microsoft/TypeScript-Website/blob/v2/.github/workflows/nightly.yml) these issues.\r\n\r\nThen I [added the ability](https://github.com/microsoft/TypeScript-repos-automation/pull/5) for translators to use the [CODEOWNERS](https://github.blog/2017-07-06-introducing-code-owners/) feature of GitHub as an access route for merging their own PRs.\r\n\r\nThis means they don\'t need to rely on one of the TypeScript team to merge PRs (if all of their PR changes are inside their code owners section) \r\n\r\nI\'d like to provide a way to give attribution in the site too, [I have some designs which handle this for individual documents](https://www.figma.com/file/x8FJrNqj6oupqWn1s3uMg4/Website?node-id=7%3A1) (see the bottom) and I\'ve still got to think about how it could be done for something more complex like the playground/tsconfig.\r\n\r\n\r\n---\r\n\r\nGiven that the translation effort is still a work in progress and has only really started in the last two weeks - there\'s been a lot of great work happening so far! \r\n\r\n- English (making more pages use the strings techniques for internationalization)  by @evanSe\r\n\r\n- Japanese from @Quramy @Naturalclar @takefumi-yoshii  and @sasurau4 \r\n\r\n![Screen Shot 2020-02-18 at 5 35 21 PM](https://user-images.githubusercontent.com/49038/74784052-0e224680-5275-11ea-8801-8e908229ba9b.png)\r\n\r\n![Screen Shot 2020-02-18 at 5 44 08 PM](https://user-images.githubusercontent.com/49038/74784615-4d9d6280-5276-11ea-9be6-b0d14f975e70.png)\r\n\r\n\r\n- Spanish from  @KingDarBoja @carburo\r\n\r\n![Screen Shot 2020-02-18 at 5 42 28 PM](https://user-images.githubusercontent.com/49038/74784519-116a0200-5276-11ea-8042-cc03afc8dcbc.png)\r\n\r\n\r\n- Chinese from @kingwl \r\n![Screen Shot 2020-02-18 at 5 33 52 PM](https://user-images.githubusercontent.com/49038/74783963-da472100-5274-11ea-8d58-65440dc91c62.png)', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'orta', 'comment_id': 590325944.0, 'datetime': '2020-02-24 13:44:00+00:00', 'masked_author': 'username_0', 'text': ""Not an essay (as it's half-way through the usual 2 weeks cycle) but I gave an internal talk on all the different parts of the TypeScript website for the team which is on YouTube. It's an hour long and I feel like I mostly covered everything at a high level.\r\n\r\n<a href='https://www.youtube.com/watch?v=HOvivt6B7hE'><img src='https://user-images.githubusercontent.com/49038/75156565-61b2eb00-56e0-11ea-823d-1d22c500f2ff.png'></a>\r\n\r\n### [It covers](https://gist.github.com/username_0/a5421f0fa9ef345dd4b82872f06983fc):\r\n\r\n- How to stay up-to-date, and how I give progress info\r\n- How I worked on the design\r\n- [Why Gatsby](https://www.gatsbyjs.org/blog/2020-01-23-why-typescript-chose-gatsby/)\r\n- Monorepo overview\r\n- Moving through some React pages\r\n- How docs get generated\r\n- How internationalization works\r\n- What automation is in place\r\n- What new tools were built to make it all work\r\n- Some Qs"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'orta', 'comment_id': 594031833.0, 'datetime': '2020-03-03 16:11:49+00:00', 'masked_author': 'username_0', 'text': '![giphy 2020-03-03 11_09_16](https://user-images.githubusercontent.com/49038/75794890-71b17700-5d3f-11ea-9a41-8eff0e6edd82.gif)\r\n\r\n### V2 Release Candidate\r\n\r\nI\'m starting to wrap up the v2 site now, I\'m pretty sure that all pages and urls are accounted for and everything I wanted in for launch.\r\n\r\nI think it\'s worth taking the time to look back at one of my first issues on the TypeScript repo as a team member: [""What do you not like about the TypeScript Website and Documentation?""](https://github.com/microsoft/TypeScript/issues/31983)\r\n\r\nThis issue defined the larger roadmap for my last 6 months as the main focus of my work in both upgrading the existing site infra, and preparing the next generation.\r\n\r\n### Fully Addressed\r\n\r\n- **There’s no search for the documentation** (67 :+1:)\r\n- **Mobile Navigation can be difficult** (03 :+1:)\r\n- **Website is closed source** (34 :+1:)\r\n- **There isn\'t a page to share with non-technical folk** (13 :+1:)\r\n\r\nThe new site has new navigation, and search is a core component to that! There\'s a non-technical doc on TS, but I\'ve not [found a place for it yet](http://www.typescriptlang.org/v2/why-create-typescript)\r\n\r\n- **Official TypeScript Playground isn\'t as good as open-source alternatives** (47 :+1:)\r\n- **Short, shareable URLs for the playground** (15 :+1:)\r\n\r\nThe new playground is stunning, well documented and best of breed. \r\n\r\n- **Better description of tsconfig options** (40 :+1:)\r\n- **Examples with different settings (for different use cases / scenario)** (00 :+1:)\r\n- **Provide guides for turning on specific compiler flags** (22 :+1:)\r\n- **Can\'t link to docs for specific compiler options** (01 :+1:)\r\n\r\nThe tsconfig reference covers almost every compiler option with a comprehensive example. \r\n\r\n- **Lack of index page for Release Notes** (39 :+1:)\r\n- **""Utility Types"" page not up-to-date** (46 :+1:)\r\n- **Tutorials which focus on comparing TS to other ** (06 :+1:)\r\n- **Advanced Types page does not include Omit<T, K> type.** (09 :+1:)\r\n- **Code samples could do with better colors** (03 :+1:)\r\n- **Linked TypeScript Language Specification is completely out of date** (26 :+1:)\r\n\r\nThe docs and handbook v1.1 changes cover all of these, I actually started moving some docs out of the advanced types page and into their own pages in the handbook. \r\n\r\nThe v1.1ness of the Handbook brings over some of the opening v2 handbook pages and it restructures the handbook from a single ""Handbook"" (23 pages) to\r\n\r\n- Getting Started (5 pages)\r\n- Handbook (8 pages)\r\n- Handbook Reference (17 pages)\r\n\r\nWhich should provide a bit more focus.\r\n\r\n### Mostly Addressed\r\n\r\n- **playground which explains syntax** (15 :+1:)\r\n- **fourslash playground** (06 :+1:)\r\n\r\nThere\'s now a plugin API for the Playground, so anyone can fix these. I have a twoslash playground, but I\'ve not investigated how feasible it would be to port fourslash to the web. \r\nIt could be trivial, or it could not be and it may never get an update again.\r\n\r\n- **Make better navigation between topics and titles** (03 :+1:)\r\n\r\nI\'ve got the designs, I\'ve just not built this bit yet. Dropped it for launch, but it should happen.\r\n\r\n### Partially Addressed\r\n\r\n- **API documentation that only exists in release notes** (62 :+1:)\r\n- **Use more real-world examples** (11 :+1:)\r\n\r\nThe extensive Playground samples didn\'t exist before this issue, and they were built with very ""everyday"" code, e.g. using ""APIResponse"" types instead of ""FooBar"".\r\nThese are built and hyperlinked, with incentives for reading all of them to give folks a second introduction to daily TypeScript usage. \r\n\r\nThey\'re not a full v2 handbook, but they\'re a much better than it was mid last year.\r\n\r\n- **Collect documentation, blog, and other official resources to one place** (05 :+1:)\r\n- **Highlight community projects** (07 :+1:)\r\n\r\nIn v2 there\'s a better, and more expansive [community page](http://www.typescriptlang.org/v2/community).\r\nOriginally, I was thinking of relying on meetup.com more to make this _very_ rich, but in the end meetup.com turned out to be a bit unstable after the WeWork acquisition and I didn\'t feel comfusername_0ble relying on them too much in the new version.\r\nThere\'s still space for things in there, I\'ve got this issue [with ideas](https://github.com/microsoft/TypeScript-Website/issues/63)\r\n\r\n- **There isn\'t a glossary of type names** (50 :+1:)\r\n- **Provide clear documentation on how to add custom type definitions** (11 :+1:)\r\n- **No obvious reason why docs would be in the wiki vs handbook** (06 :+1:)\r\n[Truncated]\nI think we could _maybe_ provide a definitive ""eslint with typescript"" doc, but why compete with the official docs for [typescript-eslint](https://github.com/typescript-eslint/typescript-eslint/blob/master/docs/getting-started/linting/README.md) when we could link to it instead.\r\nThen it\'s a bit more of a question of ""where do we link to it?""\r\n\r\n- **There is nothing covering the most commonly-hit errors or TypeScript limitations.** (07 :+1:)\r\n\r\nThis is basically an infinite list, there is [already a _massive_ FAQ](https://github.com/microsoft/TypeScript/wiki/FAQ) and more can be added to it over time. \r\n\r\n--- \r\n\r\nI\'m sure there will be a bunch of bug reports when we switch to v2, but the foundations have felt pretty solid for a while now. \r\n\r\nAfter the flurry of bug fixes, I\'ll be switching over to bug fixes on the compiler for a while full time so that I can understand and document the compiler API better. \r\n\r\nI\'d still expect updates to this issue because I still can think of a bunch of doc & infra updates which I\'d like to see and talk about. \r\n\r\nThings I\'ll be thinking about in the meantime:\r\n\r\n- Creating the next ""What do you not like about the TypeScript Website and Documentation"" issue. Perhaps with a focus like: ""What parts of TypeScript are under-documented, and how can we improve?""\r\n- Handbook v2\r\n- Specific pages which help you understand a single concept', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'orta', 'comment_id': 615238622.0, 'datetime': '2020-04-17 13:17:10+00:00', 'masked_author': 'username_0', 'text': 'Hey folks, yeah, it\'s been way over a month. That said, this month has been more like 6 months of pre-2015 time, so I don\'t think anyone\'s judging. \r\n\r\nI ended up taking the time I use to write these updates to write up more official release notes for the blog. Given that it\'s during a TypeScript beta phase though, I usually tone down the amount of work I do on the site / docs to less than a day a week and just focus mainly on compiler bugs and some DefinitelyTyped stuff.\r\n\r\n### Deployment \r\n\r\nhttps://github.com/microsoft/TypeScript-Website/issues/385 triggered a lot of ""we really need to grok how all the azure side works"".  So, I set up a new staging website, which is easy to memorize www.staging-typescript.org which uses azure as a completely static site. I\'ve been using that more than the `/v2/` folder on the website.\r\n\r\n### Infra\r\n\r\nI shipped all the node modules which power the v2 site:\r\n\r\n  - https://twitter.com/username_0/status/1248625441687998471?s=20\r\n  - https://twitter.com/username_0/status/1248625266022182919?s=20\r\n  - https://twitter.com/username_0/status/1248625051257065475?s=20\r\n\r\n### REPL\r\n\r\nPlayground Plugins have been getting some adoption:\r\n\r\n<ul>\r\n<li><a href=""https://github.com/username_0/playground-slides"">Slides</a> - Create presentations which use the Playground</li>\r\n<li><a href=""https://github.com/gojutin/playground-plugin-challenges"">Challenges</a> - Convert successively harder JavaScript files to TypeScript</li>\r\n<li><a href=""https://github.com/username_0/playground-plugin-tsquery"">tsquery</a> - Run <a href=""https://github.com/phenomnomnominal/tsquery"">TSQuery</a> queries against your code</li>\r\n<li><a href=""https://github.com/gillchristian/tsplay.dev/tree/master/playground#typescript-playground-link-shortener"">Link Shortener</a> - Create short-links for your current playground code and compiler settings</li>\r\n<li><a href=""https://github.com/Quramy/ts-playground-plugin-vim#typescript-playground-vim-plugin"">Vim</a> - Provides Vim keybindings for TypeScript Playground editor</li>\r\n<li><a href=""https://github.com/EmNudge/ts-playground-plugin-github-explorer"">GitHub Explorer</a> - Let\'s you choose TypeScript files from a GitHub repo</li>\r\n</ul>\r\n\r\nAnd this morning I built one to show [Code Flow Analysis nodes](https://github.com/username_0/playground-code-show-flow) for your code.\r\n\r\nThe plugin system paid off quite a lot because it made creating separate playground instances on the website easy.\r\n\r\nI started work on the Bug Workbench based off https://github.com/microsoft/TypeScript/issues/35389, which was a feature that re-used the web infra modules to create single file bug reports which are _almost_ the same as how we write tests in the compiler. This means we can request bug reports in this format, which then automated tooling can keep track of regressions and fixes\r\n\r\n![Screen Shot 2020-04-17 at 8 50 07 AM](https://user-images.githubusercontent.com/49038/79571023-754b5400-8088-11ea-833e-7d766f7fa6c1.png)\r\n\r\nYou can [see here](http://www.staging-typescript.org/dev/bug-workbench/?#code/PTAEAEDsHsEkFsAOAbAlgY1QFwIKQJ4BcoAZgIbIDOApgFC1b6LWgCikW2+oAvKAN61QoStHjUAImSzViUmaAA+oSAFdkyANy0AvqABkoABT9QqACbFKWAE6pIAc02g9y0xeJr4AI2o3nOgCU9IzMoABK0ADu4dSQ5n5+ALLUWGQAPAAqsJCIqlig1AAeMvGUAjoAfLwCQqAA2gDW1Nz2oM340CSg2bn5ALrEph3EHc7oZIic0JBWtvZOpNA28NIyNgD8xEYAbhSqsj05eVhNLf2BvNXWdo4B2joMTCyRMXEJNn5Zx-mFJe-lfhVGqvWLxRI2FJpb59LCVM6dbqg94QqEZXonSr9bS0dAzaygGTWYjI8GfGzpdicRjVPiCYQjUAAclE4nk1CZABo6hMpqgZsQmUluOyuXUSMtVlh1ts9sgDpceNU5QdQBtQCrqAA6LDQADK80cRkugoAtEzQCANftDmQCLQrcInc7hAA9Da6eh4yAErAAC1QlFglAActAsJk-dRg5QDsQAApkGycCjpUkfZKpDJUriVWm1YSsyTSQ70p2MlliYsyMXO3nTWbM4WgUXc50SlZrPyym2K5U2tXW+Xa3UG24OY2gM0Wq2auQlpQqdTIB1gF3rt0e4SPHRAA) a link where you would expect the types to be the same, but you can see in ""assertion found"" that they are different.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'orta', 'comment_id': 652381004.0, 'datetime': '2020-07-01 12:11:11+00:00', 'masked_author': 'username_0', 'text': ""It's been a while ey.\r\n\r\nProgress has been slow, in part because I've been doing compiler / [DT work](https://devblogs.microsoft.com/typescript/changes-to-how-we-manage-definitelytyped/) full time and the sort of work which gets highlighted in here has been happening in my spare time since March. Thanks to COVID and the need to protest, I really don't have as much spare time to write software as I used to.\r\n\r\n### Shipped npm modules\r\n\r\n- [`@typescript/vfs`](https://www.npmjs.com/package/@typescript/vfs) - A Map based TypeScript Virtual File System.\r\n\r\n  ```ts\r\n   import { createSystem, createVirtualTypeScriptEnvironment } from '@typescript/vfs'\r\n   import ts from 'typescript'\r\n \r\n    const fsMap = new Map<string, string>()\r\n    // ... fill  fsMap\r\n    const system = createSystem(fsMap)\r\n \r\n   const compilerOpts = {}\r\n   const env = createVirtualTypeScriptEnvironment(system, ['index.ts'], ts, compilerOpts)\r\n \r\n   // You can then interact with the languageService to introspect the code\r\n   env.languageService.getDocumentHighlights('index.ts', 0, ['index.ts'])\r\n  ```\r\n\r\n- [`@typescript/twoslash`](https://www.npmjs.com/package/@typescript/twoslash) - Compiler-back Code Samples\r\n\r\n  A markup format for TypeScript code, ideal for creating self-contained code samples which let the TypeScript compiler do the extra leg-work. Inspired by the fourslash test system.\r\n\r\n  Used as a pre-parser before showing code samples inside the TypeScript website and to create a standard way for us to create examples for bugs on the compiler's issue tracker.\r\n\r\n  You can preview twoslash on the TypeScript website here: https://staging-typescript.org/dev/twoslash\r\n\r\n- [`gatsby-remark-shiki-twoslash`](https://www.npmjs.com/package/gatsby-remark-shiki-twoslash) - Rich TS code samples for gatsby\r\n\r\n  Powers the introspectable code samples in the TypeScript website, which lets users get the same hover inspection as your editor but statically and built ahead-of-time.\r\n\r\n  I made an [example blog](https://gatsby-twoslash-shiki-blog-example.now.sh/new-beginnings/) and showed [how to set it up here](https://github.com/username_0/gatsby-twoslash-shiki-blog/pull/1)"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'orta', 'comment_id': 652390475.0, 'datetime': '2020-07-01 12:31:55+00:00', 'masked_author': 'username_0', 'text': ""Surprise, it's a double post to make up for lost time.\r\n\r\nSince I mentioned the site was at RC, it has gone through some changes to try get the design past reviews, and an accessibility audit which is mostly on track now to be wrapped this weekend. With the goal of flipping the switch on the day of the 4.0 RC in early august. \r\n\r\n### Docs\r\n\r\nI've started to focus on the content of the site given the plumbing is all there\r\n\r\n - [Creating .d.ts files from JS](https://www.staging-typescript.org/docs/handbook/declaration-files/dts-from-js.html)\r\n - [Revised the mixin docs from scratch](https://github.com/microsoft/TypeScript-Website/pull/719)\r\n - [Creating a JS section](https://github.com/microsoft/TypeScript-Website/pull/722)\r\n - [Docs on babel + TS projects](https://github.com/microsoft/TypeScript-Website/pull/699)\r\n - There's now a [handbook index page](https://www.staging-typescript.org/docs/handbook/)\r\n - The TSConfig reference now includes all options and not just `compilerOptions`\r\n - [There's an experimental new search UI](https://github.com/microsoft/TypeScript-Website/pull/690)\r\n - [Work on improving the .d.ts templates](https://github.com/microsoft/TypeScript-Website/pull/543)\r\n - [There is an explicit JSDoc reference page](https://www.staging-typescript.org/docs/handbook/jsdoc-supported-types.html) (I'm really happy with how the twoslash code samples work here)\r\n\r\n\r\n### Playground Changes\r\n\r\n- The Playground Plugin infra system got a design system, which makes it trivial to handle most of the normal plugin UI\r\n- I built [a collaborate plugin](https://github.com/username_0/playground-collaborate) for the Playground to make it multiplayer (server seems buggy ATM)\r\n- I built a very polished plugin which [shows you each step of the transformer pipeline used in JS/DTS emit](https://github.com/username_0/playground-transformer-timeline)\r\n- I got a WIP AST viewer in the playground, it's good but slow\r\n- I've been reading up on web-workers to try move \r\n- I've shipped a few PRs to monaco-typescript to fix playground bugs\r\n- Android support in the Playground is now OK, not terrible \r\n- All the infra to build monaco and monaco-typescript now lives in the Microsoft org\r\n\r\nI have an idea how to build multi-file Playground, so there's a possibility that could happen in the future at some point. Follow [this PR](https://github.com/microsoft/TypeScript-Website/pull/687) for updates.\r\n\r\n### Misc\r\n\r\n- [I gave a talk](https://www.youtube.com/watch?v=8qm49TyMUPI&t=674s) on the constants the TS team put on the language and themselves to avoid negatively influencing JS\r\n- [I've been running docs review meetings](https://github.com/microsoft/TypeScript/issues?q=is%3Aopen+is%3Aissue+label%3A%22Docs+Meeting+Notes%22) to get some of the folks who know the raw details to show me the right way to doc things"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'orta', 'comment_id': 652399262.0, 'datetime': '2020-07-01 12:51:17+00:00', 'masked_author': 'username_0', 'text': 'Subscriber bonus triple post. I spent some time building out a tool which is **a bit like DefinitelyTyped but for TSConfig files**.\r\n\r\nThis comes from a few pains:\r\n\r\n - When a framework requires a tsconfig, you can\'t differentiate between your settings and their settings\r\n - Does anyone really know the right TSConfig for a node 10 vs node 12 app?\r\n - TypeScript\'s infinite backwards compat goals means that we don\'t have a way to get people to set flags the way we recommend\r\n\r\nThe last one is particularly tough for us, the \'recommended\' settings is basically the result of \'tsc --init` which is something someone does once per project and never again used. No versioning, and when we update - it\'s not even in the release notes.\r\n\r\n### [TSConfig Bases](https://github.com/tsconfig/bases)\r\n\r\nThis solves the problem by using NPM in the same way `@types` does. If you have a TypeScript node 12 project\r\n\r\nThen you add the dep:\r\n\r\n```sh\r\nnpm install --save-dev @tsconfig/node10\r\nyarn add --dev @tsconfig/node10\r\n```\r\n\r\nThen use [`extends`](https://www.staging-typescript.org/tsconfig#extends) to build on that base:\r\n\r\n```json\r\n{\r\n  ""extends"": ""@tsconfig/node12/tsconfig.json""\r\n}\r\n```\r\n\r\nThat\'s it as a consumer. Now when you add compiler flags, they are always for your project and not for the runtime target:\r\n\r\n```json\r\n{\r\n  ""extends"": ""@tsconfig/node12/tsconfig.json"",\r\n  ""compilerOptions"": {\r\n    ""strict"": true\r\n  }\r\n}\r\n```\r\n\r\n### Recommended\r\n\r\n[It\'s still a WIP](https://github.com/tsconfig/bases/pull/15), but I\'m trying to get consensus on a `@tsconfig/recommended` base which would be a base that we think most people should have set up. \r\n\r\n### Current\r\n\r\nI\'ve added base TSConfig files for these environments so far:\r\n\r\n- `deno`\r\n- `node10`\r\n- `node12`\r\n- `react-native`\r\n- `svelte`\r\n\r\n### Built in Deno \r\n\r\nThis is a project built in [Deno](https://deno.land) which, ironically enough, vendors out npm packages. It\'s mostly scripting and GitHub Actions but Deno makes a great scripting environment which I\'ve used again since.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'orta', 'comment_id': 653777655.0, 'datetime': '2020-07-04 15:15:22+00:00', 'masked_author': 'username_0', 'text': 'Now that foundations are down, I\'ve been plugging on some of the content holes in the docs.\r\n\r\n### Mixins Doc pt 2\r\n\r\nMixins are a design pattern which allows for multiple inheritance in class heirarchies. It\'s an interesting design pattern and TypeScript bends itself into some interesting shapes to support it. I ran a [docs design](https://github.com/microsoft/TypeScript/issues/39118) meeting with the rest of the team to figure out hw we should be documenting it and shipped a revised version of the docs.\r\n\r\nhttps://www.staging-typescript.org/docs/handbook/mixins.html\r\n\r\n### JavaScript Docs Section\r\n\r\nI\'ve taken all of the docs relating to JavaScript projects using TS-powered editors and added a few docs I had in PRs to create a new ""JavaScript"" section:\r\n\r\n- It covers the basics like `// @ts-check` and using JSDoc to get types\r\n- Then a deep dive into how TS infers JS\r\n- A JSDoc support reference\r\n- Then how to create .d.ts files from a JS project\r\n\r\nThis should provide a good starting point for people who use vanilla JS and want to get some extra tooling for little effort.\r\n\r\nhttps://www.staging-typescript.org/docs/handbook/intro-to-js-ts.html\r\n\r\n_Note: I\'m really happy with the twoslash support in the JSDoc reference. There\'s something cool about it proving the way the type system works which is much more satisfying then it is with just TypeScript for me._\r\n\r\n### Babel vs TS Doc\r\n\r\nWhen should you use TypeScript or Babel for TypeScript support? Good question and there\'s no simple 1-liner to answer that, so now there\'s a doc on it:\r\n\r\nhttps://www.staging-typescript.org/docs/handbook/tutorials/babel-with-typescript.html', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'orta', 'comment_id': 653931944.0, 'datetime': '2020-07-05 19:57:04+00:00', 'masked_author': 'username_0', 'text': '## Compiler-back Bug Repros\r\n\r\n![giphy-3](https://user-images.githubusercontent.com/49038/86540917-60879b00-bed6-11ea-874e-f73fe3f2ea2a.gif)\r\n[source](https://giphy.com/gifs/l3nSQg4ZcjBhbgzrq)\r\n\r\nKeeping on top of compiler bugs is hard work, even just hitting watch on the TypeScript repo gets you many hundreds of emails a day from GitHub. Proving and validating a bug is easier now, thanks to the Playground improvements (supporting many TS versions, a lot more compiler flags etc), but it\'s still hard to keep on top of and Ryan C basically lives in an almost permanent state of triage in our issues.\r\n\r\nTo give us the chance to improve our bug reports via automation, I wrote [an RFC pitching that we can support letting people write compiler backed bug reports](https://github.com/microsoft/TypeScript/issues/35389) in issues/comments which we can use to know when a bug is fixed, and if it has regressed in the future.\r\n\r\nThere are two parts to this system:\r\n\r\n - Making good bug reports\r\n - Verifying Bugs\r\n\r\n#### Making Good Bug Reports\r\n\r\nThis is done by offering a web-app which gives you real-time information about the bug report you are making. Here\'s an example of the bug workbench which shows an inconsistency in the way we present a particular type  ( https://github.com/microsoft/TypeScript/issues/39262 )\r\n\r\n<a href=""https://www.staging-typescript.org/dev/bug-workbench/?#code/PTAEAkHsDcFMCdQAMAqTQGcAWkDuHQBvUAQwC5QBWUAXwFgAoAFwE8AHWUFUAXlAAUAlgGMA1gB5i5KgBpQAIwoAiDE3iCAdgHMltOUpJKAfI0YgIMBMgAe6bHgJCxk0hUpzFoFWs069XwxMGcyg4RFQ7HHwiVypaRgATWGEAGxJ4TmFIDVVQFgoUMzBQEtKy0AA9AH5E5LSM0CycplBrAoBuIvLusurGIA""><img width=""1238"" alt=""Screen Shot 2020-07-05 at 3 19 02 PM"" src=""https://user-images.githubusercontent.com/49038/86540393-ef92b400-bed2-11ea-9607-1000a346916c.png""></a>\r\n\r\nThe app uses the same [twoslash](https://www.npmjs.com/package/@typescript/twoslash) syntax we use in [code snippets inside the TypeScript website](https://github.com/microsoft/TypeScript-Website/search?q=ts+twoslash&unscoped_q=ts+twoslash&type=Code) to highlight type information for a particular identifier. The workbench calls the results of these queries assertions, you can assert things like:\r\n\r\n- Compiler errors\r\n- What an identifier says it is (like above)\r\n- The emitted .js/.d.ts/.map files from a sample\r\n- Completion entries\r\n\r\nThe site\'s goal is to teach you the syntax, and get you making repros quickly, so there\'s a lot of documentation in the app:\r\n\r\n<a href=""https://www.staging-typescript.org/dev/bug-workbench/?#code/PTAEAkHsDcFMCdQAMAqTQGcAWkDuHQBvUAQwC5QBWUAXwFgAoAFwE8AHWUFUAXlAAUAlgGMA1gB5i5KgBpQAIwoAiDE3iCAdgHMltOUpJKAfI0YgIMBMgAe6bHgJCxk0hUpzFoFWs069XwxMGcyg4RFQ7HHwiVypaRgATWGEAGxJ4TmFIDVVQFgoUMzBQEtKy0AA9AH5E5LSM0CycplBrAoBuIvLusurGIA""><img width=""1238"" alt=""Screen Shot 2020-07-05 at 3 26 57 PM"" src=""https://user-images.githubusercontent.com/49038/86540510-fd950480-bed3-11ea-8594-eaef2c6478ba.png""></a>\r\n\r\nI\'ve been using it to write code samples for the TypeScript v2 website as it\'s faster than using my text editor and the CLI.\r\n\r\n#### Verifying Bugs\r\n\r\nOnce you\'ve got your repro, it gets pasted into an issue or a comment on an issue. From here it gets picker up by the verification tools. This is a GitHub Action you can find at [microsoft/TypeScript-Twoslash-Repro-Action](https://github.com/microsoft/TypeScript-Twoslash-Repro-Action/) and its job is to run nightly and provide useful information about the state of your compiler-backed bug report.\r\n\r\nYou would write a repro like:\r\n\r\n<img width=""1061"" alt=""Screen Shot 2020-07-05 at 3 04 33 PM"" src=""https://user-images.githubusercontent.com/49038/86540568-65e3e600-bed4-11ea-887a-35e1ca3968e6.png"">\r\n\r\nThen overnight the bot would post something like this:\r\n\r\n<img width=""1063"" alt=""Screen Shot 2020-07-05 at 3 32 17 PM"" src=""https://user-images.githubusercontent.com/49038/86540611-be1ae800-bed4-11ea-8fce-b8d1f983a885.png"">\r\n\r\nExpanding the historical section, you can see that the verification step has also checked the repro against older builds:\r\n\r\n<img width=""1065"" alt=""Screen Shot 2020-07-05 at 3 33 22 PM"" src=""https://user-images.githubusercontent.com/49038/86540663-f6222b00-bed4-11ea-806d-8351d40009c1.png"">\r\n\r\nSo, it looks like the bug only existed for 3.8 and 3.9. This bug was looked at after I created the repro and is actually fixed now, so the nightly run updates the original comment and posts _a new comment_ (so you get emails) telling you of the state changes and giving SHAs for the TypeScript releases between which the repro got different assertions so you can verify and 🎉 the fix.\r\n\r\n<img width=""1039"" alt=""Screen Shot 2020-07-05 at 3 37 29 PM"" src=""https://user-images.githubusercontent.com/49038/86540765-8496ac80-bed5-11ea-9a8a-1744504844cc.png"">\r\n\r\n--- \r\n\r\nThis should probably be put into action next week on the TypeScript repo, I mainly need to polish up the markdown that the bot posts and add a few integration tests, but the idea is now sound. Shout out to [@arcanis\'s Sherlock](https://github.com/arcanis/sherlock) which highly influenced this project.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'orta', 'comment_id': 654277700.0, 'datetime': '2020-07-06 14:36:29+00:00', 'masked_author': 'username_0', 'text': 'Saying that in a comment will trigger a job on Azure DevOps which builds and uploads a gzipped tarball. People can use\r\npeople can install TypeScript from this tarball via npm. I wanted to extend this process to start building a copy of the \r\nwebsite with that version also. \r\n\r\nThis turned out to be a one-line addition to the DevOps build, and used a feature of GitHub Actions which lets you \r\nsend trigger webhooks to a GitHub repo. These are called [repository dispatches](https://help.github.com/en/articles/events-that-trigger-workflows), \r\nand they\'re powerful but limited. A dispatch can include a 100-character string, in this case I had the publishing\r\nprocess send the pull request ID.\r\n\r\nThis string can be grabbed from a JSON file which you can find at `$GITHUB_EVENT_PATH`. This is enough information \r\nfor the rest of the workflow to find the tarball from the comments in the pull request, and use that to create the \r\nnecessary copies of monaco. \r\n\r\nTo hook that up, I added a new yml workflow file in the repo which is triggered when a repository dispatch event\r\nis received by GitHub:\r\n\r\n```yml\r\nname: Build a version of TypeScript on request\r\non: repository_dispatch\r\n\r\n# This workflow is triggered from an API call where XXX is your token\r\n# and YYY is the PR that it should look at.\r\n\r\n# curl https://api.github.com/repos/microsoft/typescript-make-monaco-builds/dispatches \\\r\n#   -XPOST \\\r\n#   -H \'Content-Type: application/json\' \\\r\n#   -H \'Accept: application/vnd.github.everest-preview+json\' \\\r\n#   -H ""Authorization: token XXX"" \\\r\n#   --data-binary \'{ ""event_type"": ""YYY"" }\'\r\n\r\njobs:\r\n  build:\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      - uses: actions/checkout@v1\r\n      - uses: actions/setup-node@v1\r\n        with:\r\n          node-version: ""10.x""\r\n          registry-url: ""https://registry.npmjs.org""\r\n\r\n      # Lets us use one-liner JSON manipulations on package.jsons\r\n      - run: ""npm install -g json""\r\n\r\n      - name: Publish PR Build\r\n        env:\r\n          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}\r\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\r\n\r\n        run: |\r\n          yarn install\r\n\r\n          PULL_REQUEST_NUMBER=$(json -f $GITHUB_EVENT_PATH action)\r\n          echo ""Publishing Monaco based on $PULL_REQUEST_NUMBER""\r\n\r\n        ...snip\r\n```\r\n\r\n## Release Deploys\r\n\r\nFinally, we need to be able to create release builds. These are triggered by creating a git tag for the version \r\nlocally, then pushing the tag up to the origin. The [tag workflow](https://github.com/microsoft/typescript-make-monaco-builds/blob/master/.github/workflows/ship_tags.yml) \r\nis almost the exact same as the [scheduled nightly workflow](https://github.com/microsoft/typescript-make-monaco-builds/blob/master/.github/workflows/nightly.yml).\r\n\r\n## Next Steps\r\n\r\nThat\'s it for GitHub Actions in building and deploying custom builds of the TypeScript playground. \r\n\r\nGitHub Actions takes a lot of the best practices in continuous integration services like in-repo config, shared actions\r\nand they provide a fast and consistent way to build automation into your daily work. \r\n\r\nBuilding off the webhook system is a powerful abstraction, and prior to GitHub Actions I spent about 2 years building\r\na similar system [called Peril](https://artsy.github.io/blog/2017/09/04/Introducing-Peril/). I feel good about where\r\nGitHub Actions is and where it will go. \r\n\r\n[m-ts]: https://github.com/microsoft/monaco-typescript/\r\n[m-ed]: https://github.com/microsoft/monaco-editor/', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'orta', 'comment_id': 657258766.0, 'datetime': '2020-07-12 18:31:41+00:00', 'masked_author': 'username_0', 'text': '### Playground Collab v2\r\n\r\nHey folks, this is as good a place to announce as anywhere else, but I\'ve shipped a new build of my multiplayer version of the Playground. The main goal was gross simplification.\r\n\r\nTo be frank, I\'m not building something as good as [live share](https://visualstudio.microsoft.com/services/live-share/) in my spare time, so I needed to figure out how to cut enough features that I could build it myself. My goal was to have something which works for 2+ people in a video/voice chat who can share a single Playground. E.g. our design meetings.\r\n\r\nThis actually means that I can cut features because you have a way to communicate, and it\'s not on this tool to do that:\r\n\r\n - Concurrent editing (""Hey, let me edit for a second"")\r\n - Realtime (""OK, look here"")\r\n - Perfect Presence, e.g. knowing you are the first in a room or last (""OK, I\'m heading out"")\r\n\r\nNow that it\'s actually feasible for me to build it. I set up a TypeScript owned [SignalR instance](https://dotnet.microsoft.com/apps/aspnet/signalr) which I essentially treat as a client-to-client multicast server. In v1 you used to log in via Oauth, in v2 there\'s no authentication - you just set a name, room and hit connect. \r\n\r\n![Screen Shot 2020-07-12 at 2 17 29 PM](https://user-images.githubusercontent.com/49038/87253595-76eba480-c44a-11ea-8f23-ce0e0991347e.png)\r\n\r\nI was generally embarrassed at how janky the authentication was. Auth is like the top of the user-funnel, and you want to just look at some code, it\'s not gonna be stored or too private if it fits into a playground. It didn\'t need to be there. Now it\'s trivial to set up and collaborate:\r\n\r\n![Screen Shot 2020-07-12 at 2 21 35 PM](https://user-images.githubusercontent.com/49038/87253670-01cc9f00-c44b-11ea-8d44-66c407e0a7d8.png)\r\n\r\nHow it works is every 3 seconds all connect clients send a message to each other which:\r\n\r\n - acknowledges they are still around\r\n - sends their room, username and selection in the editor\r\n - potentially includes a `lastRequestedWriteAccessTime`\r\n - maybe sends the new playground code if they have ever requested access `lastRequestedWriteAccessTime`\r\n - the time the message was sent\r\n\r\nEach client then keeps a map of the usernames to their last messages and updates the UI which is roughly:\r\n\r\n - Filter any users which haven\'t sent a message in 10s\r\n - Determine which user (including myself) requested access last\r\n - If it was themselves, then they still have write access otherwise stay in readonly mode\r\n - Update the code from the last sender\r\n - Update cursors in the browser\r\n\r\nYou can try it by clicking on this link: https://www.staging-typescript.org/play?install-plugin=playground-collaborate', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'orta', 'comment_id': 661355109.0, 'datetime': '2020-07-20 21:54:54+00:00', 'masked_author': 'username_0', 'text': ""Hi folks - got a 3 reasonably interesting updates from the weekend, first up, the site now has a color theme switcher for light/dark based on the work of @dandelionadia. There's no flash when you reload (usually noticeable when the choice is the opposite to your OS preference) and the design has space for allowing you to choose the code samples dark/light-ness in the future.\r\n\r\n![2020-07-20 17-28-18 2020-07-20 17_30_45](https://user-images.githubusercontent.com/49038/87988745-d41cd100-caae-11ea-9ed2-bac1634fdc7d.gif)\r\n\r\nNext up is that the final parts of the internationalization efforts is done. This is the work for getting all of the markdown documentation in order, which means per-language sidebars and individual pages. You can see here a lovely l33t-sp33k port of the Basic Types page in the docs.\r\n\r\n![Screen Shot 2020-07-20 at 5 39 49 PM](https://user-images.githubusercontent.com/49038/87989443-08dd5800-cab0-11ea-9777-e119120cd8d0.png)\r\n\r\nThis wraps up the final pieces of internationalization, with the site almost launched then hopefully we can get more languages fleshed out!\r\n\r\nFinally, a fun one is that the compiler-backed code samples infra I talked about earlier is now [up-and-running on microsoft/TypeScript](https://github.com/microsoft/TypeScript/labels/Has%20Repro) and I built out a bot for letting folks know when a repro has been requested or received on an issue making it a good way for people to test their 'is this a bug' skills\r\n\r\n![Screen Shot 2020-07-20 at 5 51 14 PM](https://user-images.githubusercontent.com/49038/87990260-a2593980-cab1-11ea-84d7-a3e286c467ba.png)"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'styfle', 'comment_id': 661373743.0, 'datetime': '2020-07-20 22:14:55+00:00', 'masked_author': 'username_2', 'text': 'Consider using a tri-state selector for the Theme, or at least default to the OS preference for Light/Dark mode.\r\n\r\nSee this thread for examples: https://twitter.com/username_2/status/1176875699526873089', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'orta', 'comment_id': 662416590.0, 'datetime': '2020-07-22 12:09:44+00:00', 'masked_author': 'username_0', 'text': ""It's not strictly TypeScript Web Infra, but I've been working with the Svelte team for the last few months on getting TypeScript support and tooling to feel native. It's pretty cool work, you can read more here: https://svelte.dev/blog/svelte-and-typescript"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'orta', 'comment_id': 663471663.0, 'datetime': '2020-07-24 10:22:57+00:00', 'masked_author': 'username_0', 'text': '## Deployment\r\n\r\nI\'m a pretty conservative programmer with respect to dependencies. I come from a native Mac/iOS background and basically everyone in that ecosystem is conservative. \r\n\r\nFor example, one of the threshold moments in my career was the rejection of of advice from an Apple developer rep when they said I should remove all my dependencies in our iOS app and write all the code myself ranging from image rendering to networking. I disagree now, and I disagreed then. Shared concerns can be shared with others. Understanding this is why I worked (and still occasionally help out) on the iOS dependency manager [CocoaPods](https://cocoapods.org) for almost a decade.\r\n\r\nThe JS eco-system won the race to the bottom for ease of sharing dependencies (did you know [you don\'t even need](https://github.com/npm/read-package-json#indexjs) a package.json for an npm module?) This has it\'s advantages for sure, but I think the trade-off for this scale is that you you lose some of the useful human elements in the automation to make it work. \r\n\r\n( There\'s a good book on where the balance in humans and machines can lay, [Machines of Loving Grace](https://www.harpercollins.com/products/machines-of-loving-grace-john-markoff) which details the battles between [AI](https://en.wikipedia.org/wiki/Artificial_intelligence) and [IA](https://en.wikipedia.org/wiki/Intelligence_amplification) where AI effectively won at our cultural loss. )\r\n\r\nThe symptoms of an over reliance on automation tends to be a lot of small dependencies with get hard to grok automated changelogs, a README covering a subset of the API, automatic deploys directly from master and often an embarrassingly large dependency tree ( the TS v2 website has an astounding 1,778 folders in node_modules despite my attempts to keep it down (but hey the pages loads in 0.x seconds and has close to no deps for users ) )\r\n\r\nI try to avoid some of these pitfalls when working in the JavaScript ecosystem, [Danger JS](https://danger.systems/js/) ([36](https://bundlephobia.com/result?p=danger) resolved deps) is a good example of a tool which can be used to provide more of a human touch to a project (by providing primitives for enforcing useful changelog entries, comparing READMEs to exposed APIs etc)\r\n\r\nOver the years, I\'ve accrued quite a few different ways to handle npm module deployment, and yesterday after making yet another new way to handle deploys I figured it was worth listing them and when they are a good fit.\r\n\r\n### PR Driven Deploys\r\n\r\nWhen basically all your source code contributors have write access (a.k.a work projects) then you can declare at the PR level whether merging this PR should trigger a deploy or not. The versioning system for patch, minor or major would be derived from labels. I started building this and then was pleased to discover that @hipstersmoothie had already got really far in the process via [auto](https://github.com/intuit/auto#readme) and opted to [write up how it worked instead](https://artsy.github.io/blog/2019/01/03/label-based-prs/).\r\n\r\n### Nightly Deploys if Needed\r\n\r\nFor projects which sometimes see a burst of activity, then periods of rest. For example in the [TSConfig bases repo](https://github.com/tsconfig/bases) which checks the git history and determines if there were changes before [deploying](https://github.com/tsconfig/bases/blob/master/.github/workflows/deploy.yml):\r\n\r\n```yml\r\n- run: |\r\n    # Have commits been added in the last day?\r\n    if [[ $(git log --pretty=format: --name-only --since=""1 days ago"") ]]; then\r\n      git log --pretty=format: --name-only --since=""1 days ago"" bases | deno run --allow-read --allow-run --allow-env scripts/deploy-npm-packages.ts\r\n    fi\r\n  env:\r\n    NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}\r\n  name: \'Deploy built packages to NPM\'\r\n```\r\n\r\nNightly deploy trains offer the chance to make sure everything is right before actually deploying. E.g. if contributors didn\'t add CHANGELOG entries, or if a human needs to re-run automation ahead of time.\r\n\r\nThis commit log checking style only works well if you are working with a single module, so for monorepos I have a [GitHub Action monorepo-deploy-nightly](https://github.com/username_0/monorepo-deploy-nightly) which is a bit more nuanced. We use this for nightly builds in the [Svelte Language Tools repo](https://github.com/sveltejs/language-tools/blob/master/.github/workflows/Deploy.yml) and I\'ll switch the TypeScript website deploys to this when v2 is on production.\r\n\r\n### Git Tag Based Deploys\r\n\r\nSome projects require a distinction between production and staging. Deployments to staging can be done on master merges or nightly that\'s pretty reasonable, then a production deploy can happen when you push a tag. This is how the Svelte [VS Code extension production deploys work](https://github.com/sveltejs/language-tools/blob/master/.github/workflows/DeployExtensionsProd.yml).\r\n\r\n### Comment Based Deploys\r\n\r\nThis is, in part, how TypeScript [deploys work](https://github.com/microsoft/TypeScript/wiki/Triggering-TypeScript-Bot) - here\'s [the start of the 4.0 infra](https://github.com/microsoft/TypeScript/issues/38510#issuecomment-647902563). A bot/GH action can be registered for issue comments, verify the author has write access and then start doing the work. You can use the search term chat-ops to find some [interesting ideas](https://speakerdeck.com/jnewland/chatops-at-github) around this.\r\n\r\n### Version Check Master Deploys\r\n\r\nThis is useful when you have a rarely edited but well used dependency, I added this to [dtslint](https://github.com/microsoft/dtslint/blob/master/.github/workflows/Deploy.yml) last night:\r\n\r\n```yml\r\nname: Deploy to npm\r\n\r\non:\r\n  push:\r\n    branches:\r\n      - main\r\n      - master\r\n\r\njobs:\r\n  deploy:\r\n    runs-on: ubuntu-latest\r\n\r\n    steps:\r\n      - uses: actions/checkout@v2\r\n      - uses: actions/setup-node@v1\r\n        with:\r\n          registry-url: ""https://registry.npmjs.org""\r\n\r\n      # Ensure everything is set up right\r\n      - run: ""npm install""\r\n      - run: ""npm test""\r\n\r\n      - uses: username_0/npm-should-deploy-action@main\r\n        id: check\r\n\r\n      - run: ""npm publish""\r\n        if: ${{ steps.check.outputs.deploy == \'true\' }}\r\n        env:\r\n          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}\r\n```\r\n\r\nI built out a GitHub Action which compares the package.json version against npm\'s and that has a build output of whether to deploy or not. This is a nice abstraction because it\'s secure, note that the npm auth token is in a completely separate step so even if that repo is compromised then the worst it can do to dtslint is tell it to  deploy at the wrong time which would fail.\r\n\r\nFor monorepos which only deploy to npm, like the TypeScript Website v2 I use [pleb](https://github.com/wixplosives/pleb) to deploy only when the versions have changed.\r\n\r\n### Manual Deploys\r\n\r\nFor Danger in JS and Ruby, I still deploy manually from my computer. These are more unique projects and that\'s because they are built on the [Moya Community Continuity Guidelines](https://github.com/Moya/contributors/blob/master/Contributing.md) - it\'s a set of cultural rules to enforce the long term life for impusername_0nt shared dependencies. \r\n\r\nBasically, if you get a PR merged you are automatically invited into the GitHub org with write access. We use the distinction of having the right to publish the final release to npm/rubygems/maven as being the distinction of core contributor vs someone who has the option to help out.  That means if I stop using ruby Danger (I did) and or disappear from the internet ([possible](https://slate.janrainsso.com//static/server.html?origin=http%3A%2F%2Fwww.slate.com%2Farticles%2Ftechnology%2Ftechnology%2F2012%2F03%2Fruby_ruby_on_rails_and__why_the_disappearance_of_one_of_the_world_s_most_beloved_computer_programmers_.html), but unlikely)  then others (~260) have the tools to step up and maintain the repo without me doing anything today.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'orta', 'comment_id': 664673740.0, 'datetime': '2020-07-27 22:38:11+00:00', 'masked_author': 'username_0', 'text': ""### Watch Me if You Can\r\n\r\nPopular web frameworks made in the last few years have a mode where you can start a local server and see changes as you press save. These are commonly known as watch modes. TypeScript has one!\r\n\r\n[Gatsby](https://www.gatsbyjs.org), the JS framework which the TypeScript v2 website is built on, is no stranger to a local build server. Gatsby's dev mode does a great job of keeping track of how changes should propagate through your dev build for example it understands that changing a markdown file should affect a particular page. It's fast and solid, I'm willing to trade some ahead-of-time work while it's setting up to get fast and accurate changes on save. \r\n\r\nNote: keep your eyes on [vitejs/vite](https://github.com/vitejs/vite) and [Snowpack](https://www.snowpack.dev) as a preview of what your JS tools will look like in 2-3 years. When things get drastically simpler due to ES Modules.\r\n \r\nIf the v2 site was a single project repo, then the Gatsby dev server would be enough. However, it's not. It's a monorepo of 12 packages with some being:\r\n\r\n- npm JS packages\r\n- web JS packages/bundles\r\n- logical groupings of documentation\r\n\r\nSome of these packages have watch modes, but to be fair, it's a bit of a hassle to run many watch mode servers as you're iterating - so what do you do? \r\n\r\nMy solution came from the pattern used in React Native under the hood, and that is the tool [Watchman](https://facebook.github.io/watchman/). \r\n\r\nWatchman is a native C++ library which uses your OS file change notification systems and provide a high-ish level API for other languages, JavaScript included.\r\n\r\nRunning `yarn start` on the TypeScript v2 monorepo starts up both the gatsby dev server and a watchman script via [concurrently](https://www.npmjs.com/package/concurrently). \r\n\r\nI made some changes to the structure of the monorepo in order to make a watcher for the whole repo, and that was to standardize on using `yarn build` in any package would trigger whatever work needed to be done. It was mostly already like this already.\r\n\r\nWith that done, I created a watchman script which monitors for changes in markdown, TypeScript and JSON files and figures out which package the changes come from. Then it runs `yarn workspace [workspace_name] run build` for that package.\r\n\r\nHere's [the file](https://github.com/microsoft/TypeScript-Website/blob/v2/watcher.js), but here's the general gist:\r\n\r\n```js\r\n// A script which uses Facebook's watchman to run `yarn build` in different modules\r\n// in a standard monorepo.\r\n\r\nconst watchman = require('fb-watchman')\r\nconst client = new watchman.Client({})\r\nconst chalk = require('chalk').default\r\n\r\nconst projectForFile = (file) => {\r\n  // skip triggering the watcher from derived files, Gatsby grabs those\r\n  if (file.name.includes('/dist/') || file.name.includes('/out/')) return\r\n  if (file.name.includes('/typescriptlang-org/')) return\r\n  if (file.name.startsWith('packages/')) {\r\n    return file.name.split('/')[1]\r\n  }\r\n}\r\n\r\nlet upcomingCommand = null\r\nlet currentProcess = null\r\n\r\n// All this is basically a bunch of boilerplate code to set up a watchman\r\n// for the project which looks only at .ts and .md files in the repo.\r\n\r\n// Startup watchman\r\nclient.command(['watch-project', process.cwd()], function (error, resp) {\r\n    // https://facebook.github.io/watchman/docs/cmd/subscribe.html\r\n  client.command(\r\n    [\r\n      'subscribe', root, 'Monorepo Builder',\r\n      {\r\n        expression: ['anyof', ['match', '*.ts'], ['match', '*.md'], ['match', '*.tsx'], ['match', '*.json']],\r\n        relative_root: path_prefix,\r\n        fields: ['name', 'exists', 'type'],\r\n      },\r\n    ],\r\n    // error handling\r\n  )\r\n\r\n  client.on('subscription', function (resp) {\r\n    // NOOP for changes large amounts of files (`yarn install`s)\r\n    if (resp.files.length > 10) return\r\n\r\n    // Get the changed files, convert it into an array of changed packages:\r\n    const projectsToBuild = resp.files.map(projectForFile).filter(Boolean)\r\n    const uniqueProjects = Array.from(new Set(projectsToBuild))\r\n\r\n    // For simplicity, I don't wanna handle multiple processes\r\n    const commandToRun = uniqueProjects.map((project) => {\r\n      const packageJSONPath = join('packages', project, 'package.json')\r\n      if (!existsSync(packageJSONPath)) return\r\n\r\n      // yarn workspaces uses the npm name, not the folder name\r\n[Truncated]\n      return buildCommand\r\n    })\r\n\r\n    if (commandToRun[0]) {\r\n      if (currentProcess) {\r\n        upcomingCommand = commandToRun[0]\r\n      } else {\r\n        runCommand(commandToRun[0])\r\n      }\r\n    }\r\n  })\r\n})\r\n\r\n\r\nconst runCommand = (argString) => {\r\n  // run the command via `execSync` etc\r\n}\r\n```\r\n\r\nThis means that as you work in any part of the monorepo with the dev server running, pressing save in any source file will trigger running `yarn workspace [workspace] run build` for that package. The results of building that package will then be picked up by Gatsby's dev server and you'll see the changes in your browser instantly."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'orta', 'comment_id': 668710483.0, 'datetime': '2020-08-04 16:55:26+00:00', 'masked_author': 'username_0', 'text': '<p align=""center""><img src=""https://media.giphy.com/media/3o6MbtZrZpYycziQLK/giphy.gif""></p>\r\n\r\nAlright, it\'s happening - I ran `gatsby init` a year ago and today I shipped the new deployment infra for the site (merged PRs go to staging, weekly pushed to prod on a Monday.) In a pleasant surprise all around, the deploy infra worked first time and so it\'s all out ahead of the announcements which should be appearing in an hour or so. \r\n\r\n### https://www.typescriptlang.org/\r\n\r\nOver the year, this project has bounced between the thing I work on full time and a side-project I keep running on TypeScript time. That said, the TypeScript website has been my only free time project since [Flappy Royale](https://flappyroyale.io) (with the svelte TS tooling being a necessary exception) and there\'s a part of me that really doesn\'t know what to do with that time now that getting the site done is less pressing. \r\n\r\nI\'m planning on doing a live Q&A today at 5:30 EST on the TypeScript Website: https://www.twitch.tv/username_0therox/schedule\r\n\r\nIn the mean time, I\'d like to give some thanks: \r\n\r\n- The TypeScript team, notably @DanielRosenwasser and @RyanCavanaugh whose ideas and code helped provide foundations, and who gave me the space to make it right\r\n\r\n- My wife, @dangermcshane who I regularly run copy, designs and ideas though - she\'s the perfect novice perspective\r\n\r\n- The folks in the TypeScript community & discord like @Gerrit0  @dream @d-fischer @MicahZoltu Keith @robertwestbury @Robinlemon @Ethan-Arrowood who use staging and give great feedback\r\n\r\n- The translators, who make the long long hours setting up translation infra worth it  @bobstrange @DuGlaser @sasurau4 @Quramy @KingDarBoja @fanyCaz @Kingwl @laosb @khaosdoctor @alvarocamillont @danilofuchs\r\n\r\n🍾 🚢', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'orta', 'comment_id': 675557535.0, 'datetime': '2020-08-18 15:44:47+00:00', 'masked_author': 'username_0', 'text': 'Small update on a cool project I built while I took a week off. \r\n\r\n### [Code Owner Self Merge](https://github.com/username_0/code-owner-self-merge)\r\n\r\nThis is a GitHub Action which can work on any repo to give people merge access on PRs only when files which they have access to change. It uses the existing [CODEOWNERS](https://github.blog/2017-07-06-introducing-code-owners/)\r\n infrastructure for defining the access control. We\'ve had a bunch of PRs self-merged into the TypeScript website now, so I\'ll walk you through how it\'s set up on the website. \r\n\r\n### From a Community Contributor\'s Perspective\r\n\r\nSomeone submits a PR, this PR only edits a single translation file in Portuguese\r\n\r\n![Screen Shot 2020-08-18 at 11 23 54 AM](https://user-images.githubusercontent.com/49038/90532617-729b6100-e145-11ea-83f8-6a85fdd809d6.png)\r\n\r\nThis triggers the usual CLA bot, and the Code Owner Self Merge Github Action also replies: it lets @khaosdoctor, @danilofuchs, and me know that this PR can be merged by any of us saying ""LGTM.""\r\n\r\nThe translation is reviewed, and then @danilofuchs says that the translation looks good and can be merged\r\n\r\n![Screen Shot 2020-08-18 at 11 27 47 AM](https://user-images.githubusercontent.com/49038/90532907-c9a13600-e145-11ea-8d8f-dd3e04ab1988.png)\r\n\r\nThis is a bit of a simplification ( see #926 for more context ) but this is how it looks like as someone contributing.\r\n\r\n### Under the Hood\r\n\r\nA GitHub Action can run against all sorts of webhooks, for this action we care about: PRs, issue comments and PR reviews. The workflow looks like this: [`.github/workflows/codeowners-merge.yml`](https://github.com/microsoft/TypeScript-website/blob/v2/.github/workflows/codeowners-merge.yml#L14)\r\n\r\n```yml\r\nname: Codeowners merging\r\non:\r\n  pull_request_target: { types: opened }\r\n  issue_comment: { types: created }\r\n  pull_request_review: { types: submitted }\r\n\r\njobs:\r\n  build:\r\n    runs-on: ubuntu-latest\r\n\r\n    steps:\r\n      - uses: actions/checkout@v1\r\n      - name: Run Codeowners merge check\r\n        env:\r\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\r\n        uses: username_0/code-owner-self-merge@master\r\n```\r\n\r\nThis means run the action whenever any of those events are triggered. \r\n\r\nThe first one is when a PR is made. The action looks up the CODEOWNERs file in the standard places, for this repo, it\'s at [`.github/CODEOWNERS`](https://github.com/microsoft/TypeScript-website/blob/v2/.github/CODEOWNERS). The relevant part of the current file is this:\r\n\r\n```sh\r\n# Collaborators for Portuguese Translation of the Website\r\npackages/playground-examples/copy/pt/**/*.md @khaosdoctor @danilofuchs @username_0\r\npackages/playground-examples/copy/pt/**/*.ts @khaosdoctor @danilofuchs @username_0\r\npackages/tsconfig-reference/copy/pt/**/*.md @khaosdoctor @danilofuchs @username_0\r\npackages/typescriptlang-org/src/copy/pt/**/*.ts @khaosdoctor @danilofuchs @username_0\r\npackages/typescriptlang-org/src/copy/pt.ts @khaosdoctor @danilofuchs @username_0\r\npackages/documentation/copy/pt/**/*.ts @khaosdoctor @danilofuchs @username_0\r\n```\r\n\r\nThese are a set of globs to different packages, and all the places where Portuguese translation occurs. It might remind you of how a `.gitignore` works.\r\n\r\nThe action determines the changed files via the GitHub API, for this PR it finds:\r\n\r\n- [`packages/playground-examples/copy/pt/TypeScript/Type Primitives/Tuples.ts`](https://github.com/microsoft/TypeScript-website/blob/v2/packages/playground-examples/copy/pt/TypeScript/Type%20Primitives/Tuples.ts)\r\n\r\nWhich fits the glob: `packages/playground-examples/copy/pt/**/*.ts`.\r\n\r\nThe action determines that `@khaosdoctor @danilofuchs @username_0` happen to be owners for _every edited file in the PR_, and so the action comments on the PR saying they have access to merge this PR.\r\n\r\nLater on, in either a review or a comment - if one of us three owners say ""LGTM"" then the action will merge the PR.\r\n\r\n--- \r\n\r\nI like systems like this. \r\n\r\nIt offers a privilege access to those who are doing useful work, and makes them not feel blocked by having to rely on someone on the TS team to merge their PRs. This is especially useful for translation PRs, I can\'t review those!\r\n\r\nThese contributors are donating their time, and our tooling can support it by getting us out of the way while knowing that this can\'t break the TS website.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'orta', 'comment_id': 679218263.0, 'datetime': '2020-08-24 16:04:47+00:00', 'masked_author': 'username_0', 'text': '### Twoslash 1.0 Release\r\n\r\nI think twoslash is now at a point where you probably don\'t need to read the source code to understand it, which is as good an indication as any to call it a 1.0. \r\n\r\nI\'ve taken the last few days to tighten the errors, add the features which are impusername_0nt for projects which _aren\'t_ the TS website and improved some of the infra surrounding it. Here\'s the state of the art:\r\n\r\n#### [`@typescript/twoslash`](https://www.npmjs.com/package/@typescript/twoslash)\r\n\r\nThe library twoslash is something which takes a code sample like:\r\n\r\n```ts\r\n// @filename: Component.tsx\r\nimport React from ""react""\r\n\r\nexport function Hello() {\r\n  return (\r\n    <div>\r\n      <h1>Hello World</h1>\r\n    </div>\r\n  )\r\n}\r\n\r\n// @filename: index.ts\r\nimport { Hello } from ""./Component""\r\nconsole.log(Hello)\r\n```\r\n\r\nThen it makes a virtual file system and typescript project, compiles it and pulls out a bunch of interesting metadata about the code. You could use twoslash to compile and validate code samples or repros of issues. It supports all the TSConfig options  and can basically wrap an entire app into a single file.\r\n\r\nRuns in web and node. On the web, you need to provide all the surrounding .d.ts files etc ([`@typescript/vfs`](https://www.npmjs.com/package/@typescript/vfs) can help there). On node, the vfs runs in a fake folder in your current project, so your node modules will be available to the vfs.\r\n\r\n### [`shiki-twoslash`](https://www.npmjs.com/package/shiki-twoslash)\r\n\r\nI originally built out just a Gatsby plugin, because that\'s all I needed for the TS site. This weekend I took all the  primitive functions for rendering twoslash related metadata into a new module which the Gatsby plugin uses.\r\n\r\nThis module provides high and low level APIs for syntax highlighting _any_ language [via shiki](https://shiki.matsu.io/), and then augmenting the results in two special cases:\r\n\r\n- When you declare a code sample as using twoslash code sample:\r\n    ![Screen Shot 2020-08-24 at 11 53 47 AM](https://user-images.githubusercontent.com/49038/91066957-52194e00-e600-11ea-84ca-8347e25e2813.png)\r\n\r\n- When a JSON declares it is a tsconfig:\r\n    ![Screen Shot 2020-08-24 at 11 55 53 AM](https://user-images.githubusercontent.com/49038/91067202-9d336100-e600-11ea-84a5-469f1df80ac6.png)\r\n\r\nThe Gatsby plugin is now about 80 lines of types and glue code. In testing out the API, I\'ve converted a complex [11ty website](https://github.com/ddprrt/ddprrt.github.io/pull/41) ([example page](https://ddprrt-github-io-git-fork-username_0-twoslash.ddprrt.vercel.app/typescript-and-es-modules/)) to use shiki-twoslash and I\'m open to looking at doing the same for next.js too.\r\n\r\nThese are the sort of tools I wish I had had when I was writing about TypeScript a few years back, and if you\'re a regular author of TypeScript posts with a JS build tool I\'ve not mentioned you can get in touch with me in the [TypeScript Discord](https://discord.gg/typescript) and we can figure out how to get your posts backed by the compiler also.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'orta', 'comment_id': 712364792.0, 'datetime': '2020-10-19 18:34:35+00:00', 'masked_author': 'username_0', 'text': ""### Sample SEO\r\n\r\nA few weeks ago I [fixed an issue](https://github.com/microsoft/TypeScript-Website/pull/1169) which meant that each playground sample had a corresponding `*.html` file in static HTML output, and the pages are now showing up in search engines. \r\n\r\n![Screen Shot 2020-10-19 at 1 45 40 PM](https://user-images.githubusercontent.com/49038/96492041-060a1480-1211-11eb-894c-688561dec4e6.png)\r\n\r\nThis means that we we can really target providing comprehensive answers to really specific questions, and get them in a place where people can find them. I've not really talked about this to anyone, so it seems like a reasonable topic to write-up.\r\n\r\n#### Why?\r\n\r\nOne of the problems with documenting any language is that it kinda covers a lot, and that sometimes the answer can be so deeply technical that most people don't need that exact answer. We often need to provide the same content at different levels of technical expertise ( e.g. look at the 4 getting started docs before the handbook ) and one thing the TS site was missing was small focused REPL-like examples which can give you an overview of the features in a way that encourages playing around.\r\n\r\nThis gave me the chance to build out a new section of docs in a way which I could use to test the waters for how the TS team thinks and reviews docs changes to the site and I tried to cover a lot of topics. I based the structure originally from a glossary I had been keeping of TypeScript terminology:\r\n\r\n```\r\ntree packages/playground-examples\r\n\r\n├── 3-7\r\n│   ├── Fixits\r\n│   │   ├── Big number literals.ts\r\n│   │   ├── Const to let.ts\r\n│   │   └── Infer From Usage Changes.ts\r\n│   ├── Syntax and Messaging\r\n│   │   ├── Flattened Error Reporting.ts\r\n│   │   ├── Nullish Coalescing.ts\r\n│   │   └── Optional Chaining.ts\r\n│   └── Types and Code Flow\r\n│       ├── Assertion Functions.ts\r\n│       ├── Recursive Type References.ts\r\n│       └── Uncalled Function Checks.ts\r\n├── 3-8\r\n│   ├── Breaking Changes\r\n│   │   └── Checking Unions with Index Signatures.ts\r\n│   ├── JSDoc Improvements\r\n│   │   └── Accessibility Modifiers.js\r\n│   └── Syntax and Messaging\r\n│       ├── Export Modules From.ts\r\n│       ├── Private Class Fields.ts\r\n│       └── Type Imports.tsx\r\n├── 4-0\r\n│   ├── New Checks\r\n│   │   └── Class Constructor Code Flow.ts\r\n│   ├── New JS Features\r\n│   │   ├── JSDoc Deprecated.ts\r\n│   │   ├── Logical Operators and Assignment.ts\r\n│   │   └── Nullish Coalescing.ts\r\n│   └── New TS Features\r\n│       ├── Named Tuples.ts\r\n│       ├── Unknown in Catch.ts\r\n│       └── Variadic Tuples.ts\r\n├── JavaScript\r\n│   ├── External APIs\r\n│   │   ├── TypeScript with Deno.ts\r\n│   │   ├── TypeScript with Node.js\r\n│   │   ├── TypeScript with React.tsx\r\n│   │   ├── TypeScript with Web.js\r\n│   │   └── TypeScript with WebGL.js\r\n│   ├── Functions with JavaScript\r\n│   │   ├── Function Chaining.ts\r\n│   │   ├── Generic Functions.ts\r\n│   │   └── Typing Functions.ts\r\n│   ├── Helping with JavaScript\r\n│   │   ├── Errors.ts\r\n│   │   └── Quick Fixes.ts\r\n│   ├── JavaScript Essentials\r\n│   │   ├── Code Flow.ts\r\n│   │   ├── Functions.ts\r\n│   │   ├── Hello World.ts\r\n│   │   └── Objects and Arrays.ts\r\n│   ├── Modern JavaScript\r\n│   │   ├── Async Await.ts\r\n│   │   ├── Immutability.ts\r\n│   │   ├── Import Export.ts\r\n│   │   └── JSDoc Support.js\r\n│   ├── README.md\r\n│   └── Working With Classes\r\n│       ├── Classes 101.ts\r\n│       ├── Generic Classes.ts\r\n│       ├── Mixins.ts\r\n│       └── This.ts\r\n[Truncated]\n![Screen Shot 2020-10-19 at 2 29 47 PM](https://user-images.githubusercontent.com/49038/96496415-3654b180-1217-11eb-886b-dcee1afda851.png)\r\n\r\nThen each page checks if you're a search engine or not, and forwards humans to the Playground:\r\n\r\n```tsx\r\nconst Play = (props: Props) => {\r\n  const i = createInternational<typeof headCopy>(useIntl())\r\n  useEffect(() => {\r\n    // Keep this page around so it is indexed on search engines\r\n    const isBot = /bot|google|baidu|bing|msn|duckduckbot|teoma|slurp|yandex/i.test(navigator.userAgent)\r\n    if (!isBot) {\r\n      // @ts-ignore - this is allowed in the DOM\r\n      document.location = withPrefix(props.pageContext.redirectHref)\r\n    }\r\n  }, [])\r\n```\r\n\r\nThis means that as we document features using Playground examples, they will be easily accessible for anyone with a search engine! This works across languages too, but I think we probably need a way to handle translating the title at some point.\r\n\r\n![Screen Shot 2020-10-19 at 2 36 37 PM](https://user-images.githubusercontent.com/49038/96497091-22f61600-1218-11eb-93d3-31fcd554e39f.png)"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'orta', 'comment_id': 767656106.0, 'datetime': '2021-01-26 16:19:10+00:00', 'masked_author': 'username_0', 'text': ""### Localized Localizations\r\n\r\nThere are about [700 pages](https://gist.github.com/username_0/8374959ee9f4eb22856defac0dcd1ae4) on the TS website today, with **over 1000 sections** localized into 9 languages by the community.\r\n\r\nThis rocks. I've mentioned it a bunch of times in this blog-issue-thing, but letting people learn in their own language is real impusername_0nt to me because it lowers the barriers of entry to TypeScript considerably.\r\n\r\nWe're getting to a point where the amount of PR traffic for the localizations is starting to dwarf PRs to the website, and that can make it hard to stay on top of the repo for anyone other than me. So, at the start of 2021, [I pitched](https://github.com/microsoft/TypeScript-Website/issues/1480) that I was planning on splitting the localizations out, and would make the tooling generic and available for others. This weekend I'll flip the switch to move the localizations out.\r\n\r\n\r\nAh, but what's in it for you dear constant reader? Well, if you are thinking of having a large corpus of localized markdown files, you can re-use:\r\n\r\n - [A CLI](https://github.com/OSS-Docs-Tools/sync) ( [`@oss-docs/sync`](https://www.npmjs.com/package/@oss-docs/sync) ) which handles:\r\n    - Pulling in localization folders to your app\r\n    - Bootstrapping a localization repo with the english from the app\r\n    - Updating a [set of issues per-lang](https://github.com/microsoft/TypeScript-Website-Localizations/issues?q=is%3Aissue+is%3Aopen+label%3A%22Translation+Summary%22) with TODO lists\r\n    - Validating the file structure between localizations and the canonical english files\r\n  \r\n- Tooling to allow people to [assign ownership to a sub-set of a repo](https://github.com/OSS-Docs-Tools/code-owner-self-merge#readme), and merge those PRs\r\n- Tooling to [generate JSON files of attribution](https://github.com/OSS-Docs-Tools/create-attribution-json) for localization efforts\r\n- An [example Dangerfile](https://github.com/microsoft/TypeScript-Website-Localizations/blob/61ce630be78089dce4dd858a192f34afb492777f/dangerfile.ts) which uses Azure translations to show the English for any translated doc\r\n\r\nAll of these tools lives under a new GitHub org [OSS-Docs-Tools](https://github.com/OSS-Docs-Tools) (with a logo designed by my wife, Danger) and are usable out of the box today. There are some trivial example repos in the org, but the real production case is https://github.com/microsoft/TypeScript-Website-Localizations/"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'orta', 'comment_id': 770955662.0, 'datetime': '2021-02-01 15:50:33+00:00', 'masked_author': 'username_0', 'text': 'https://user-images.githubusercontent.com/49038/106480889-c6a3c300-64a3-11eb-96ef-8b9c9f99d260.mp4\r\n\r\n## Trust, but verify\r\n\r\nI realized after reading @nayafia\'s book [""Working in Public""](https://press.stripe.com/#working-in-public) ( [this is a good primer](https://blas.com/working-in-public/) for those who haven\'t read it ) that I have been working on the problem of scaling human issues inside OSS communities for about 7 years now. As originally, I hit these problems working on the iOS dependency manager CocoaPods back in 2014.\r\n\r\nJust like with TypeScript, for any non-trivial OSS project there\'s nearly always a small team of core contributors and _a lot_ of issue feedback and drive-by PRs which can get overwhelming, even when working full time on OSS. In this case a side project (localizations) of a side project (website) for TypeScript can still generate a lot of traffic. There were 10 localization PRs last week and as someone who can speak English (and barely get by with Portuguese) - I cannot provide constructive feedback on a Japanese translation PR. So, how can I handle the growing needs of contributors without burning myself out trying to really get to grips with each language?\r\n\r\nMy technique has been through rigorous application of automation which **helps maintainers put more trust in contributors**. \r\n\r\nI\'ve just wrapped up moving the localization infra to a separate repo, and would like to cover the security model of how I let it more-or-less run without the TypeScript team\'s direct involvement. \r\n\r\nJust to get you up-to-date, the TypeScript website is a static site which reads markdown documents, TSX files and info from the TypeScript compiler to generate a set of HTML files [using Gatsby](#issuecomment-577445454). Localization is handled by file shadowing: e.g. a lookup for a markdown document will first look up for the locale specific version `docs/typescriptlang/es/es.ts` and if that fails then it will use the English version `docs/typescriptlang/en/en.ts`. The process of importing translations is effectively a well placed `cp -r` which occurs across repos. \r\n  \r\n### Narrowing the Safe Changes\r\n\r\nAt a pull request level, we can determine how ""safe"" a change is by looking at what files have changed. Does this change affect files which aren\'t localization related (e.g. the `package.json` or script files) then that needs to be handled my a maintainer. However, if all the changes are localization changes which occur in the same language? If so, then someone who ""owns"" that language should have the right to merge those PRs when green.\r\n\r\nThis idea is a simplification of the far more complex [DefinitelyTyped access rights system](https://github.com/definitelytyped/definitelytyped/#make-a-pull-request). In the localization repo, this is handled by re-using the [system of code-owners](https://github.blog/2017-07-06-introducing-code-owners/) which GitHub introduced back in 2017. The GitHub implementation is for reviewers, and so people without write-access to the repo cannot be assigned to review, there is a GitHub Action [OSS-Docs-Tools/code-owner-self-merge](https://github.com/OSS-Docs-Tools/code-owner-self-merge) which turns it into an authentication system for external contributors.\r\n\r\nHow it works is that if someone included in the codeowners owns _all_ files in a Pull Request, then they have the ability to request that it get merged via the GitHub Action:\r\n\r\n```sh\r\n# Collaborators for Portuguese Translation of the Website\r\ndocs/playground/pt @khaosdoctor @danilofuchs [translation] [pt]\r\ndocs/tsconfig/pt/**/*.md @khaosdoctor @danilofuchs [translation] [pt]\r\ndocs/typescriptlang/pt/**/*.ts @khaosdoctor @danilofuchs [translation] [pt]\r\ndocs/documentation/pt/**/*.md @khaosdoctor @danilofuchs [translation] [pt]\r\n```\r\n\r\nHere\'s some example of files in a PR, and whether @khaosdoctor and @danilofuchs can merge:\r\n\r\n- :white_check_mark:: `docs/documentation/pt/tutorials/Babel with TypeScript.md`, `docs/playground/pt/Playground/Config/JavaScript Playgrounds.js`\r\n- :x:: `README.md`, `docs/documentation/pt/tutorials/Babel with TypeScript.md`\r\n- :x:: `docs/documentation/ko/tutorials/Babel with TypeScript.md`\r\n\r\nThis means that the maintainers can know that people who are just working on the content in the repo are working on their own section, and not touching infrastructure files (or disabling the CI etc.)\r\n\r\nThis linter isn\'t some fancy re-usable CLI tool, [it\'s ~300 lines of JavaScript](https://github.com/microsoft/TypeScript-Website-Localizations/blob/main/scripts/lint.js).\r\n\r\n### Non-breaking Changes\r\n\r\nIf the localization repo was only simple markdown documents, maybe the above would be enough. However, the markdown documents have specific metadata, and compiler-backed code samples which can throw. Even worse, the inline localizations (like the text for the navigation) are _actually evaluated code_. Hrm. \r\n\r\nSo, the repo has a pretty strict linter to help give fast feedback to contributors. For the markdown documents, it runs the same library ([twoslash](https://www.npmjs.com/package/@typescript/twoslash)) and will validate the YML metadata.\r\n\r\nFor the code, the linter uses the TypeScript API to validate the `*.ts` files which are evaluated doesn\'t do anything un-expected. Unexpected when working with JavaScript is a pretty regular occurrence, so what the linter does is demand a pretty exact ""shape"" of a file. There are two possible types:\r\n\r\n```ts\r\nexport const navCopy = {\r\n  skip_to_content: ""Lewati ke konten"",\r\n  nav_documentation: ""Dokumentasi"",\r\n  nav_documentation_short: ""Dokumentasi"",\r\n}\r\n```\r\n\r\nThis file is validated to always be a single export which is a const, that creates an object with static strings. Template strings are also allowed, but not ones which use `${}` to evaluate code.\r\n\r\nThe other sort of files looks like:\r\n\r\n```ts\r\nimport { defineMessages } from ""react-intl""\r\nimport { playCopy } from ""./playground""\r\nimport { Copy, messages as englishMessages } from ""../en/en""\r\n\r\nexport const lang: Copy = defineMessages({\r\n  ...englishMessages,\r\n  ...playCopy,\r\n})\r\n```\r\n\r\nEvery import is validated, there\'s only allowed to be the one export statement which has to then be the function `defineMessages`, then the only things allowed inside that function call are spreads.\r\n\r\nThese linter rules use the TypeScript AST, so they allow for flexibility in the names and whitespacing etc - but don\'t allow for the way the code works to change.\r\n\r\nAll of these linter checks run on CI, and the GitHub Action won\'t allow people to merge PRs which are not green. This means we can trust that changes to the evaluated code don\'t cause un-expected behavior in the the TypeScript website.\r\n\r\n### Easy Introspection\r\n\r\nFinally, there\'s one more automation point which is that a comment is added to any translation PR which translates it to English in the comments. This is done via Danger and an Azure API - it\'s a nice way for us to have a check over contentious localization changes and offer some sort of insight. \r\n\r\n### GitHub Checked\r\n\r\nWith all of these validations in place, it\'s feasible to have a secondary authentication system in a repo which allows for people without write access to maintain their own sections of the codebase without breaking the upstream project which depends on it. Making life easier for people who want to translate, and simpler for maintainers who can\'t provide _all_ of the useful feedback they\'d need.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'orta', 'comment_id': 809508862.0, 'datetime': '2021-03-29 16:05:49+00:00', 'masked_author': 'username_0', 'text': '### How I built the Playground Plugins infra\r\n\r\nI gave a [talk at TSConf 2020 on Playground Plugins](https://www.youtube.com/watch?v=eJWtTl62gy0&list=PL2z7rCjEG2ks2G0dcBmXuROUnDJP0ivAH&index=13) which generated quite a few questions about _how_ this was built technically. \r\n\r\nI think there are mainly two parts which are worth discussing, how code connects and how to think about the dev experience.\r\n\r\n### Running the Code\r\n\r\nTo connect the JavaScript files in the browser, you need a loader of some form. In my case, I was already using the [vscode-loader](https://github.com/Microsoft/vscode-loader) for [Monaco](https://microsoft.github.io/monaco-editor/) (the code text editor). This uses [AMD modules](https://requirejs.org/docs/whyamd.html), [here you can see how TS](https://www.typescriptlang.org/tsconfig/#module) supports it. I wouldn\'t be too surprised if this could be done entirely in ESM today, but this was built before ESM in browsers were stable.\r\n\r\nThe vscode-loader setup which occurs way before any plugin code runs: \r\n\r\n```ts\r\n // @ts-ignore\r\nconst re: any = global.require\r\nre.config({\r\n  paths: {\r\n    vs: urlForMonaco,\r\n    ""typescript-sandbox"": withPrefix(\'/js/sandbox\'),\r\n    ""typescript-playground"": withPrefix(\'/js/playground\'),\r\n    ""unpkg"": ""https://unpkg.com/"",\r\n    ""local"": ""http://localhost:5000""\r\n  },\r\n  ignoreDuplicateModules: [""vs/editor/editor.main""],\r\n  catchError: true,\r\n  onError: function (err) { ... }\r\n});\r\n```\r\n\r\nThis lets you require a url like `unpkg/danger/index.js` which is treated like ""https://unpkg.com/danger/index.js"". \r\nThe playground plugins rely on unpkg to host the Plugin\'s JavaScript, and [the site assumes](https://github.com/microsoft/TypeScript-website/blob/be39639ba4af895a15f4392d0e5a763f87cc0168/packages/playground/src/index.ts#L523) that a plugin will always have an `index.js` in the root.\r\n\r\n```ts\r\nconst downloadPlugin = (plugin: string, autoEnable: boolean) => {\r\n  try {\r\n    // @ts-ignore\r\n    const re = window.require\r\n    re([`unpkg/${plugin}@latest/dist/index`], (devPlugin: PlaygroundPlugin) => {\r\n      activateExternalPlugin(devPlugin, autoEnable)\r\n    })\r\n  } catch (error) {\r\n    console.error(""Problem loading up the plugin:"", plugin)\r\n    console.error(error)\r\n  }\r\n}\r\n```\r\n\r\nFrom here we allow for factory plugins instead, [and register the plugin](https://github.com/microsoft/TypeScript-website/blob/be39639ba4af895a15f4392d0e5a763f87cc0168/packages/playground/src/index.ts#L523)\r\n\r\n```ts\r\nif (typeof plugin === ""function"") {\r\n  const utils = createUtils(sandbox, react)\r\n  readyPlugin = plugin(utils)\r\n} else {\r\n  readyPlugin = plugin\r\n}\r\n\r\n// ...\r\n\r\nplayground.registerPlugin(readyPlugin)\r\n```\r\n\r\nCheck whether it wants to be at the front, and if so, activate it:\r\n\r\n```ts\r\n// Auto-select the dev plugin\r\nconst pluginWantsFront = readyPlugin.shouldBeSelected && readyPlugin.shouldBeSelected()\r\n\r\nif (pluginWantsFront || autoActivate) {\r\n  // Auto-select the dev plugin\r\n  activatePlugin(readyPlugin, getCurrentPlugin(), sandbox, tabBar, container)\r\n}\r\n```\r\n\r\nPlugins are kept inside [an array](https://github.com/microsoft/TypeScript-website/blob/be39639ba4af895a15f4392d0e5a763f87cc0168/packages/playground/src/index.ts#L91) in the Playground which sets the order for the tabs. \r\nThere are a set of built-in plugins which provide the JS, .d.ts, Logs etc which are passed in at launch. By being configuarble we can support playgrounds with different default plugins like the [bug-workbench](https://www.typescriptlang.org/dev/bug-workbench/).\r\n\r\nNew user-defined plugins are push\'d into that array, and are controlled with the same APIs as the built-in infra. The list of npm packages you\'ve requested gets stored in localStorage and is pulled out on a reload and grabbed on launch.\r\n\r\n### Development Experience\r\n[Truncated]\n    /** Get all the different emitted files after TypeScript is run */\r\n    getEmitResult,\r\n    /** Gets just the JavaScript for your sandbox, will transpile if in TS only */\r\n    getRunnableJS,\r\n    /** Gets the DTS output of the main code in the editor */\r\n    getDTSForCode,\r\n    /** The monaco-editor dom node, used for showing/hiding the editor */\r\n    getDomNode,\r\n    /** The model is an object which monaco uses to keep track of text in the editor. Use this to directly modify the text in the editor */\r\n    getModel,\r\n    /** Gets the text of the main model, which is the text in the editor */\r\n    getText,\r\n    /** Shortcut for setting the model\'s text content which would update the editor */\r\n    setText,\r\n    /** Gets the AST of the current text in monaco - uses `createTSProgram`, so the performance caveat applies there too */\r\n    getAST,\r\n    // ...\r\n```\'\r\n\r\nI exclusively use these APIs in all the built-in plugins, and only really special-case the Logs/Errors plugins because they are connected to a lot more parts of the playground. That dog-fooding means they\'re pretty solid for plugin authors.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'Tats528', 'comment_id': 894904161.0, 'datetime': '2021-08-09 01:47:21+00:00', 'masked_author': 'username_3', 'text': '_Sent from my SM-S767VL using [FastHub](https://play.google.com/store/apps/details?id=com.fastaccess.github)_', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'orta', 'comment_id': 955249853.0, 'datetime': '2021-10-30 14:44:24+00:00', 'masked_author': 'username_0', 'text': '<img width=""100%"" alt=""tt-2"" src=""https://user-images.githubusercontent.com/49038/139537400-e184dfe5-ebb1-429b-8cfc-3875b8dbbcc6.png"">\r\n\r\n## Writing Puzzles for Developers\r\n\r\nI\'ve just wrapped up the second series of [`Type | Treat`](https://dev.to/username_0/series/15226) for TypeScript, which marks another 20 separate code challenges targeted at two different sets of developers. I thought it might be interesting to talk a bit about the process and cover some of the thinking which goes on behind the scenes.\r\n\r\n### How I Try To Structure Puzzles\r\n\r\nThere\'s this perfect 5 minute YouTube video from [Game Maker\'s Toolkit](https://www.youtube.com/channel/UCqJ-Xo29CKyLTjn6z2XwYAw) on the philosophy which I have tried to apply when thinking about each puzzle: [Super Mario 3D World\'s 4 Step Level Design](https://www.youtube.com/watch?v=dBmIkEvEBtA).\r\n\r\n[Koichi Hayashida](https://nintendo.fandom.com/wiki/Koichi_Hayashida) is the co-director of Super Mario 3D World, and roughly his puzzle philosophy is:\r\n\r\n- Teach in a safe environment\r\n- Develop on that idea in a way which pushes you\r\n- Twist the concept so that you need to think about it from another angle\r\n- Conclude with something to show off your new skills\r\n\r\nWhile I\'ve not succeeded in hitting all of these points in every puzzle, that is the goal for each challenge. In the context of `Type | Treat` we don\'t necessarily have to worry about the safe environment because the Playground provides that as a baseline. This means that we want to introduce some sort of syntax/idea, improve on your knowledge with some difficulty then give you something cool to show off with your new skills. Ideally completing a challenge should make you think ""oh, this could improve our X in the codebase"".\r\n\r\n### Writing Process\r\n\r\nCreating each of the 40 puzzles is a multi-step process:\r\n\r\n1. Find 2 interesting bits of code to play with in the Playground. This takes about 2 to 4 hours for them both. I have a list of \'things which could be interesting\', I re-read through TypeScript release notes, the handbook, and look through the questions posted inside the TypeScript Community Discord to see if there\'s something which feels useful in a general sense. e.g. not something just for describing JS patterns, but useful for people only writing TypeScript. Then I figure out if the Playground is a good environment for showing these samples, and if the docs cover it well.\r\n\r\n1. I\'ll then start looking at what sort of individual concepts do you need to know in order to understand this code. This usually takes about an hour. Sometimes this can be as simple as looking at each part of the syntax, but often it can be about understanding why you might need that syntax by first understanding the limitation of the prior version. This helps to understand what necessary steps there should be in the challenge. For example, here\'s a first draft I had for [2021 Beginners 4](https://www.typescriptlang.org/play?#gist/927ccc66ae3022dc64c4f650109b937a-13) which I wanted people to use `X extends Y` in a generic:\r\n\r\n   ```ts\r\n   // Step 1\r\n   function abc(a: any) {\r\n      return { c: a }\r\n   }\r\n   // to \r\n   function abc2<T>(a: T) {\r\n        return { c: a }\r\n   }\r\n\r\n   // Step 2\r\n   function abc3<T>(a: T) {\r\n        return { c: a }\r\n   }\r\n   // to \r\n   function abc4<T extends { foo: () => void }>(a: T) {\r\n        a.foo()\r\n        return { c: a }\r\n   }\r\n   ```\r\n\r\n1. I peer review the drafts by reaching out to few people at roughly the skill level I\'m targeting.\r\n1. Next I start to apply the theme and that often provides a fresh perspective on the problem, this sometimes can lead to evolving the puzzle based on what some has learned in the last challenge. This takes about an hour or two.\r\n1. I peer review the themed versions more publicly\r\n1. While peer review is going on, I start to write up the answers for the previous challenges. It\'s tempting to write these at right after writing the puzzles, but the feedback given when the posts go live usually influences the writeup anyway. We get some un-anticipated creative answers which deserve highlighting.\r\n1. Refinement from peer review, update gists, deploy blogs, write tweet :ship:\r\n\r\nIn real-world times it comes to about 10 hours each days, and are super mentally taxing - so I usually take some time off the next week. \r\n\r\n### Difficulty\r\n\r\nI learned quite early in my career that making [a hard opponent is easy](https://www.escapistmagazine.com/review-arcade-hockey-iphone/) but making a fair one is hard. With these challenges it can be quite hard to figure out how difficult a concept is to learn (because I\'ve already learned it) and in part that\'s why there\'s multiple peer review steps. \r\n\r\nThe tools I use to modify the difficulty of a puzzle are:\r\n\r\n- Comments with ""quotes"" in them, are usually exact search terms to find the related problem\r\n- Comments with irregular grammar ""can you find the key of the type of"" \r\n- Adding/removing steps for incremental built-outs\r\n- Building on prior\'s examples\r\n- Variable names \r\n- Providing explicit hints in the comments (especially if we\'ve figure a way it can go off the rails)\r\n\r\nI don\'t expect someone to figure out syntax from first principles, so it\'s usually a good assumption that if someone is experienced enough to know these puzzles exist - they know that they can search ""[term] typescript"" in DuckDuckGo to find something related. I try to make sure there\'s always at least one clue which can be searchable in every puzzle.\r\n\r\n### 2021 Preparation\r\n\r\nUnlike 2020, which we were roughly guessing the format, we knew what 2021\'s version of `Type | Treat` would look like. So, I took some time to address what I felt was its biggest shortcoming. The system was a complex set of links across many blog posts. This is perfect for a \'does this work\' but now that we know it does work, I thought we could improve on that by adding some sort of native \'multi-file\' support to the Playground. There\'s probably a blog post in the thinking behind the different ideas we have for handling multiple files in a Playground once it\'s settled. \r\n\r\nFor `Type | Treat` 2021 my approach was to build a generically useful GitHub Gist viewer, leaving the ""write"" interface entirely to GitHub\'s (admittedly pretty rough) gist editor. I used [GistPad](https://marketplace.visualstudio.com/items?itemName=vsls-contrib.gistfs) to edit a set of gists (2020/staging/production) which made sharing and reviewing much easier. This also means anyone can replicate this sort of experience if they want.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'malato2021ma', 'comment_id': 1007902587.0, 'datetime': '2022-01-08 07:37:01+00:00', 'masked_author': 'username_4', 'text': 'malato2021', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'orta', 'comment_id': 1017732130.0, 'datetime': '2022-01-20 17:14:50+00:00', 'masked_author': 'username_0', 'text': '### Direct Support for Technical Communities\r\n\r\nWhen I started trying to scope out what the community side of the TypeScript web presence could look like, I thought about what sort of support paths are available to people using the language. \r\n\r\n- TypeScript\'s issues are focused on bugs and feature requests for the language\r\n- Stack Overflow is a reasonable (if often outdated) way to post a question and get a few responses\r\n- [Gitter](https://gitter.im/Microsoft/TypeScript) was recommended if you had DefinitelyTyped questions\r\n- There is subreddit in [/r/typescript](https://www.reddit.com/r/typescript/)\r\n\r\nI think the Gitter came from the original open-source project and then was inherited by the TypeScript team [with the project](https://blog.username_1.com/2019/10/08/definitely-typed-movie/). We have someone on the TS team on rotation, but not everyone would use the Gitter.\r\n\r\nSo, if you were looking for help on a TypeScript problem where do you go? Stack Overflow is a good bet but there\'s a lot of people who don\'t post questions on Stack Overflow ([myself included](https://stackoverflow.com/users/385754/username_0?tab=questions).) That left the Gitter for one-on-one questions, but Gitter\'s future is still a bit debatable as post-acquisition by GitLab the codebase has been on maintenance only mode and you only get one channel. We\'d struggle to handle the size of the TS community in one channel.\r\n\r\nThe other angle I was interested in was to consolidate the random chats for the different TypeScript meetups/conferences, remember this was the before-times. The 2019 meetup / conference scene was super active, and making their lives easier was high on my TODO because it was one of the ways in which I grew as an engineer and I wanted others to have that chance. \r\n\r\nSo, we wanted a system like Slack or Discord. GitHub Discussions didn\'t exist at this time, and I think is worth considering about today. I think GitHub Discussions would make a good localized Stack Overflow replacement but will probably not be a place to hang out. GitHub\'s a bit too formal for that.\r\n\r\nThinking about Slack vs Discord in 2019, the writing was largely on the wall for developer communities on Slack, it was something people put quite a lot of effort into making it work, but Slack wasn\'t too interested in communities and it showed. Having seen a few teams go from Slack to Spectrum and then Discord. I figured we should just jump straight to Discord. \r\n\r\nA naive approach would have been to click \'Create new Discord\', but I think there\'s a tension there. Outside of myself, I couldn\'t (and wouldn\'t) guarantee the time of the TypeScript compiler team to actually be there to bootstrap it, moderate it and scale it. Instead, I looked at existing Discords for TypeScript and opted to talk to the admins for the ""TypeScript Community Discord"" which had 200-300 members which had shown up in Reddit once or twice.\r\n\r\nI effectively offered a trade: I can spend work time helping you to scale the community and start directing folks to this Discord, in exchange we\'ll need to set up things like Codes of Conducts, start moderating more strictly and give at least one person on the TS team moderator access. I will be here to offer a hand, but it\'s still your community to run. They were happy with these trade-off, and so we did a few things:\r\n\r\n- Audit all existing channels\r\n- Create a new GitHub org for [governance docs](https://github.com/typescript-community/governance)\r\n- Migrate [the bot](https://github.com/typescript-community/community-bot) to that org\r\n    - Initially we made the bot delete any message with a swear word (you can\'t edit other people\'s messages in Discord) - this got turned off after about 6 months (because it rarely needed to happen), but was quite contentious.\r\n\r\n\r\nOver the last two years we invested in a few places:\r\n\r\n### Help Channels\r\n\r\nWhen I joined the Discord, there were two separate help channels. Once we hit ~10k members this was not scaling. Discord did not support threading at the time, and so we modified the bot into a clever and nuanced system which can handle many help simultaneous requests by cycling a set of channels between being public or archived (for example there\'s 15 active help channels as I write this, and 18 archived. Which means we\'ve peaked at 33-2 concurrent help channels. ) \r\n\r\nGiven how fundamental the help system is to the discord, it is in continual evolution - there\'s been some interesting proposals to move it to threads and there\'s a generic bot which offers this for [anyone here](https://needle.gg).\r\n\r\n### Related Communities\r\n\r\nOriginally we migrated in meetups to the discord, but over time as meetups stalled from the lockdowns, so did those channels. Instead we found that quite organically it started to make sense to host a channel for projects which were heavily reliant on TypeScript. For example [TypeDoc](https://typedoc.org) and [ts-node](https://www.npmjs.com/package/ts-node) are there, as well as some more generalized channels for some of the biggest libraries.\r\n\r\n### Migrating Official Channels into Discord\r\n\r\nAfter the discord settled, we migrated DefinitelyTyped support from Gitter into a channel in discord and created similar channels for handling contributing to the website/playground and localization.\r\n\r\n### Occasional Events\r\n\r\nWe ran a TypeScript Q&A on a release, and in theory could do that again sometime. I\'m seeing other discords (like [RedwoodJS](https://discord.gg/jjSYEQd) or [Svelte\'s](https://discord.gg/yy75DKs)) doing interesting things with video tutorials, workshops and live podcasts. Maybe there\'s space for doing events like that in the TypeScript Community discord.\r\n\r\n## Would I Do It Differently Now?\r\n\r\nI think I\'d still opt for something like Discord for TypeScript today, 2+ years later. The same team who were moderating when I joined are still actively running the show, so I feel like it was a good trade for them, and there\'s a few regulars from the DefinitelyTyped Gitter now helping out with moderation in the Discord.', 'title': None, 'type': 'comment'}
 {'action': 'closed', 'author': 'orta', 'comment_id': None, 'datetime': '2022-01-21 13:14:57+00:00', 'masked_author': 'username_0', 'text': '', 'title': None, 'type': 'issue'}
 {'action': 'created', 'author': 'orta', 'comment_id': 1018494975.0, 'datetime': '2022-01-21 13:14:57+00:00', 'masked_author': 'username_0', 'text': ""**Wrapping up this mini-blog**. Hey folks, thanks for subscribing to my issue where I kept folks in the know on what was going on in the web/community infra for TypeScript. This issue provided a great way to write up some of the smaller wins and design decisions which would typically be kept internal because it's not big enough for the main TypeScript blog. \r\n\r\nToday is my [last day](https://twitter.com/username_0/status/1484485488484532224) on the TypeScript team and so it feels like the right time to close this issue up and remove it from the website footer - when I interviewed for this role, I gave a metaphor that TypeScript is a medieval castle and there's an incredibly large village growing around it which needs some thinking about. A few years later, I'm happy to go back to being a villager instead of a town planner now that we're in a good place. I'll still be around in the TypeScript Community Discord or Twitter (@username_0) if you are interested in how things are going or have questions about how it all works."", 'title': None, 'type': 'comment'}]","<issue_start><issue_comment>Title: 💌📯 Updates
username_0: If you are interested on updates to the TypeScript web infra, you can subscribe to this issue. I'll comments with project updates. I try to do 3 days on web infra, and 2 days on compiler things a week, so there should be some progress every week or two.

Long term roadmaps:

- Website Vision https://github.com/microsoft/TypeScript-Website/issues/94
- Internationalization https://github.com/microsoft/TypeScript-Website/issues/100
- Community Section https://github.com/microsoft/TypeScript-Website/issues/63

A lot of progress happens on the v2 branch of the TypeScript website repo, the results of this is attached to the main website under a folder called v2: https://www.typescriptlang.org/v2/

### Upcoming 

- I'm currently looking at the [tsconfig reference](http://www.typescriptlang.org/v2/tsconfig), and [typescript powered code blocks](https://github.com/microsoft/TypeScript-Website/issues/120) for samples

### About myself 👋

Hello there, I’m Orta! I'm reasonably new to the TypeScript team, and have been focusing on docs and web tooling. You can find more fine-grained updates on [my twitter](https://twitter.com/username_0) (plus y'know, other stuff) - also, thanks for the idea https://github.com/octokit/rest.js/issues/620
<issue_comment>username_0: Test
<issue_comment>username_0: Another test for the webhook
<issue_comment>username_0: Third time lucky
<issue_comment>username_0: Fourth time is a charm.
<issue_comment>username_0: Fool me five times, shame on my lack of types.
<issue_comment>username_0: ### November Catch-up

[![btvGbI0 - Imgur](https://user-images.githubusercontent.com/49038/69150183-2502a280-0aa6-11ea-89d1-093906bf1696.gif)](http://www.crispe.net)

I have two not yet published blogs posts on the [TypeScript product blog](https://devblogs.microsoft.com/typescript/), one on our usage of GitHub Actions in the Playground in the repo [`username_0/make-monaco-builds`](https://github.com/username_0/make-monaco-builds/), and an overview of the v2 of the TypeScript playground. The TLDR, because I have no clue how long these posts will be in publishing quagmire:

- **Automatic Type Acquisition** (beta) - the site will grab the d.ts files for your imports
- **Comprehensive Examples** - 40+ focused docs on different parts of TypeScript
- **Example Hyperlinking** - Examples can link between each other
- **Concise hrefs** - The URL is a gzipped string of the code, with all compiler flags etc
- **Decoupled TypeScript Versions** - You can test many versions of TypeScript
- **Theming Support** - from @keithlayne 
- **JavaScript Playgrounds**  - So you can help each other with JSDoc support 
- **Fixits** - Mainly so we can document new fixits on a release
- **PR Based Playgrounds** - Any TS team member can request a playground for a PR via commenting

The playground self-documents a lot of these in a [set of examples](https://www.typescriptlang.org/play/#show-whatisnew)


#####  Long term

On the website v2 side, I've created larger roadmaps which talk to some of the long-term vision on different parts:

- [Website Vision](https://github.com/microsoft/TypeScript-Website/issues/94) - this includes links to all the designs too
- [Internationalization](https://github.com/microsoft/TypeScript-Website/issues/100)
- [Community Section](https://github.com/microsoft/TypeScript-Website/issues/63)

#####  Work in Progress:

- I've got a good chunk of the v2 website navigation working with [the current handbook](https://www.typescriptlang.org/v2/docs/handbook/classes.html)
- I've built out a library which can power the [TypeScript-powered Code Block](https://github.com/microsoft/TypeScript-Website/tree/v2/packages/ts-twoslasher) which isn't hooked up to the v2 markdown pipeline yet
- I've built a lot of infra for an internationalized [TSConfig reference](https://www.typescriptlang.org/v2/tsconfig) - which I'm in the process of [adding examples and richer descriptions](https://github.com/microsoft/TypeScript-Website/pull/121) to all keys. PR's welcome there.

##### Shipped Infra I'm happy with:

The new website has a solid amount of automation:
  -  PR based deploys of the site
  - Lighthouse results for a few pages
  - A [danger-js](https://github.com/username_0/danger-plugin-lighthouse#danger-plugin-lighthouse) plugin for showing lighthouse results
  - I extended the [danger-js plugin for spell checking](https://github.com/username_0/danger-plugin-spellcheck) to also include code
  - This post [auto-comments into the TypeScript Teams channel](https://github.com/microsoft/TypeScript-Website/blob/master/.github/workflows/send-updates.yml) via GitHub Actions
<issue_comment>username_0: ## Website Navigation 

I've focused my work with three main goals since the last update:

- [Documentation for the TSConfig](https://github.com/microsoft/TypeScript-Website/pull/121)
- [Tooling for how we want to show code blocks](https://github.com/microsoft/TypeScript-Website/issues/120)
- Creating the navigation shell of the website so that we can preview pages

I'm going to focus this update on the navigation aspects of the site. Let's look at a few different places we have
navigation and talk about why it was designed this way

### Site Navigation

I tried to take a mix of modern native mobile app design, and website best practices to focus on three main audiences:

- Desktop with mouse
- Desktop via keyboard
- Mobile Phones

The first two tend to have similar needs in terms of what they want for site navigation, but mobile devices themselves 
should be treated quite differently both from a user's intent and how we should present navigation.

How does it look on desktop?

![Screen Shot 2019-12-02 at 1 12 07 PM](https://user-images.githubusercontent.com/49038/69988504-c4e11700-150f-11ea-8d06-6b98f65c475c.png)

How does it look on mobile?

![Screen Shot 2019-12-02 at 1 36 27 PM](https://user-images.githubusercontent.com/49038/69988540-d0ccd900-150f-11ea-9838-84c9c7b8e9ae.png)


### Why the drastic change?

Navigation on desktop tends to take a lot of design cues from headers in print design which aims to follow the path of reading:

1. Have a strong visual distinction for a section of links
1. Always have a brand mark link in the top corner where folks read from which takes you to the index
1. Include a few links to the impusername_0nt places next to that
1. Include a flexible whitespace gap then have secondary tiered navigation links at the end of your eye flow

But mobile really disrupted that from two factors:

1. The horizontal space is so constrained, good luck getting more than 4-5 words in there
1. There are 'blessed' areas of the screen where it is physically easier to touch once mobile devices got big

This moved the design frames of references from one loosely based on [fitt's law](https://blog.codinghorror.com/fitts-law-and-infinite-width/) to
one based on thumb touch maps.

<img src=""https://www.scotthurff.com/content/images/2019/06/thumb-zones-lineup.png"">

[From scotthurff.com](https://www.scotthurff.com/posts/how-to-design-for-thumbs-in-the-era-of-huge-screens/)

In designing for mobile, I had to really narrow the priorities for people to two things. I wanted people to easily get to search, and to go to the root of the documentation. In my experience building websites for developer documentation, most people are using mobile as a reference or to quickly show something to someone.

You can see here that we barely get into the natural section in search


![mobile-1](https://user-images.githubusercontent.com/49038/69988594-f0640180-150f-11ea-9cac-1525f6066338.png)

Then just get comfy when the navigation bars appears

![mobile-2](https://user-images.githubusercontent.com/49038/69988593-efcb6b00-150f-11ea-9989-7045d0cfc953.png)


With the navigation designed, I applied the same forms of navigation hiding which mobile browsers do. The navigation will only show when you start to move up. It also keeps track of display curves for phones like the iPhone X and my Samsung Note, you can see in this GIF when the browser includes a flat edge at the bottom then the navigation buttons lay flat.

![Screen Recording 2019-12-02 at 12 51 24 PM 2019-12-02 12_55_45](https://user-images.githubusercontent.com/49038/69988794-5b153d00-1510-11ea-8858-0fcfbe113d10.gif)

I still have a few questions to answer though:

- What will the language selector look like?
- What will the theme selector look like?

I expect to take some cues from [docs.microsoft.com](https://docs.microsoft.com/en-us/aspnet/core/getting-started/?view=aspnetcore-3.0&tabs=macos).

#### Footers

I believe in mega-footers. A footer is the end of the information you were actually looking for and generally represents three things:

- A jump-off section for people to get to related links
[Truncated]

For mobile, I didn't need to do anything content-wise. I don't think there's any value in making it more focused. Design wise I only made a few tweaks but it felt fine in both.

#### Internal Navigation

The other place where we have navigation is between pages. When you link into a handbook, we want to show a navigation between related documents. 

![2019-12-02 13-08-59 2019-12-02 13_11_05](https://user-images.githubusercontent.com/49038/69988709-2b663500-1510-11ea-9918-99508850e205.gif)

This is a pretty solid design pattern to work within, and one that's common on documentation sites. I took care to make it obvious which navigation section you're in and Gatsby made it so fast that it doesn't feel like you're navigating between web pages.

The tricky thing was making it feel right on keyboard, which I'm really happy with.

#### No runtime dependencies

A lot of what you're seeing in these screenshots looks like a lot of complicated JavaScript code, but it's not. Apart from search which comes from Algolia, the v2 site has zero JavaScript dependencies at runtime, and is a static HTML site to an azure blob storage account.

The interaction patterns are built from first building the site with JavaScript disabled, and then JavaScript to handle some of the extra is added in at runtime. I use the `useEffect` pattern inside a React component to add client-side JS enhancements. For example [here is all the runtime JavaScript code](https://github.com/microsoft/TypeScript-Website/blob/6ed0a6021bd14e7f078ceb740c33c5d844f968f8/packages/typescriptlang-org/src/components/layout/SiteFooter-PlaygroundSamples.tsx#L75-L106) to handle allowing the popover in the footer. The rest is all CSS.

This pattern works really well for a medium sized site with only 1-2 core contributors.
<issue_comment>username_0: ### Interactive Codeblocks

![humanbouncinginice](https://user-images.githubusercontent.com/49038/71089569-14bf0f80-2199-11ea-80a6-70b9f11527b1.gif)

It's been a slow week on the web infra and docs world. The [tsconfig docs](https://github.com/microsoft/TypeScript-Website/pull/121) are pretty close to being wrapped up now. However, the main reason for the slow week has been that I was on my first [Definitely Typed rotation](https://github.com/DefinitelyTyped/DefinitelyTyped/pull/41063) last week, and I'm covering mornings this week.

In-between DT work, I've been wrapping my head around twoslash improvements. Twoslash is a mini-typescript sandbox environment where you can control the compiler and the output via comments. It's part of a larger roadmap https://github.com/microsoft/TypeScript-Website/issues/120 but it's basically the tool doing the heavy lift.

For example:

```ts
// @declaration: true
// @showEmit
// @showEmittedFile: index.d.ts

/**
 * Gets the length of a string
 * @param value a string
 */
export function getStringLength(value: string) {
  return value.length
}
```

Tells the compiler with the first three lines:
 - Set the compiler option `declaration` to true
 - Set the twoslash option`showEmit` to true (meaning that the code sample should show a different file and not the source TypeScript) 
 - Set the file which it should show to be `index.d.ts`

So the user-facing code sample would be:

```js
/**
 * Gets the length of a string
 * @param value a string
 */
export declare function getStringLength(value: string): number;
```

This means the code sample a user see is a `.d.ts` for a `.js` file, instead of the original source code.

### Twoslash Features

- Showing errors from the code sample, and leaving the messaging to the compiler
 - Declaratively highlight symbols you want to show
- Handling showing the results of transpilation with certain flags
- Splitting a code sample to hide distracting, or redundant code
- Support an example referencing multiple files
- Creating a playground link for the code

For us the critical stuff is showing errors, highlighting parts of source code and showing the results of transpilations. The nice to haves are things like handling imports in a single file, and playgrounds.

The advantages for the site are:
 - We can be sure TS emits, and error messages are always accurate between TS releases
 - We can do callouts in docs to show the exact results of a particular identifier

This last point is particularly useful because of how TypeScript type inference works with [narrowing or widening](https://www.typescriptlang.org/play/?e=58#example/type-widening-and-narrowing) - the same variable identifier could be very different objects in different parts of the same code sample. 

### Highlights for you, and you, and you

While it's great for us to highlight the bits we think are impusername_0nt in a code sample, the ideal state is that our code samples provide a way to highlight the code at all the identifiers in that sample. This is one of the features I've been working on this week:

![Screen Shot 2019-12-17 at 3 15 54 PM](https://user-images.githubusercontent.com/49038/71091805-c5c7a900-219d-11ea-840f-e4946779a850.png)

While not working perfectly yet, you can feel all of the pieces coming together.

#### Ecosystem Adoption

Nearly all of these twoslash features aren't problems unique to TypeScript, twoslash uses the language server protocol to extra all of these annotations - meaning essentially any language can re-create this infrastructure in their docs (and hopefully after seeing it on the TypeScript v2 site, they will!)

I've also been building twoslash support out as a series of modules to work with Gatsby, so I would hope this makes it easy for folks to use adopt twoslash for their sites when they are writing about TypeScript.
<issue_comment>username_0: <p align=""center""><img src=""https://user-images.githubusercontent.com/49038/71623454-9c167500-2bd4-11ea-8ef6-459c174d76ad.gif""></p>

### TSConfig Reference

One of the completely new features in the new website is the TSConfig Reference. Since the last update, this page is now at a ""good enough"" stage that it's pretty publicly available. The design is a WIP, but the copy is 👍.

https://www.typescriptlang.org/v2/en/tsconfig

The TSConfig Reference has a few goals:

- De-mystify the configuration for TypeScript by providing more comprehensive examples per flag
- Have examples for compiler flags use the compiler to show how the flag works
- Make it easy for the community to contribute and improve the tsconfig docs
- Provide a path for internationalization

### De-mystifying Compiler Flags

Prior to the TSConfig reference, the canonical source of information on the available flags and how they work is the overview of the command line flags for TypeScript. This [is/was a table of tweet-sized descriptions](https://www.typescriptlang.org/docs/handbook/compiler-options.html) of most CLI flags, of which the majority are also tsconfig options. You would then likely need to either get information from the release notes which introduced that flag, or to search the internet for that exact flag name to get more info.

This documentation structure is pretty logical because the TypeScript codebase keeps both tsconfig and CLI flags in the  same data-structure, which has made it hard to extract either for documentation purposes.

My first port of call at starting this page was to use the typescript API to [extract all of the compiler flags](https://github.com/microsoft/TypeScript-website/blob/v2/packages/tsconfig-reference/scripts/generateJSON.ts) and to generate a JSON dump of all the compile flags. This comes to about 100+ flags today.

```ts
export type CompilerOptionName =  ""help"" | ""watch"" | ""preserveWatchOutput"" | ""listFiles"" | ""listEmittedFiles"" | ""pretty"" | ""traceResolution"" | ""diagnostics"" | ""extendedDiagnostics"" | ""generateCpuProfile"" | ""incremental"" | ""locale"" | ""all"" | ""version"" | ""init"" | ""project"" | ""build"" | ""showConfig"" | ""listFilesOnly"" | ""target"" | ""module"" | ""lib"" | ""allowJs"" | ""checkJs"" | ""jsx"" | ""declaration"" | ""declarationMap"" | ""emitDeclarationOnly"" | ""sourceMap"" | ""outFile"" | ""outDir"" | ""rootDir"" | ""composite"" | ""tsBuildInfoFile"" | ""removeComments"" | ""noEmit"" | ""importHelpers"" | ""downlevelIteration"" | ""isolatedModules"" | ""strict"" | ""noImplicitAny"" | ""strictNullChecks"" | ""strictFunctionTypes"" | ""strictBindCallApply"" | ""strictPropertyInitialization"" | ""noImplicitThis"" | ""alwaysStrict"" | ""noUnusedLocals"" | ""noUnusedParameters"" | ""noImplicitReturns"" | ""noFallthroughCasesInSwitch"" | ""moduleResolution"" | ""baseUrl"" | ""paths"" | ""rootDirs"" | ""typeRoots"" | ""types"" | ""allowSyntheticDefaultImports"" | ""esModuleInterop"" | ""preserveSymlinks"" | ""allowUmdGlobalAccess"" | ""sourceRoot"" | ""mapRoot"" | ""inlineSourceMap"" | ""inlineSources"" | ""experimentalDecorators"" | ""emitDecoratorMetadata"" | ""jsxFactory"" | ""resolveJsonModule"" | ""out"" | ""reactNamespace"" | ""skipDefaultLibCheck"" | ""charset"" | ""emitBOM"" | ""newLine"" | ""noErrorTruncation"" | ""noLib"" | ""noResolve"" | ""stripInternal"" | ""disableSizeLimit"" | ""disableSourceOfProjectReferenceRedirect"" | ""noImplicitUseStrict"" | ""noEmitHelpers"" | ""noEmitOnError"" | ""preserveConstEnums"" | ""declarationDir"" | ""skipLibCheck"" | ""allowUnusedLabels"" | ""allowUnreachableCode"" | ""suppressExcessPropertyErrors"" | ""suppressImplicitAnyIndexErrors"" | ""forceConsistentCasingInFileNames"" | ""maxNodeModuleJsDepth"" | ""noStrictGenericChecks"" | ""useDefineForClassFields"" | ""keyofStringsOnly"" | ""plugins"";
```

Having a data-dump is a good first start, but some of these flags are obviously CLI only, for example: `""help""` or `""watch""` and the graph of these options is quite complex but not represented in the TypeScript codebase.

To map these domains, there is a [file called `tsconfigRules.ts`](https://github.com/microsoft/TypeScript-website/blob/v2/packages/tsconfig-reference/scripts/tsconfigRules.ts) which strives to be the source of truth for how the config options connects and their additional metadata.

This file tracks:

 - Denylisting CLI only options
 - Available options for a flag
 - Defaults for the flag
 - many to many relationships between options

From there the next step is to generate a markdown file for the site to work with. This is done in [`generateMarkdown.ts`](https://github.com/microsoft/TypeScript-website/blob/v2/packages/tsconfig-reference/scripts/generateMarkdown.ts).

### Real use-cases

The TSConfig reference is a perfect place for building out the features of [the twoslash](https://github.com/microsoft/TypeScript-Website/issues/130#issuecomment-567044712) because it requires making code samples which have all sorts of emits, compiler failures, and configuration options.

A great example of this is the [`module`](https://typescript-v2-163.username_0m.now.sh/en/tsconfig#module) option - where the same code is ran with different settings for module and creates drastically different JavaScript. It makes it much easier to understand once you can see the outcome alongside.

<img width=""945"" alt=""Screen Shot 2019-12-31 at 1 31 58 PM"" src=""https://user-images.githubusercontent.com/49038/71623490-ff080c00-2bd4-11ea-8c0f-15b9679fd90f.png"">

### Low Barrier to Contribute

Each compiler option is [a unique markdown file](https://github.com/microsoft/TypeScript-Website/tree/v2/packages/tsconfig-reference/copy/en/options) which will eventually be concatinated into a single file. This means a contributor can easily make isolated changes to just the file they're interested in. Because it's plain old markup and twoslash is reasonably simple then we can get a lot of bang for a small amount of code.

Being a series of markdown files means that tooling like Danger can run spellcheckers, and linters against each file individually to ensure we're shipping great docs.

### Ready for Translations

This project was built with internationalization from day one. I've been making a really bad language attempt at supporting a pirate dialect to prove the system:

https://www.typescriptlang.org/v2/pirate/tsconfig#module

The idea is that the community can add translations option by option, and if they haven't included one yet then the english version is the fallback. So while it might be simple - it works well and it's the first part of the v2 website to hit [all three of the targets](https://github.com/microsoft/TypeScript-Website/issues/100) for the internationalization roadmap.

Meaning it's ready to go it you want to start translation to a language you know. Docs are [in the README](https://github.com/microsoft/TypeScript-Website/tree/v2/packages/tsconfig-reference#generating-the-tsconfig-reference)
<issue_comment>username_0: ## State of the v2nion

![giphy](https://user-images.githubusercontent.com/49038/72535826-34546100-3847-11ea-8a04-9fe80fe41e83.gif)
(How I feel after the winter holidays)

```ts
type State = ""playground"" | ""internationalization"" | ""dev-pages""
```

I've been plugging away occasionally on the last two weeks on the new Playground, and some developer pages for the node modules which I needed for the website. I'll cover those later, but now that we've hit the 3.8 beta, it's time for me to slow down on the web infra to work on some compiler bugs. So, unless I feel like deep-diving on a particular topic there may not be an update in 2 weeks time.

## Localization

I [originally](https://github.com/microsoft/TypeScript-Website/commit/a1ca06febba972f4361713bba10fef4d0c114c01#diff-62e8aac4854aa468aaf8379ae9b073deR31) started working on supporting multi-lingual content for the site about 5 months ago, when I was doing my initial work on forking TypeScript-play to be the new TypeScript Playground. The site was still in design phase,  but it felt like an achievable goal, if done in small steps regularly while any type of content was being made. 

That said, localization for v2 actually came with three interesting problems:

- **What do you do with URLs?** To treat all languages equally, a page like `/community` should be `/en/community`   but that makes it tricky with losing existing SEO for these pages. We host statically, and I'm not sure if we  can make [HTTP redirects](https://stackoverflow.com/questions/44274198/redirecting-base-url-in-azure-blob-storage?rq=1) 
  work with Azure Blob Storage.

- **How do you handle fallbacks when some content for a localization isn't available?** E.g. someone has translated a  page of the playground, but not the tsconfig reference. The footer links from the playground should correctly  redirect to the english fallback, and not to a non-existent page.

- **Where should localized content live?** Right now it's all in the main TypeScript website repo, and given that I  account for nearly all PRs on the repo, it's not a massive hub of activity. However, you want to give ownership to  translators and you want to be sure that code won't break the whole website. Right now, the other developer websites   with a similar set of constraints (size of documentation, potential contributors, complexity in domain) like   React use multi-repo approaches.  
  
  Right now my technique of keeping it in the TypeScript repo is a little ad-hoc, but I'm keeping my eye on how Gatsby   handles [their translation efforts](https://github.com/gatsbyjs/rfcs/blob/master/text/0010-gatsby-docs-localization.md)   to see if there is work we can share.

  You can see an [example of what adding a language looks like here](https://github.com/microsoft/TypeScript-Website/pull/181).

## Playground

I gave a TL:DR on the main changes to the TypeScript Playground v2 [back in Novemeber](https://github.com/microsoft/TypeScript-Website/issues/130#issuecomment-555518195), but now we have Playground v3. This has about 90% of the features of the v2 playground, 
and a few extra nicities:

 - It's now all in TypeScript and has some tests, as opposed to a single massive .JS file
 - The Sidebar UI is built for expansion (it is a plugin system, so people can create their own plugins in the future)
 - The code is split into ""Sandbox"" and ""Playground"", the sandbox being a monaco-editor wrapper and Playground as the 
   comprehensive UI for configs, examples and the sidebar.
 - It runs entirely on our infrastructure (except the type acquisition)
 - Type Acquisition now caches into localStorage, and so it should be pretty instant after the first time
 - There are options, so you can turn off updating the URL when you type, or ATA (and more later)

The playground was the first thing I designed for the TypeScript v2 website, and so it's nice to finally see and use it. I reflected [earlier on twitter](https://twitter.com/username_0/status/1212746649199685632) about how design work can feel like a rough plan, because the moment you start iterating - you have a much better set of assumptions about how something works.

## Dependencies For Others

I mentioned the Sandbox above, I've taken some of the larger dependencies and given them their own section of the website. Both of these are really useful tools if you're working with TypeScript on the web, so I wanted to highlight tooling we've made as quick overviews, 

- https://www.typescriptlang.org/v2/dev/sandbox/
- https://www.typescriptlang.org/v2/dev/twoslash
 
I'm sure there are a lot of other cool modules the TypeScript team have shipped, so I want to try highlight how to work with the TypeScript compiler API and some other useful tools. 

## Current Sitemap

- Existing Handbook Content: https://www.typescriptlang.org/v2/docs/handbook/basic-types.html (just this page has twoslash enabled)
- Docs root: https://www.typescriptlang.org/v2/en/documentation/
- TSConfig Reference: https://www.typescriptlang.org/v2/en/tsconfig
- Playground: https://www.typescriptlang.org/v2/en/play
- Dev page, Sandbox: https://www.typescriptlang.org/v2/dev/sandbox/
- Dev page, Twoslash: https://www.typescriptlang.org/v2/dev/twoslash

My aim once I get back to the site: 

- [Index page](https://www.figma.com/file/x8FJrNqj6oupqWn1s3uMg4/Website?node-id=1%3A129)
- Infra for localized Handbook content (though I'll not recommend folks actually translate them because a v2 for the handbook is still in the works)
- Dark & High contrast modes
- Initial polish passes for design, keyboard accessibility
<issue_comment>username_0: [![gatsby 2020-01-22 19_03_11-3](https://user-images.githubusercontent.com/49038/72945460-df828000-3d49-11ea-8a66-2867de8b8ddd.gif)](https://username_0stuff.s3.us-east-1.amazonaws.com/gifs/other/gatsby.mp4)
[HQ vid](https://username_0stuff.s3.us-east-1.amazonaws.com/gifs/other/gatsby.mp4)

## Why Gatsby?

The TypeScript v1 site is a jekyll website, and Jekyll packs a lot of power into a small tool. Jekyll is really great way to build static websites, but it's built to work for small websites of around 1-20 pages.

You can feel this in how they treat templating (liquid, which is a logic-less templating engine), how they treat the data modelling internally (there are only really '[Posts](https://jekyllrb.com/docs/posts/' & '[Pages](https://jekyllrb.com/docs/pages/)') and how in how the tool is set up to work with a specific folder structure.

At Artsy, where I worked at before TypeScript, we had started to hit the limits of [working within Jekyll](https://artsy.github.io/blog/2019/01/30/why-we-run-our-blog/) at around 200 blog posts and a lot of custom pages, and we were exploring different tools to use as a writing environment. In the process I looked deeply into Gatsby, and concluded that it was the right abstraction for building static sites.

### What Makes Gatsby Unique

What makes Gatsby unique among static site generators is this idea that it adds an extra step to the process. In a normal static site generator, you would more or less directly map files to their output:

```ts
const files = fs.getDirSync()
const htmlFiles = files.map(makePage)
htmlFiles.forEach(html => {
  fs.writeFileSync(filename, html)
})
```

Gatsy on the other hand does something a bit more like this:

```ts
const setupSite = () => {
  const files = fs.getDirSync()
  const data = files.map(makePage)
  graphQLServer.add(data)
}

const createBlog = () => {
  const pages = graphQLServer.query(""{  pages { title, text } }"")
  htmlFiles.forEach(html => {
    fs.writeFileSync(filename, html)
  })
}

setupSite()
createBlog()
```

Gatsby adds a GraphQL API which sits in-between the setup of the data and the generation of files in your static site. This abstraction providing a very strong separation of ""setting up the site"" vs ""representation on the file system"" which I've found makes it easier to reason about what's going on internally.

What does this look like in practice? It starts at [`gatsby-node.js`](https://github.com/microsoft/TypeScript-Website/blob/0afd526969d98c321787ab1962f72f9361ab54bd/packages/typescriptlang-org/gatsby-node.js) but an interesting example is how a TSConfig Reference page is set up:

- In the Gatsby config file, [we request a plugin](https://github.com/microsoft/TypeScript-Website/blob/0afd526969d98c321787ab1962f72f9361ab54bd/packages/typescriptlang-org/gatsby-config.js#L52-L58) to look for markdown files in a particular folder and to mark them as `tsconfig-reference`
- Then in `onCreatePages` in `gatsby-node.js` we make a [GraphQL query to get all these files](https://github.com/microsoft/TypeScript-Website/blob/0afd526969d98c321787ab1962f72f9361ab54bd/packages/typescriptlang-org/lib/bootup/ingestion/createTSConfigReference.ts#L12-L26) via the name `""tsconfig-reference""`. 
  These files are then used to create Pages inside Gatsby (e.g. `en.md` => `/en/tsconfig`, `pt.md` => `/pt/tsconfig`) and we link the React component used to render them.
- Once all of the pages are set up, Gatsby runs through each page. 
- For the TSConfig it would load [this template](https://github.com/microsoft/TypeScript-Website/blob/0afd526969d98c321787ab1962f72f9361ab54bd/packages/typescriptlang-org/src/templates/tsconfigReference.tsx), run this query,and pass the results as the initial argument to [this function](https://github.com/microsoft/TypeScript-Website/blob/0afd526969d98c321787ab1962f72f9361ab54bd/packages/typescriptlang-org/src/templates/tsconfigReference.tsx#L9) - it does this per language.

It's a few more steps then `mv ../tsconfig/en.html en/tsconfig.html` - yep, but once you grok the larger idea then each step is a well composed, isolated and easily tested part of a larger system. That's what makes Gatsby a great abstraction.

### Types For Tools

The TypeScript support in Gatsby is good, and improving as they start to port their own codebase to TypeScript. When I first started, I shipped a few `d.ts` file improvements and welcome the pings from their team with questions when it changes. In the last 2-3 months, I've been running in a fully typed codebase which has been a breeze.

If you're familiar with React, and clicked through into the [TSConfig Template](https://github.com/microsoft/TypeScript-Website/blob/0afd526969d98c321787ab1962f72f9361ab54bd/packages/typescriptlang-org/src/templates/tsconfigReference.tsx#L9) - you might have been a bit surprised by the somewhat unorthodox usage of React.

I'm using React as a templating language, and not as a reactive UI framework, the site never use a `setState`-like API in React.  Effectively meaning React runs once when the site is generated, and then never used again.

My goal is that the TypeScript v2 website, with all its complexity, needs to be understood with the least amount of abstractions possible. It should not be too surprising, but vast majority of the TypeScript compiler team have a compiler background, and don't really do web development. To ensure that they can contribute, and understand the codebase I'm aiming to use Gatsby and React to get as close to HTML + CSS as possible.

One way to do that is to separate the generation of HTML + CSS, from any extra JS which happens at runtime.  This means almost every component in the site conforms to this pattern:

```tsx
// JS imports
import React, { useEffect } from ""react""
import { Layout } from ""../components/layout""

// Style
import ""./tsconfig.scss""

// The main React component
const TSConfigReferenceTemplateComponent = (props: PropTypes) => {
  useEffect(() => {
    // code which happens when the page has finished loading
  })
[Truncated]

By not using any of the React `setState`-ish APIs, I can guarantee there is no ""runtime"" React rendering happening on a user's browser.  This means the HTML in the built file is exactly what someone will see whether they have JS enabled or not.

One advantage of this has been that I can reliably run [`BackstopJS`](https://garris.github.io/BackstopJS/) to take screenshots of these static files to keep track of visual regressions as the site grows and others start to contribute.

Would I recommend this technique to people making Gatsby websites, probably not, it's going against the grain (React is a really good tool) of how you're expected to use Gatsby. But the trade-off is worth it for me, and I spent some time thinking about that.

### Speed

I'm blown away by how fast Gatsby is for a user.

The founder of Gatsby, Kyle Mathews [gave a great talk in 2017 on the ways in which Gatsby is fast](https://youtu.be/Gtd-Ht-D0sg?t=961) and [here more recently](https://www.youtube.com/watch?v=HQEotVfTXwk), in rough:

- Prefetching of related links
- Clever splitting of code
- Shrinking of assets
- Offline support
- Native lazy loading

His long term visions is to think of Gatsby as a compiler which takes a set of input source files, and will keep trying to make a static output which is faster and faster for users.  Another great resource for understanding the mechanics about why Gatsby is fast is this talk by [Nicolas Goutay at GOTO 2019](https://www.youtube.com/watch?v=p14g-Sep7HY).
<issue_comment>username_0: I took ^ and turned it into a well rounded blog post for the Gatsby blog: https://www.gatsbyjs.org/blog/2020-01-23-why-typescript-chose-gatsby/
<issue_comment>username_1: Awesome post @username_0 - I've always meant to check Gatsby out and so I really appreciate how you talk this through. It's really clear 🤗
<issue_comment>username_0: I learned to build open source projects which have a small (ish) core, but are extensible in ways you can't predict:

- [Danger](https:///danger.systems) - has a small user-facing API, but always have hooks for plugins to integrate with CI tools
- [CocoaPods](https://cocoapods.org) - has a few tiny kernel-like libraries then UI layers on top, then a plugin infra to allow all sorts of unique use-cases

Now, today, the TypeScript Playground is in that list. I can now give the right answer to folks asking  ""I'd love to be  able to present in the Playground"" which is ""Built it yourself! Make a plugin."" ([or extend mine](https://github.com/username_0/playground-slides)).

Do I know what people will do with it? Nope. 

That's the good bit though.

### Making a Plugin Eco-system

I've done this a few times now, so here's what I think you need to start up a plugin eco-system:

- User-facing overview of what they are
- User-facing plugin registry
- Developer tutorial for getting started
- Template to bootstrap project
- API docs
- Reference Implementation

Each one of these address funnel transitions as people get closer to building something cool, you know you've succeeded in building a good plugin infrastructure when people start making fun & frivolous plugins:

- [cocoapods-roulette](https://github.com/sirlantis/cocoapods-roulette)
- [danger-the_coding_love](https://github.com/sirlantis/cocoapods-roulette)
- [xcode-you-can-do-it](https://github.com/username_0/You-Can-Do-It#you-can-do-it)

Why? Because the barrier to entry is so low that you can try a throwaway idea. I guess I'm excited to see when we get
[fireworks in the playground](https://github.com/hoovercj/vscode-power-mode) as you type.

So, for the Playground Plugins:

- User facing overview ([in the playground](https://www.typescriptlang.org/v2/en/play/) under options)
- User facing plugin registry ([in the playground](https://www.typescriptlang.org/v2/en/play/) under options)
- [Developer tutorial for getting started](https://www.typescriptlang.org/v2/dev/playground-plugins/)
- [Template to bootstrap project](https://github.com/microsoft/TypeScript-Website/tree/v2/packages/create-typescript-playground-plugin)
- [API docs](https://github.com/microsoft/TypeScript-Website/blob/v2/packages/create-typescript-playground-plugin/template/CONTRIBUTING.md)
- [Reference Implementation](https://github.com/username_0/playground-slides)

Then to dog-food plugins, the v3 version of the playground uses plugins itself for all of the sidebar tabs. This means anything I need to get the playground up and running is also available to any plugin developers.

## Plugin Downsides

I'd be amiss if I didn't at least talk about the downsides of a plugin ecosystem:

- Performance: Plugin authors are very likely to have less knowledge of the whole system, and that can cause their code to not work as well as code inside the main tool. Slow plugins cause users to blame the host tool as being slow. (For example, webpack)

- Lack of Isolation: Some of the best abstractions are inter-process tools: [LSP](https://langserver.org), [XPC](https://medium.com/@theninjaprawn/breaking-ios-xpc-cfe2c3083c87) - these are effectively a way to ensure that each plugin is isolated safely. That's a lot of engineering which you might not need, but without it you can't guarantee that 2 plugins won't break each other (or your tool) and this is at the expense of performance

- Additional support burden: A plugin might be breaking your tool, suddenly you have to ask ""What plugins do you have running?"" and re-direct folks around

## Playground Plugins 

None of those are too much of a problem for the playground, I think. If it does, then I'll improve it in the future. In the meantime, I'd love to see some plugins from folks!
<issue_comment>username_0: <p align=""center""><img src=""https://media.giphy.com/media/1oLgKZz8wxUb1Rvkjc/giphy.gif"" /></p>

## Why is the new TypeScript website Internationalised?

I grew up in an English speaking county, so I was never forced into a position to learn a second language. 

For the major of the world though, folks had to learn English on top of their own native tongue - either through [exposure to culture](https://us.macmillan.com/books/9780374172145) or as a potential route for self-improvement. 

I've always had a chip on my shoulder about this. In-fact, I [moved to Brazil](https://www.youtube.com/watch?v=83K1Qgr4lf4) for my first programming job explicitly to try learn a second language and I'm so thankful I got the chance to do that. The only blocking question I had for the interview was ""Do we program in English?"" - turns out everyone does.

I spent the next decade and a half basically only writing software which works in English, and it's time to stop that. This year when I visited Brazil for [BrazilJS](https://twitter.com/braziljs), a [talk by @sudowilliam](https://www.youtube.com/watch?v=yveyngN-UJs&list=PLg2lQYZDBwOSAzmv-4x92409OH5IZUtGL&index=11) (sorry, it's in Portuguese) really hammered the point home: _By only providing documentation in English, only 3% of Brazilians could use the resources I was creating._ Access to learning English is also effectively class based. If you want to help with social mobility then helping to lower barriers by translation is a great way to contribute.

In Microsoft, everyone has a bi-annual set of goals/deliverables and luckily for me one of them **has** to relate to diversity and inclusion of some sort. You can [read my self-review](https://gist.github.com/username_0/d2b3cc779cdf6b5ccf2e5cfc04c75682) but I choose a stretch goal of getting the new site internationalized. 

Turns out doing it is significantly more complex than just saying ""let's do it"" - so, I've been treating internationalization as my personal side-project since wrapping up [Flappy Royale](https://flappyroyale.io) and it's really starting to come together now.

## Internationalizing the TypeScript Website

When your tools are pretty low-level like Gatsby, internationalization isn't just a tick box you can hit and magically start producing sites which work logically across many languages. This website needs to be deploying as static HTML files for every language, and so we can't rely own runtime trickery. You need to think of how you are going to approach this from many different angles:

##### Incremental Language Adoption

Should a translation be available publicly if not everything is available? IMO, yes. My technique has been to effectively treat a translation as a layer above English - so for every potential set of translatable documents, you can add only one to get the language URLs set up, and anything you haven't provided yet will have the English link provided. 

Given that we're relying on the OSS community to do translations, I don't think it's reasonable to put some kind of informal SLA on their time to block new parts of the website in English coming online. It can appear in English, and as someone finds the time, it can then be translated.

##### URL schemes

A very reasonable constraint we had was that [cool URIs don't change](https://www.w3.org/Provider/Style/URI.html) - switching to the new website should not break old links. This meant that English gets to be a bit of a special case in the TypeScript website. For example:

- `/play` - the Playground in English
- `/ja/play` - the Playground in Japanese

This is not ideal. My initial goal was to have `/en/play` but in the end, once I considered the downside of losing SEO juice for pages as they both switched from the old TypeScript website to the new one, and then with corresponding language change in URL shift - it didn't seem worth the trade-off.

##### Linking

Internally there is a [custom linking component](https://github.com/microsoft/TypeScript-Website/blob/v2/packages/typescriptlang-org/src/components/IntlLink.tsx) which understands the patterns of internationalized URLs in this website. 

This means that I can write internal, English, URLs inside the website. Then depending on the current language of the page, it will resolve to either the localized page or an English one.

This simplifies the React components considerably, it's kind of wild thinking that every internal anchor knows the URL for every page on the site - but the way gatsby is architected makes that pretty easy to do. 

##### Content Generation

The TypeScript Website v2 is a monorepo, where I treat sections of documentation as unique packages. There are packages for:

- [tsconfig reference](https://github.com/microsoft/TypeScript-Website/tree/v2/packages/tsconfig-reference) markdown files
- [playground example](https://github.com/microsoft/TypeScript-Website/tree/v2/packages/playground-examples) `.ts` / `.js` files
- [the handbook](https://github.com/microsoft/TypeScript-Website/tree/v2/packages/handbook-v1)

Each of these has a `build` command which generates the hybrid English and per-language files and keeps them in an output folder. 

The TypeScript website then uses these output folders to generate pages on the website. This two-step process is made easier by using [watchman](https://github.com/microsoft/TypeScript-Website/blob/v2/watcher.js) to automatically run the build scripts when markdown/ts/json files are changed in documentation.

##### Strings

Between the options for Internationalizing React components, there wasn't an outstanding and obvious highlight. They all seemed good, but [React Intl](https://github.com/formatjs/react-intl#react-intl) felt like it was the closest to the to the [TC-39 standards](http://formatjs.io) - so I went with that.

There are per-language [sets](https://github.com/microsoft/TypeScript-Website/tree/v2/packages/typescriptlang-org/src/copy) of TypeScript objects which are [simple](https://github.com/microsoft/TypeScript-Website/blob/v2/packages/typescriptlang-org/src/copy/en/playground.ts) [key-value](https://github.com/microsoft/TypeScript-Website/blob/v2/packages/typescriptlang-org/src/copy/en/nav.ts) [objects](https://github.com/microsoft/TypeScript-Website/blob/v2/packages/typescriptlang-org/src/copy/en/documentation.ts) for the name of the copy and then the languages copy. 

The site uses TypeScript types to ensure every language has every string (again, they have English fallbacks if missing too) by using [TypeScript's `typeof`](https://github.com/microsoft/TypeScript-Website/blob/17e12cf6c688187acb6afdbc2034d5df921057c6/packages/typescriptlang-org/src/copy/en.ts#L18).

##### Uplifting Translators

I want to provide as many tools as possible for folks wanting to pitch in on translations. Their questions and blockers are one of my highest priorities because their work is unique and impusername_0nt.

To give a space for collaboration, we create a channel in the TypeScript Community Discord, then an issue which shows how many files need translating. On a nightly basis, there is a GitHub Action [which updates](https://github.com/microsoft/TypeScript-Website/blob/v2/.github/workflows/nightly.yml) these issues.

Then I [added the ability](https://github.com/microsoft/TypeScript-repos-automation/pull/5) for translators to use the [CODEOWNERS](https://github.blog/2017-07-06-introducing-code-owners/) feature of GitHub as an access route for merging their own PRs.

This means they don't need to rely on one of the TypeScript team to merge PRs (if all of their PR changes are inside their code owners section) 

I'd like to provide a way to give attribution in the site too, [I have some designs which handle this for individual documents](https://www.figma.com/file/x8FJrNqj6oupqWn1s3uMg4/Website?node-id=7%3A1) (see the bottom) and I've still got to think about how it could be done for something more complex like the playground/tsconfig.


---

Given that the translation effort is still a work in progress and has only really started in the last two weeks - there's been a lot of great work happening so far! 

- English (making more pages use the strings techniques for internationalization)  by @evanSe

- Japanese from @Quramy @Naturalclar @takefumi-yoshii  and @sasurau4 

![Screen Shot 2020-02-18 at 5 35 21 PM](https://user-images.githubusercontent.com/49038/74784052-0e224680-5275-11ea-8801-8e908229ba9b.png)

![Screen Shot 2020-02-18 at 5 44 08 PM](https://user-images.githubusercontent.com/49038/74784615-4d9d6280-5276-11ea-9be6-b0d14f975e70.png)


- Spanish from  @KingDarBoja @carburo

![Screen Shot 2020-02-18 at 5 42 28 PM](https://user-images.githubusercontent.com/49038/74784519-116a0200-5276-11ea-8042-cc03afc8dcbc.png)


- Chinese from @kingwl 
![Screen Shot 2020-02-18 at 5 33 52 PM](https://user-images.githubusercontent.com/49038/74783963-da472100-5274-11ea-8d58-65440dc91c62.png)
<issue_comment>username_0: Not an essay (as it's half-way through the usual 2 weeks cycle) but I gave an internal talk on all the different parts of the TypeScript website for the team which is on YouTube. It's an hour long and I feel like I mostly covered everything at a high level.

<a href='https://www.youtube.com/watch?v=HOvivt6B7hE'><img src='https://user-images.githubusercontent.com/49038/75156565-61b2eb00-56e0-11ea-823d-1d22c500f2ff.png'></a>

### [It covers](https://gist.github.com/username_0/a5421f0fa9ef345dd4b82872f06983fc):

- How to stay up-to-date, and how I give progress info
- How I worked on the design
- [Why Gatsby](https://www.gatsbyjs.org/blog/2020-01-23-why-typescript-chose-gatsby/)
- Monorepo overview
- Moving through some React pages
- How docs get generated
- How internationalization works
- What automation is in place
- What new tools were built to make it all work
- Some Qs
<issue_comment>username_0: ![giphy 2020-03-03 11_09_16](https://user-images.githubusercontent.com/49038/75794890-71b17700-5d3f-11ea-9a41-8eff0e6edd82.gif)

### V2 Release Candidate

I'm starting to wrap up the v2 site now, I'm pretty sure that all pages and urls are accounted for and everything I wanted in for launch.

I think it's worth taking the time to look back at one of my first issues on the TypeScript repo as a team member: [""What do you not like about the TypeScript Website and Documentation?""](https://github.com/microsoft/TypeScript/issues/31983)

This issue defined the larger roadmap for my last 6 months as the main focus of my work in both upgrading the existing site infra, and preparing the next generation.

### Fully Addressed

- **There’s no search for the documentation** (67 :+1:)
- **Mobile Navigation can be difficult** (03 :+1:)
- **Website is closed source** (34 :+1:)
- **There isn't a page to share with non-technical folk** (13 :+1:)

The new site has new navigation, and search is a core component to that! There's a non-technical doc on TS, but I've not [found a place for it yet](http://www.typescriptlang.org/v2/why-create-typescript)

- **Official TypeScript Playground isn't as good as open-source alternatives** (47 :+1:)
- **Short, shareable URLs for the playground** (15 :+1:)

The new playground is stunning, well documented and best of breed. 

- **Better description of tsconfig options** (40 :+1:)
- **Examples with different settings (for different use cases / scenario)** (00 :+1:)
- **Provide guides for turning on specific compiler flags** (22 :+1:)
- **Can't link to docs for specific compiler options** (01 :+1:)

The tsconfig reference covers almost every compiler option with a comprehensive example. 

- **Lack of index page for Release Notes** (39 :+1:)
- **""Utility Types"" page not up-to-date** (46 :+1:)
- **Tutorials which focus on comparing TS to other ** (06 :+1:)
- **Advanced Types page does not include Omit<T, K> type.** (09 :+1:)
- **Code samples could do with better colors** (03 :+1:)
- **Linked TypeScript Language Specification is completely out of date** (26 :+1:)

The docs and handbook v1.1 changes cover all of these, I actually started moving some docs out of the advanced types page and into their own pages in the handbook. 

The v1.1ness of the Handbook brings over some of the opening v2 handbook pages and it restructures the handbook from a single ""Handbook"" (23 pages) to

- Getting Started (5 pages)
- Handbook (8 pages)
- Handbook Reference (17 pages)

Which should provide a bit more focus.

### Mostly Addressed

- **playground which explains syntax** (15 :+1:)
- **fourslash playground** (06 :+1:)

There's now a plugin API for the Playground, so anyone can fix these. I have a twoslash playground, but I've not investigated how feasible it would be to port fourslash to the web. 
It could be trivial, or it could not be and it may never get an update again.

- **Make better navigation between topics and titles** (03 :+1:)

I've got the designs, I've just not built this bit yet. Dropped it for launch, but it should happen.

### Partially Addressed

- **API documentation that only exists in release notes** (62 :+1:)
- **Use more real-world examples** (11 :+1:)

The extensive Playground samples didn't exist before this issue, and they were built with very ""everyday"" code, e.g. using ""APIResponse"" types instead of ""FooBar"".
These are built and hyperlinked, with incentives for reading all of them to give folks a second introduction to daily TypeScript usage. 

They're not a full v2 handbook, but they're a much better than it was mid last year.

- **Collect documentation, blog, and other official resources to one place** (05 :+1:)
- **Highlight community projects** (07 :+1:)

In v2 there's a better, and more expansive [community page](http://www.typescriptlang.org/v2/community).
Originally, I was thinking of relying on meetup.com more to make this _very_ rich, but in the end meetup.com turned out to be a bit unstable after the WeWork acquisition and I didn't feel comfusername_0ble relying on them too much in the new version.
There's still space for things in there, I've got this issue [with ideas](https://github.com/microsoft/TypeScript-Website/issues/63)

- **There isn't a glossary of type names** (50 :+1:)
- **Provide clear documentation on how to add custom type definitions** (11 :+1:)
- **No obvious reason why docs would be in the wiki vs handbook** (06 :+1:)
[Truncated]
I think we could _maybe_ provide a definitive ""eslint with typescript"" doc, but why compete with the official docs for [typescript-eslint](https://github.com/typescript-eslint/typescript-eslint/blob/master/docs/getting-started/linting/README.md) when we could link to it instead.
Then it's a bit more of a question of ""where do we link to it?""

- **There is nothing covering the most commonly-hit errors or TypeScript limitations.** (07 :+1:)

This is basically an infinite list, there is [already a _massive_ FAQ](https://github.com/microsoft/TypeScript/wiki/FAQ) and more can be added to it over time. 

--- 

I'm sure there will be a bunch of bug reports when we switch to v2, but the foundations have felt pretty solid for a while now. 

After the flurry of bug fixes, I'll be switching over to bug fixes on the compiler for a while full time so that I can understand and document the compiler API better. 

I'd still expect updates to this issue because I still can think of a bunch of doc & infra updates which I'd like to see and talk about. 

Things I'll be thinking about in the meantime:

- Creating the next ""What do you not like about the TypeScript Website and Documentation"" issue. Perhaps with a focus like: ""What parts of TypeScript are under-documented, and how can we improve?""
- Handbook v2
- Specific pages which help you understand a single concept
<issue_comment>username_0: Hey folks, yeah, it's been way over a month. That said, this month has been more like 6 months of pre-2015 time, so I don't think anyone's judging. 

I ended up taking the time I use to write these updates to write up more official release notes for the blog. Given that it's during a TypeScript beta phase though, I usually tone down the amount of work I do on the site / docs to less than a day a week and just focus mainly on compiler bugs and some DefinitelyTyped stuff.

### Deployment 

https://github.com/microsoft/TypeScript-Website/issues/385 triggered a lot of ""we really need to grok how all the azure side works"".  So, I set up a new staging website, which is easy to memorize www.staging-typescript.org which uses azure as a completely static site. I've been using that more than the `/v2/` folder on the website.

### Infra

I shipped all the node modules which power the v2 site:

  - https://twitter.com/username_0/status/1248625441687998471?s=20
  - https://twitter.com/username_0/status/1248625266022182919?s=20
  - https://twitter.com/username_0/status/1248625051257065475?s=20

### REPL

Playground Plugins have been getting some adoption:

<ul>
<li><a href=""https://github.com/username_0/playground-slides"">Slides</a> - Create presentations which use the Playground</li>
<li><a href=""https://github.com/gojutin/playground-plugin-challenges"">Challenges</a> - Convert successively harder JavaScript files to TypeScript</li>
<li><a href=""https://github.com/username_0/playground-plugin-tsquery"">tsquery</a> - Run <a href=""https://github.com/phenomnomnominal/tsquery"">TSQuery</a> queries against your code</li>
<li><a href=""https://github.com/gillchristian/tsplay.dev/tree/master/playground#typescript-playground-link-shortener"">Link Shortener</a> - Create short-links for your current playground code and compiler settings</li>
<li><a href=""https://github.com/Quramy/ts-playground-plugin-vim#typescript-playground-vim-plugin"">Vim</a> - Provides Vim keybindings for TypeScript Playground editor</li>
<li><a href=""https://github.com/EmNudge/ts-playground-plugin-github-explorer"">GitHub Explorer</a> - Let's you choose TypeScript files from a GitHub repo</li>
</ul>

And this morning I built one to show [Code Flow Analysis nodes](https://github.com/username_0/playground-code-show-flow) for your code.

The plugin system paid off quite a lot because it made creating separate playground instances on the website easy.

I started work on the Bug Workbench based off https://github.com/microsoft/TypeScript/issues/35389, which was a feature that re-used the web infra modules to create single file bug reports which are _almost_ the same as how we write tests in the compiler. This means we can request bug reports in this format, which then automated tooling can keep track of regressions and fixes

![Screen Shot 2020-04-17 at 8 50 07 AM](https://user-images.githubusercontent.com/49038/79571023-754b5400-8088-11ea-833e-7d766f7fa6c1.png)

You can [see here](http://www.staging-typescript.org/dev/bug-workbench/?#code/PTAEAEDsHsEkFsAOAbAlgY1QFwIKQJ4BcoAZgIbIDOApgFC1b6LWgCikW2+oAvKAN61QoStHjUAImSzViUmaAA+oSAFdkyANy0AvqABkoABT9QqACbFKWAE6pIAc02g9y0xeJr4AI2o3nOgCU9IzMoABK0ADu4dSQ5n5+ALLUWGQAPAAqsJCIqlig1AAeMvGUAjoAfLwCQqAA2gDW1Nz2oM340CSg2bn5ALrEph3EHc7oZIic0JBWtvZOpNA28NIyNgD8xEYAbhSqsj05eVhNLf2BvNXWdo4B2joMTCyRMXEJNn5Zx-mFJe-lfhVGqvWLxRI2FJpb59LCVM6dbqg94QqEZXonSr9bS0dAzaygGTWYjI8GfGzpdicRjVPiCYQjUAAclE4nk1CZABo6hMpqgZsQmUluOyuXUSMtVlh1ts9sgDpceNU5QdQBtQCrqAA6LDQADK80cRkugoAtEzQCANftDmQCLQrcInc7hAA9Da6eh4yAErAAC1QlFglAActAsJk-dRg5QDsQAApkGycCjpUkfZKpDJUriVWm1YSsyTSQ70p2MlliYsyMXO3nTWbM4WgUXc50SlZrPyym2K5U2tXW+Xa3UG24OY2gM0Wq2auQlpQqdTIB1gF3rt0e4SPHRAA) a link where you would expect the types to be the same, but you can see in ""assertion found"" that they are different.
<issue_comment>username_0: It's been a while ey.

Progress has been slow, in part because I've been doing compiler / [DT work](https://devblogs.microsoft.com/typescript/changes-to-how-we-manage-definitelytyped/) full time and the sort of work which gets highlighted in here has been happening in my spare time since March. Thanks to COVID and the need to protest, I really don't have as much spare time to write software as I used to.

### Shipped npm modules

- [`@typescript/vfs`](https://www.npmjs.com/package/@typescript/vfs) - A Map based TypeScript Virtual File System.

  ```ts
   import { createSystem, createVirtualTypeScriptEnvironment } from '@typescript/vfs'
   import ts from 'typescript'
 
    const fsMap = new Map<string, string>()
    // ... fill  fsMap
    const system = createSystem(fsMap)
 
   const compilerOpts = {}
   const env = createVirtualTypeScriptEnvironment(system, ['index.ts'], ts, compilerOpts)
 
   // You can then interact with the languageService to introspect the code
   env.languageService.getDocumentHighlights('index.ts', 0, ['index.ts'])
  ```

- [`@typescript/twoslash`](https://www.npmjs.com/package/@typescript/twoslash) - Compiler-back Code Samples

  A markup format for TypeScript code, ideal for creating self-contained code samples which let the TypeScript compiler do the extra leg-work. Inspired by the fourslash test system.

  Used as a pre-parser before showing code samples inside the TypeScript website and to create a standard way for us to create examples for bugs on the compiler's issue tracker.

  You can preview twoslash on the TypeScript website here: https://staging-typescript.org/dev/twoslash

- [`gatsby-remark-shiki-twoslash`](https://www.npmjs.com/package/gatsby-remark-shiki-twoslash) - Rich TS code samples for gatsby

  Powers the introspectable code samples in the TypeScript website, which lets users get the same hover inspection as your editor but statically and built ahead-of-time.

  I made an [example blog](https://gatsby-twoslash-shiki-blog-example.now.sh/new-beginnings/) and showed [how to set it up here](https://github.com/username_0/gatsby-twoslash-shiki-blog/pull/1)
<issue_comment>username_0: Surprise, it's a double post to make up for lost time.

Since I mentioned the site was at RC, it has gone through some changes to try get the design past reviews, and an accessibility audit which is mostly on track now to be wrapped this weekend. With the goal of flipping the switch on the day of the 4.0 RC in early august. 

### Docs

I've started to focus on the content of the site given the plumbing is all there

 - [Creating .d.ts files from JS](https://www.staging-typescript.org/docs/handbook/declaration-files/dts-from-js.html)
 - [Revised the mixin docs from scratch](https://github.com/microsoft/TypeScript-Website/pull/719)
 - [Creating a JS section](https://github.com/microsoft/TypeScript-Website/pull/722)
 - [Docs on babel + TS projects](https://github.com/microsoft/TypeScript-Website/pull/699)
 - There's now a [handbook index page](https://www.staging-typescript.org/docs/handbook/)
 - The TSConfig reference now includes all options and not just `compilerOptions`
 - [There's an experimental new search UI](https://github.com/microsoft/TypeScript-Website/pull/690)
 - [Work on improving the .d.ts templates](https://github.com/microsoft/TypeScript-Website/pull/543)
 - [There is an explicit JSDoc reference page](https://www.staging-typescript.org/docs/handbook/jsdoc-supported-types.html) (I'm really happy with how the twoslash code samples work here)


### Playground Changes

- The Playground Plugin infra system got a design system, which makes it trivial to handle most of the normal plugin UI
- I built [a collaborate plugin](https://github.com/username_0/playground-collaborate) for the Playground to make it multiplayer (server seems buggy ATM)
- I built a very polished plugin which [shows you each step of the transformer pipeline used in JS/DTS emit](https://github.com/username_0/playground-transformer-timeline)
- I got a WIP AST viewer in the playground, it's good but slow
- I've been reading up on web-workers to try move 
- I've shipped a few PRs to monaco-typescript to fix playground bugs
- Android support in the Playground is now OK, not terrible 
- All the infra to build monaco and monaco-typescript now lives in the Microsoft org

I have an idea how to build multi-file Playground, so there's a possibility that could happen in the future at some point. Follow [this PR](https://github.com/microsoft/TypeScript-Website/pull/687) for updates.

### Misc

- [I gave a talk](https://www.youtube.com/watch?v=8qm49TyMUPI&t=674s) on the constants the TS team put on the language and themselves to avoid negatively influencing JS
- [I've been running docs review meetings](https://github.com/microsoft/TypeScript/issues?q=is%3Aopen+is%3Aissue+label%3A%22Docs+Meeting+Notes%22) to get some of the folks who know the raw details to show me the right way to doc things
<issue_comment>username_0: Subscriber bonus triple post. I spent some time building out a tool which is **a bit like DefinitelyTyped but for TSConfig files**.

This comes from a few pains:

 - When a framework requires a tsconfig, you can't differentiate between your settings and their settings
 - Does anyone really know the right TSConfig for a node 10 vs node 12 app?
 - TypeScript's infinite backwards compat goals means that we don't have a way to get people to set flags the way we recommend

The last one is particularly tough for us, the 'recommended' settings is basically the result of 'tsc --init` which is something someone does once per project and never again used. No versioning, and when we update - it's not even in the release notes.

### [TSConfig Bases](https://github.com/tsconfig/bases)

This solves the problem by using NPM in the same way `@types` does. If you have a TypeScript node 12 project

Then you add the dep:

```sh
npm install --save-dev @tsconfig/node10
yarn add --dev @tsconfig/node10
```

Then use [`extends`](https://www.staging-typescript.org/tsconfig#extends) to build on that base:

```json
{
  ""extends"": ""@tsconfig/node12/tsconfig.json""
}
```

That's it as a consumer. Now when you add compiler flags, they are always for your project and not for the runtime target:

```json
{
  ""extends"": ""@tsconfig/node12/tsconfig.json"",
  ""compilerOptions"": {
    ""strict"": true
  }
}
```

### Recommended

[It's still a WIP](https://github.com/tsconfig/bases/pull/15), but I'm trying to get consensus on a `@tsconfig/recommended` base which would be a base that we think most people should have set up. 

### Current

I've added base TSConfig files for these environments so far:

- `deno`
- `node10`
- `node12`
- `react-native`
- `svelte`

### Built in Deno 

This is a project built in [Deno](https://deno.land) which, ironically enough, vendors out npm packages. It's mostly scripting and GitHub Actions but Deno makes a great scripting environment which I've used again since.
<issue_comment>username_0: Now that foundations are down, I've been plugging on some of the content holes in the docs.

### Mixins Doc pt 2

Mixins are a design pattern which allows for multiple inheritance in class heirarchies. It's an interesting design pattern and TypeScript bends itself into some interesting shapes to support it. I ran a [docs design](https://github.com/microsoft/TypeScript/issues/39118) meeting with the rest of the team to figure out hw we should be documenting it and shipped a revised version of the docs.

https://www.staging-typescript.org/docs/handbook/mixins.html

### JavaScript Docs Section

I've taken all of the docs relating to JavaScript projects using TS-powered editors and added a few docs I had in PRs to create a new ""JavaScript"" section:

- It covers the basics like `// @ts-check` and using JSDoc to get types
- Then a deep dive into how TS infers JS
- A JSDoc support reference
- Then how to create .d.ts files from a JS project

This should provide a good starting point for people who use vanilla JS and want to get some extra tooling for little effort.

https://www.staging-typescript.org/docs/handbook/intro-to-js-ts.html

_Note: I'm really happy with the twoslash support in the JSDoc reference. There's something cool about it proving the way the type system works which is much more satisfying then it is with just TypeScript for me._

### Babel vs TS Doc

When should you use TypeScript or Babel for TypeScript support? Good question and there's no simple 1-liner to answer that, so now there's a doc on it:

https://www.staging-typescript.org/docs/handbook/tutorials/babel-with-typescript.html
<issue_comment>username_0: ## Compiler-back Bug Repros

![giphy-3](https://user-images.githubusercontent.com/49038/86540917-60879b00-bed6-11ea-874e-f73fe3f2ea2a.gif)
[source](https://giphy.com/gifs/l3nSQg4ZcjBhbgzrq)

Keeping on top of compiler bugs is hard work, even just hitting watch on the TypeScript repo gets you many hundreds of emails a day from GitHub. Proving and validating a bug is easier now, thanks to the Playground improvements (supporting many TS versions, a lot more compiler flags etc), but it's still hard to keep on top of and Ryan C basically lives in an almost permanent state of triage in our issues.

To give us the chance to improve our bug reports via automation, I wrote [an RFC pitching that we can support letting people write compiler backed bug reports](https://github.com/microsoft/TypeScript/issues/35389) in issues/comments which we can use to know when a bug is fixed, and if it has regressed in the future.

There are two parts to this system:

 - Making good bug reports
 - Verifying Bugs

#### Making Good Bug Reports

This is done by offering a web-app which gives you real-time information about the bug report you are making. Here's an example of the bug workbench which shows an inconsistency in the way we present a particular type  ( https://github.com/microsoft/TypeScript/issues/39262 )

<a href=""https://www.staging-typescript.org/dev/bug-workbench/?#code/PTAEAkHsDcFMCdQAMAqTQGcAWkDuHQBvUAQwC5QBWUAXwFgAoAFwE8AHWUFUAXlAAUAlgGMA1gB5i5KgBpQAIwoAiDE3iCAdgHMltOUpJKAfI0YgIMBMgAe6bHgJCxk0hUpzFoFWs069XwxMGcyg4RFQ7HHwiVypaRgATWGEAGxJ4TmFIDVVQFgoUMzBQEtKy0AA9AH5E5LSM0CycplBrAoBuIvLusurGIA""><img width=""1238"" alt=""Screen Shot 2020-07-05 at 3 19 02 PM"" src=""https://user-images.githubusercontent.com/49038/86540393-ef92b400-bed2-11ea-9607-1000a346916c.png""></a>

The app uses the same [twoslash](https://www.npmjs.com/package/@typescript/twoslash) syntax we use in [code snippets inside the TypeScript website](https://github.com/microsoft/TypeScript-Website/search?q=ts+twoslash&unscoped_q=ts+twoslash&type=Code) to highlight type information for a particular identifier. The workbench calls the results of these queries assertions, you can assert things like:

- Compiler errors
- What an identifier says it is (like above)
- The emitted .js/.d.ts/.map files from a sample
- Completion entries

The site's goal is to teach you the syntax, and get you making repros quickly, so there's a lot of documentation in the app:

<a href=""https://www.staging-typescript.org/dev/bug-workbench/?#code/PTAEAkHsDcFMCdQAMAqTQGcAWkDuHQBvUAQwC5QBWUAXwFgAoAFwE8AHWUFUAXlAAUAlgGMA1gB5i5KgBpQAIwoAiDE3iCAdgHMltOUpJKAfI0YgIMBMgAe6bHgJCxk0hUpzFoFWs069XwxMGcyg4RFQ7HHwiVypaRgATWGEAGxJ4TmFIDVVQFgoUMzBQEtKy0AA9AH5E5LSM0CycplBrAoBuIvLusurGIA""><img width=""1238"" alt=""Screen Shot 2020-07-05 at 3 26 57 PM"" src=""https://user-images.githubusercontent.com/49038/86540510-fd950480-bed3-11ea-8594-eaef2c6478ba.png""></a>

I've been using it to write code samples for the TypeScript v2 website as it's faster than using my text editor and the CLI.

#### Verifying Bugs

Once you've got your repro, it gets pasted into an issue or a comment on an issue. From here it gets picker up by the verification tools. This is a GitHub Action you can find at [microsoft/TypeScript-Twoslash-Repro-Action](https://github.com/microsoft/TypeScript-Twoslash-Repro-Action/) and its job is to run nightly and provide useful information about the state of your compiler-backed bug report.

You would write a repro like:

<img width=""1061"" alt=""Screen Shot 2020-07-05 at 3 04 33 PM"" src=""https://user-images.githubusercontent.com/49038/86540568-65e3e600-bed4-11ea-887a-35e1ca3968e6.png"">

Then overnight the bot would post something like this:

<img width=""1063"" alt=""Screen Shot 2020-07-05 at 3 32 17 PM"" src=""https://user-images.githubusercontent.com/49038/86540611-be1ae800-bed4-11ea-8fce-b8d1f983a885.png"">

Expanding the historical section, you can see that the verification step has also checked the repro against older builds:

<img width=""1065"" alt=""Screen Shot 2020-07-05 at 3 33 22 PM"" src=""https://user-images.githubusercontent.com/49038/86540663-f6222b00-bed4-11ea-806d-8351d40009c1.png"">

So, it looks like the bug only existed for 3.8 and 3.9. This bug was looked at after I created the repro and is actually fixed now, so the nightly run updates the original comment and posts _a new comment_ (so you get emails) telling you of the state changes and giving SHAs for the TypeScript releases between which the repro got different assertions so you can verify and 🎉 the fix.

<img width=""1039"" alt=""Screen Shot 2020-07-05 at 3 37 29 PM"" src=""https://user-images.githubusercontent.com/49038/86540765-8496ac80-bed5-11ea-9a8a-1744504844cc.png"">

--- 

This should probably be put into action next week on the TypeScript repo, I mainly need to polish up the markdown that the bot posts and add a few integration tests, but the idea is now sound. Shout out to [@arcanis's Sherlock](https://github.com/arcanis/sherlock) which highly influenced this project.
<issue_comment>username_0: Saying that in a comment will trigger a job on Azure DevOps which builds and uploads a gzipped tarball. People can use
people can install TypeScript from this tarball via npm. I wanted to extend this process to start building a copy of the 
website with that version also. 

This turned out to be a one-line addition to the DevOps build, and used a feature of GitHub Actions which lets you 
send trigger webhooks to a GitHub repo. These are called [repository dispatches](https://help.github.com/en/articles/events-that-trigger-workflows), 
and they're powerful but limited. A dispatch can include a 100-character string, in this case I had the publishing
process send the pull request ID.

This string can be grabbed from a JSON file which you can find at `$GITHUB_EVENT_PATH`. This is enough information 
for the rest of the workflow to find the tarball from the comments in the pull request, and use that to create the 
necessary copies of monaco. 

To hook that up, I added a new yml workflow file in the repo which is triggered when a repository dispatch event
is received by GitHub:

```yml
name: Build a version of TypeScript on request
on: repository_dispatch

# This workflow is triggered from an API call where XXX is your token
# and YYY is the PR that it should look at.

# curl https://api.github.com/repos/microsoft/typescript-make-monaco-builds/dispatches \
#   -XPOST \
#   -H 'Content-Type: application/json' \
#   -H 'Accept: application/vnd.github.everest-preview+json' \
#   -H ""Authorization: token XXX"" \
#   --data-binary '{ ""event_type"": ""YYY"" }'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        with:
          node-version: ""10.x""
          registry-url: ""https://registry.npmjs.org""

      # Lets us use one-liner JSON manipulations on package.jsons
      - run: ""npm install -g json""

      - name: Publish PR Build
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        run: |
          yarn install

          PULL_REQUEST_NUMBER=$(json -f $GITHUB_EVENT_PATH action)
          echo ""Publishing Monaco based on $PULL_REQUEST_NUMBER""

        ...snip
```

## Release Deploys

Finally, we need to be able to create release builds. These are triggered by creating a git tag for the version 
locally, then pushing the tag up to the origin. The [tag workflow](https://github.com/microsoft/typescript-make-monaco-builds/blob/master/.github/workflows/ship_tags.yml) 
is almost the exact same as the [scheduled nightly workflow](https://github.com/microsoft/typescript-make-monaco-builds/blob/master/.github/workflows/nightly.yml).

## Next Steps

That's it for GitHub Actions in building and deploying custom builds of the TypeScript playground. 

GitHub Actions takes a lot of the best practices in continuous integration services like in-repo config, shared actions
and they provide a fast and consistent way to build automation into your daily work. 

Building off the webhook system is a powerful abstraction, and prior to GitHub Actions I spent about 2 years building
a similar system [called Peril](https://artsy.github.io/blog/2017/09/04/Introducing-Peril/). I feel good about where
GitHub Actions is and where it will go. 

[m-ts]: https://github.com/microsoft/monaco-typescript/
[m-ed]: https://github.com/microsoft/monaco-editor/
<issue_comment>username_0: ### Playground Collab v2

Hey folks, this is as good a place to announce as anywhere else, but I've shipped a new build of my multiplayer version of the Playground. The main goal was gross simplification.

To be frank, I'm not building something as good as [live share](https://visualstudio.microsoft.com/services/live-share/) in my spare time, so I needed to figure out how to cut enough features that I could build it myself. My goal was to have something which works for 2+ people in a video/voice chat who can share a single Playground. E.g. our design meetings.

This actually means that I can cut features because you have a way to communicate, and it's not on this tool to do that:

 - Concurrent editing (""Hey, let me edit for a second"")
 - Realtime (""OK, look here"")
 - Perfect Presence, e.g. knowing you are the first in a room or last (""OK, I'm heading out"")

Now that it's actually feasible for me to build it. I set up a TypeScript owned [SignalR instance](https://dotnet.microsoft.com/apps/aspnet/signalr) which I essentially treat as a client-to-client multicast server. In v1 you used to log in via Oauth, in v2 there's no authentication - you just set a name, room and hit connect. 

![Screen Shot 2020-07-12 at 2 17 29 PM](https://user-images.githubusercontent.com/49038/87253595-76eba480-c44a-11ea-8f23-ce0e0991347e.png)

I was generally embarrassed at how janky the authentication was. Auth is like the top of the user-funnel, and you want to just look at some code, it's not gonna be stored or too private if it fits into a playground. It didn't need to be there. Now it's trivial to set up and collaborate:

![Screen Shot 2020-07-12 at 2 21 35 PM](https://user-images.githubusercontent.com/49038/87253670-01cc9f00-c44b-11ea-8d44-66c407e0a7d8.png)

How it works is every 3 seconds all connect clients send a message to each other which:

 - acknowledges they are still around
 - sends their room, username and selection in the editor
 - potentially includes a `lastRequestedWriteAccessTime`
 - maybe sends the new playground code if they have ever requested access `lastRequestedWriteAccessTime`
 - the time the message was sent

Each client then keeps a map of the usernames to their last messages and updates the UI which is roughly:

 - Filter any users which haven't sent a message in 10s
 - Determine which user (including myself) requested access last
 - If it was themselves, then they still have write access otherwise stay in readonly mode
 - Update the code from the last sender
 - Update cursors in the browser

You can try it by clicking on this link: https://www.staging-typescript.org/play?install-plugin=playground-collaborate
<issue_comment>username_0: Hi folks - got a 3 reasonably interesting updates from the weekend, first up, the site now has a color theme switcher for light/dark based on the work of @dandelionadia. There's no flash when you reload (usually noticeable when the choice is the opposite to your OS preference) and the design has space for allowing you to choose the code samples dark/light-ness in the future.

![2020-07-20 17-28-18 2020-07-20 17_30_45](https://user-images.githubusercontent.com/49038/87988745-d41cd100-caae-11ea-9ed2-bac1634fdc7d.gif)

Next up is that the final parts of the internationalization efforts is done. This is the work for getting all of the markdown documentation in order, which means per-language sidebars and individual pages. You can see here a lovely l33t-sp33k port of the Basic Types page in the docs.

![Screen Shot 2020-07-20 at 5 39 49 PM](https://user-images.githubusercontent.com/49038/87989443-08dd5800-cab0-11ea-9777-e119120cd8d0.png)

This wraps up the final pieces of internationalization, with the site almost launched then hopefully we can get more languages fleshed out!

Finally, a fun one is that the compiler-backed code samples infra I talked about earlier is now [up-and-running on microsoft/TypeScript](https://github.com/microsoft/TypeScript/labels/Has%20Repro) and I built out a bot for letting folks know when a repro has been requested or received on an issue making it a good way for people to test their 'is this a bug' skills

![Screen Shot 2020-07-20 at 5 51 14 PM](https://user-images.githubusercontent.com/49038/87990260-a2593980-cab1-11ea-84d7-a3e286c467ba.png)
<issue_comment>username_2: Consider using a tri-state selector for the Theme, or at least default to the OS preference for Light/Dark mode.

See this thread for examples: https://twitter.com/username_2/status/1176875699526873089
<issue_comment>username_0: It's not strictly TypeScript Web Infra, but I've been working with the Svelte team for the last few months on getting TypeScript support and tooling to feel native. It's pretty cool work, you can read more here: https://svelte.dev/blog/svelte-and-typescript
<issue_comment>username_0: ## Deployment

I'm a pretty conservative programmer with respect to dependencies. I come from a native Mac/iOS background and basically everyone in that ecosystem is conservative. 

For example, one of the threshold moments in my career was the rejection of of advice from an Apple developer rep when they said I should remove all my dependencies in our iOS app and write all the code myself ranging from image rendering to networking. I disagree now, and I disagreed then. Shared concerns can be shared with others. Understanding this is why I worked (and still occasionally help out) on the iOS dependency manager [CocoaPods](https://cocoapods.org) for almost a decade.

The JS eco-system won the race to the bottom for ease of sharing dependencies (did you know [you don't even need](https://github.com/npm/read-package-json#indexjs) a package.json for an npm module?) This has it's advantages for sure, but I think the trade-off for this scale is that you you lose some of the useful human elements in the automation to make it work. 

( There's a good book on where the balance in humans and machines can lay, [Machines of Loving Grace](https://www.harpercollins.com/products/machines-of-loving-grace-john-markoff) which details the battles between [AI](https://en.wikipedia.org/wiki/Artificial_intelligence) and [IA](https://en.wikipedia.org/wiki/Intelligence_amplification) where AI effectively won at our cultural loss. )

The symptoms of an over reliance on automation tends to be a lot of small dependencies with get hard to grok automated changelogs, a README covering a subset of the API, automatic deploys directly from master and often an embarrassingly large dependency tree ( the TS v2 website has an astounding 1,778 folders in node_modules despite my attempts to keep it down (but hey the pages loads in 0.x seconds and has close to no deps for users ) )

I try to avoid some of these pitfalls when working in the JavaScript ecosystem, [Danger JS](https://danger.systems/js/) ([36](https://bundlephobia.com/result?p=danger) resolved deps) is a good example of a tool which can be used to provide more of a human touch to a project (by providing primitives for enforcing useful changelog entries, comparing READMEs to exposed APIs etc)

Over the years, I've accrued quite a few different ways to handle npm module deployment, and yesterday after making yet another new way to handle deploys I figured it was worth listing them and when they are a good fit.

### PR Driven Deploys

When basically all your source code contributors have write access (a.k.a work projects) then you can declare at the PR level whether merging this PR should trigger a deploy or not. The versioning system for patch, minor or major would be derived from labels. I started building this and then was pleased to discover that @hipstersmoothie had already got really far in the process via [auto](https://github.com/intuit/auto#readme) and opted to [write up how it worked instead](https://artsy.github.io/blog/2019/01/03/label-based-prs/).

### Nightly Deploys if Needed

For projects which sometimes see a burst of activity, then periods of rest. For example in the [TSConfig bases repo](https://github.com/tsconfig/bases) which checks the git history and determines if there were changes before [deploying](https://github.com/tsconfig/bases/blob/master/.github/workflows/deploy.yml):

```yml
- run: |
    # Have commits been added in the last day?
    if [[ $(git log --pretty=format: --name-only --since=""1 days ago"") ]]; then
      git log --pretty=format: --name-only --since=""1 days ago"" bases | deno run --allow-read --allow-run --allow-env scripts/deploy-npm-packages.ts
    fi
  env:
    NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}
  name: 'Deploy built packages to NPM'
```

Nightly deploy trains offer the chance to make sure everything is right before actually deploying. E.g. if contributors didn't add CHANGELOG entries, or if a human needs to re-run automation ahead of time.

This commit log checking style only works well if you are working with a single module, so for monorepos I have a [GitHub Action monorepo-deploy-nightly](https://github.com/username_0/monorepo-deploy-nightly) which is a bit more nuanced. We use this for nightly builds in the [Svelte Language Tools repo](https://github.com/sveltejs/language-tools/blob/master/.github/workflows/Deploy.yml) and I'll switch the TypeScript website deploys to this when v2 is on production.

### Git Tag Based Deploys

Some projects require a distinction between production and staging. Deployments to staging can be done on master merges or nightly that's pretty reasonable, then a production deploy can happen when you push a tag. This is how the Svelte [VS Code extension production deploys work](https://github.com/sveltejs/language-tools/blob/master/.github/workflows/DeployExtensionsProd.yml).

### Comment Based Deploys

This is, in part, how TypeScript [deploys work](https://github.com/microsoft/TypeScript/wiki/Triggering-TypeScript-Bot) - here's [the start of the 4.0 infra](https://github.com/microsoft/TypeScript/issues/38510#issuecomment-647902563). A bot/GH action can be registered for issue comments, verify the author has write access and then start doing the work. You can use the search term chat-ops to find some [interesting ideas](https://speakerdeck.com/jnewland/chatops-at-github) around this.

### Version Check Master Deploys

This is useful when you have a rarely edited but well used dependency, I added this to [dtslint](https://github.com/microsoft/dtslint/blob/master/.github/workflows/Deploy.yml) last night:

```yml
name: Deploy to npm

on:
  push:
    branches:
      - main
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          registry-url: ""https://registry.npmjs.org""

      # Ensure everything is set up right
      - run: ""npm install""
      - run: ""npm test""

      - uses: username_0/npm-should-deploy-action@main
        id: check

      - run: ""npm publish""
        if: ${{ steps.check.outputs.deploy == 'true' }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
```

I built out a GitHub Action which compares the package.json version against npm's and that has a build output of whether to deploy or not. This is a nice abstraction because it's secure, note that the npm auth token is in a completely separate step so even if that repo is compromised then the worst it can do to dtslint is tell it to  deploy at the wrong time which would fail.

For monorepos which only deploy to npm, like the TypeScript Website v2 I use [pleb](https://github.com/wixplosives/pleb) to deploy only when the versions have changed.

### Manual Deploys

For Danger in JS and Ruby, I still deploy manually from my computer. These are more unique projects and that's because they are built on the [Moya Community Continuity Guidelines](https://github.com/Moya/contributors/blob/master/Contributing.md) - it's a set of cultural rules to enforce the long term life for impusername_0nt shared dependencies. 

Basically, if you get a PR merged you are automatically invited into the GitHub org with write access. We use the distinction of having the right to publish the final release to npm/rubygems/maven as being the distinction of core contributor vs someone who has the option to help out.  That means if I stop using ruby Danger (I did) and or disappear from the internet ([possible](https://slate.janrainsso.com//static/server.html?origin=http%3A%2F%2Fwww.slate.com%2Farticles%2Ftechnology%2Ftechnology%2F2012%2F03%2Fruby_ruby_on_rails_and__why_the_disappearance_of_one_of_the_world_s_most_beloved_computer_programmers_.html), but unlikely)  then others (~260) have the tools to step up and maintain the repo without me doing anything today.
<issue_comment>username_0: ### Watch Me if You Can

Popular web frameworks made in the last few years have a mode where you can start a local server and see changes as you press save. These are commonly known as watch modes. TypeScript has one!

[Gatsby](https://www.gatsbyjs.org), the JS framework which the TypeScript v2 website is built on, is no stranger to a local build server. Gatsby's dev mode does a great job of keeping track of how changes should propagate through your dev build for example it understands that changing a markdown file should affect a particular page. It's fast and solid, I'm willing to trade some ahead-of-time work while it's setting up to get fast and accurate changes on save. 

Note: keep your eyes on [vitejs/vite](https://github.com/vitejs/vite) and [Snowpack](https://www.snowpack.dev) as a preview of what your JS tools will look like in 2-3 years. When things get drastically simpler due to ES Modules.
 
If the v2 site was a single project repo, then the Gatsby dev server would be enough. However, it's not. It's a monorepo of 12 packages with some being:

- npm JS packages
- web JS packages/bundles
- logical groupings of documentation

Some of these packages have watch modes, but to be fair, it's a bit of a hassle to run many watch mode servers as you're iterating - so what do you do? 

My solution came from the pattern used in React Native under the hood, and that is the tool [Watchman](https://facebook.github.io/watchman/). 

Watchman is a native C++ library which uses your OS file change notification systems and provide a high-ish level API for other languages, JavaScript included.

Running `yarn start` on the TypeScript v2 monorepo starts up both the gatsby dev server and a watchman script via [concurrently](https://www.npmjs.com/package/concurrently). 

I made some changes to the structure of the monorepo in order to make a watcher for the whole repo, and that was to standardize on using `yarn build` in any package would trigger whatever work needed to be done. It was mostly already like this already.

With that done, I created a watchman script which monitors for changes in markdown, TypeScript and JSON files and figures out which package the changes come from. Then it runs `yarn workspace [workspace_name] run build` for that package.

Here's [the file](https://github.com/microsoft/TypeScript-Website/blob/v2/watcher.js), but here's the general gist:

```js
// A script which uses Facebook's watchman to run `yarn build` in different modules
// in a standard monorepo.

const watchman = require('fb-watchman')
const client = new watchman.Client({})
const chalk = require('chalk').default

const projectForFile = (file) => {
  // skip triggering the watcher from derived files, Gatsby grabs those
  if (file.name.includes('/dist/') || file.name.includes('/out/')) return
  if (file.name.includes('/typescriptlang-org/')) return
  if (file.name.startsWith('packages/')) {
    return file.name.split('/')[1]
  }
}

let upcomingCommand = null
let currentProcess = null

// All this is basically a bunch of boilerplate code to set up a watchman
// for the project which looks only at .ts and .md files in the repo.

// Startup watchman
client.command(['watch-project', process.cwd()], function (error, resp) {
    // https://facebook.github.io/watchman/docs/cmd/subscribe.html
  client.command(
    [
      'subscribe', root, 'Monorepo Builder',
      {
        expression: ['anyof', ['match', '*.ts'], ['match', '*.md'], ['match', '*.tsx'], ['match', '*.json']],
        relative_root: path_prefix,
        fields: ['name', 'exists', 'type'],
      },
    ],
    // error handling
  )

  client.on('subscription', function (resp) {
    // NOOP for changes large amounts of files (`yarn install`s)
    if (resp.files.length > 10) return

    // Get the changed files, convert it into an array of changed packages:
    const projectsToBuild = resp.files.map(projectForFile).filter(Boolean)
    const uniqueProjects = Array.from(new Set(projectsToBuild))

    // For simplicity, I don't wanna handle multiple processes
    const commandToRun = uniqueProjects.map((project) => {
      const packageJSONPath = join('packages', project, 'package.json')
      if (!existsSync(packageJSONPath)) return

      // yarn workspaces uses the npm name, not the folder name
[Truncated]
      return buildCommand
    })

    if (commandToRun[0]) {
      if (currentProcess) {
        upcomingCommand = commandToRun[0]
      } else {
        runCommand(commandToRun[0])
      }
    }
  })
})


const runCommand = (argString) => {
  // run the command via `execSync` etc
}
```

This means that as you work in any part of the monorepo with the dev server running, pressing save in any source file will trigger running `yarn workspace [workspace] run build` for that package. The results of building that package will then be picked up by Gatsby's dev server and you'll see the changes in your browser instantly.
<issue_comment>username_0: <p align=""center""><img src=""https://media.giphy.com/media/3o6MbtZrZpYycziQLK/giphy.gif""></p>

Alright, it's happening - I ran `gatsby init` a year ago and today I shipped the new deployment infra for the site (merged PRs go to staging, weekly pushed to prod on a Monday.) In a pleasant surprise all around, the deploy infra worked first time and so it's all out ahead of the announcements which should be appearing in an hour or so. 

### https://www.typescriptlang.org/

Over the year, this project has bounced between the thing I work on full time and a side-project I keep running on TypeScript time. That said, the TypeScript website has been my only free time project since [Flappy Royale](https://flappyroyale.io) (with the svelte TS tooling being a necessary exception) and there's a part of me that really doesn't know what to do with that time now that getting the site done is less pressing. 

I'm planning on doing a live Q&A today at 5:30 EST on the TypeScript Website: https://www.twitch.tv/username_0therox/schedule

In the mean time, I'd like to give some thanks: 

- The TypeScript team, notably @DanielRosenwasser and @RyanCavanaugh whose ideas and code helped provide foundations, and who gave me the space to make it right

- My wife, @dangermcshane who I regularly run copy, designs and ideas though - she's the perfect novice perspective

- The folks in the TypeScript community & discord like @Gerrit0  @dream @d-fischer @MicahZoltu Keith @robertwestbury @Robinlemon @Ethan-Arrowood who use staging and give great feedback

- The translators, who make the long long hours setting up translation infra worth it  @bobstrange @DuGlaser @sasurau4 @Quramy @KingDarBoja @fanyCaz @Kingwl @laosb @khaosdoctor @alvarocamillont @danilofuchs

🍾 🚢
<issue_comment>username_0: Small update on a cool project I built while I took a week off. 

### [Code Owner Self Merge](https://github.com/username_0/code-owner-self-merge)

This is a GitHub Action which can work on any repo to give people merge access on PRs only when files which they have access to change. It uses the existing [CODEOWNERS](https://github.blog/2017-07-06-introducing-code-owners/)
 infrastructure for defining the access control. We've had a bunch of PRs self-merged into the TypeScript website now, so I'll walk you through how it's set up on the website. 

### From a Community Contributor's Perspective

Someone submits a PR, this PR only edits a single translation file in Portuguese

![Screen Shot 2020-08-18 at 11 23 54 AM](https://user-images.githubusercontent.com/49038/90532617-729b6100-e145-11ea-83f8-6a85fdd809d6.png)

This triggers the usual CLA bot, and the Code Owner Self Merge Github Action also replies: it lets @khaosdoctor, @danilofuchs, and me know that this PR can be merged by any of us saying ""LGTM.""

The translation is reviewed, and then @danilofuchs says that the translation looks good and can be merged

![Screen Shot 2020-08-18 at 11 27 47 AM](https://user-images.githubusercontent.com/49038/90532907-c9a13600-e145-11ea-8d8f-dd3e04ab1988.png)

This is a bit of a simplification ( see #926 for more context ) but this is how it looks like as someone contributing.

### Under the Hood

A GitHub Action can run against all sorts of webhooks, for this action we care about: PRs, issue comments and PR reviews. The workflow looks like this: [`.github/workflows/codeowners-merge.yml`](https://github.com/microsoft/TypeScript-website/blob/v2/.github/workflows/codeowners-merge.yml#L14)

```yml
name: Codeowners merging
on:
  pull_request_target: { types: opened }
  issue_comment: { types: created }
  pull_request_review: { types: submitted }

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1
      - name: Run Codeowners merge check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: username_0/code-owner-self-merge@master
```

This means run the action whenever any of those events are triggered. 

The first one is when a PR is made. The action looks up the CODEOWNERs file in the standard places, for this repo, it's at [`.github/CODEOWNERS`](https://github.com/microsoft/TypeScript-website/blob/v2/.github/CODEOWNERS). The relevant part of the current file is this:

```sh
# Collaborators for Portuguese Translation of the Website
packages/playground-examples/copy/pt/**/*.md @khaosdoctor @danilofuchs @username_0
packages/playground-examples/copy/pt/**/*.ts @khaosdoctor @danilofuchs @username_0
packages/tsconfig-reference/copy/pt/**/*.md @khaosdoctor @danilofuchs @username_0
packages/typescriptlang-org/src/copy/pt/**/*.ts @khaosdoctor @danilofuchs @username_0
packages/typescriptlang-org/src/copy/pt.ts @khaosdoctor @danilofuchs @username_0
packages/documentation/copy/pt/**/*.ts @khaosdoctor @danilofuchs @username_0
```

These are a set of globs to different packages, and all the places where Portuguese translation occurs. It might remind you of how a `.gitignore` works.

The action determines the changed files via the GitHub API, for this PR it finds:

- [`packages/playground-examples/copy/pt/TypeScript/Type Primitives/Tuples.ts`](https://github.com/microsoft/TypeScript-website/blob/v2/packages/playground-examples/copy/pt/TypeScript/Type%20Primitives/Tuples.ts)

Which fits the glob: `packages/playground-examples/copy/pt/**/*.ts`.

The action determines that `@khaosdoctor @danilofuchs @username_0` happen to be owners for _every edited file in the PR_, and so the action comments on the PR saying they have access to merge this PR.

Later on, in either a review or a comment - if one of us three owners say ""LGTM"" then the action will merge the PR.

--- 

I like systems like this. 

It offers a privilege access to those who are doing useful work, and makes them not feel blocked by having to rely on someone on the TS team to merge their PRs. This is especially useful for translation PRs, I can't review those!

These contributors are donating their time, and our tooling can support it by getting us out of the way while knowing that this can't break the TS website.
<issue_comment>username_0: ### Twoslash 1.0 Release

I think twoslash is now at a point where you probably don't need to read the source code to understand it, which is as good an indication as any to call it a 1.0. 

I've taken the last few days to tighten the errors, add the features which are impusername_0nt for projects which _aren't_ the TS website and improved some of the infra surrounding it. Here's the state of the art:

#### [`@typescript/twoslash`](https://www.npmjs.com/package/@typescript/twoslash)

The library twoslash is something which takes a code sample like:

```ts
// @filename: Component.tsx
import React from ""react""

export function Hello() {
  return (
    <div>
      <h1>Hello World</h1>
    </div>
  )
}

// @filename: index.ts
import { Hello } from ""./Component""
console.log(Hello)
```

Then it makes a virtual file system and typescript project, compiles it and pulls out a bunch of interesting metadata about the code. You could use twoslash to compile and validate code samples or repros of issues. It supports all the TSConfig options  and can basically wrap an entire app into a single file.

Runs in web and node. On the web, you need to provide all the surrounding .d.ts files etc ([`@typescript/vfs`](https://www.npmjs.com/package/@typescript/vfs) can help there). On node, the vfs runs in a fake folder in your current project, so your node modules will be available to the vfs.

### [`shiki-twoslash`](https://www.npmjs.com/package/shiki-twoslash)

I originally built out just a Gatsby plugin, because that's all I needed for the TS site. This weekend I took all the  primitive functions for rendering twoslash related metadata into a new module which the Gatsby plugin uses.

This module provides high and low level APIs for syntax highlighting _any_ language [via shiki](https://shiki.matsu.io/), and then augmenting the results in two special cases:

- When you declare a code sample as using twoslash code sample:
    ![Screen Shot 2020-08-24 at 11 53 47 AM](https://user-images.githubusercontent.com/49038/91066957-52194e00-e600-11ea-84ca-8347e25e2813.png)

- When a JSON declares it is a tsconfig:
    ![Screen Shot 2020-08-24 at 11 55 53 AM](https://user-images.githubusercontent.com/49038/91067202-9d336100-e600-11ea-84a5-469f1df80ac6.png)

The Gatsby plugin is now about 80 lines of types and glue code. In testing out the API, I've converted a complex [11ty website](https://github.com/ddprrt/ddprrt.github.io/pull/41) ([example page](https://ddprrt-github-io-git-fork-username_0-twoslash.ddprrt.vercel.app/typescript-and-es-modules/)) to use shiki-twoslash and I'm open to looking at doing the same for next.js too.

These are the sort of tools I wish I had had when I was writing about TypeScript a few years back, and if you're a regular author of TypeScript posts with a JS build tool I've not mentioned you can get in touch with me in the [TypeScript Discord](https://discord.gg/typescript) and we can figure out how to get your posts backed by the compiler also.
<issue_comment>username_0: ### Sample SEO

A few weeks ago I [fixed an issue](https://github.com/microsoft/TypeScript-Website/pull/1169) which meant that each playground sample had a corresponding `*.html` file in static HTML output, and the pages are now showing up in search engines. 

![Screen Shot 2020-10-19 at 1 45 40 PM](https://user-images.githubusercontent.com/49038/96492041-060a1480-1211-11eb-894c-688561dec4e6.png)

This means that we we can really target providing comprehensive answers to really specific questions, and get them in a place where people can find them. I've not really talked about this to anyone, so it seems like a reasonable topic to write-up.

#### Why?

One of the problems with documenting any language is that it kinda covers a lot, and that sometimes the answer can be so deeply technical that most people don't need that exact answer. We often need to provide the same content at different levels of technical expertise ( e.g. look at the 4 getting started docs before the handbook ) and one thing the TS site was missing was small focused REPL-like examples which can give you an overview of the features in a way that encourages playing around.

This gave me the chance to build out a new section of docs in a way which I could use to test the waters for how the TS team thinks and reviews docs changes to the site and I tried to cover a lot of topics. I based the structure originally from a glossary I had been keeping of TypeScript terminology:

```
tree packages/playground-examples

├── 3-7
│   ├── Fixits
│   │   ├── Big number literals.ts
│   │   ├── Const to let.ts
│   │   └── Infer From Usage Changes.ts
│   ├── Syntax and Messaging
│   │   ├── Flattened Error Reporting.ts
│   │   ├── Nullish Coalescing.ts
│   │   └── Optional Chaining.ts
│   └── Types and Code Flow
│       ├── Assertion Functions.ts
│       ├── Recursive Type References.ts
│       └── Uncalled Function Checks.ts
├── 3-8
│   ├── Breaking Changes
│   │   └── Checking Unions with Index Signatures.ts
│   ├── JSDoc Improvements
│   │   └── Accessibility Modifiers.js
│   └── Syntax and Messaging
│       ├── Export Modules From.ts
│       ├── Private Class Fields.ts
│       └── Type Imports.tsx
├── 4-0
│   ├── New Checks
│   │   └── Class Constructor Code Flow.ts
│   ├── New JS Features
│   │   ├── JSDoc Deprecated.ts
│   │   ├── Logical Operators and Assignment.ts
│   │   └── Nullish Coalescing.ts
│   └── New TS Features
│       ├── Named Tuples.ts
│       ├── Unknown in Catch.ts
│       └── Variadic Tuples.ts
├── JavaScript
│   ├── External APIs
│   │   ├── TypeScript with Deno.ts
│   │   ├── TypeScript with Node.js
│   │   ├── TypeScript with React.tsx
│   │   ├── TypeScript with Web.js
│   │   └── TypeScript with WebGL.js
│   ├── Functions with JavaScript
│   │   ├── Function Chaining.ts
│   │   ├── Generic Functions.ts
│   │   └── Typing Functions.ts
│   ├── Helping with JavaScript
│   │   ├── Errors.ts
│   │   └── Quick Fixes.ts
│   ├── JavaScript Essentials
│   │   ├── Code Flow.ts
│   │   ├── Functions.ts
│   │   ├── Hello World.ts
│   │   └── Objects and Arrays.ts
│   ├── Modern JavaScript
│   │   ├── Async Await.ts
│   │   ├── Immutability.ts
│   │   ├── Import Export.ts
│   │   └── JSDoc Support.js
│   ├── README.md
│   └── Working With Classes
│       ├── Classes 101.ts
│       ├── Generic Classes.ts
│       ├── Mixins.ts
│       └── This.ts
[Truncated]
![Screen Shot 2020-10-19 at 2 29 47 PM](https://user-images.githubusercontent.com/49038/96496415-3654b180-1217-11eb-886b-dcee1afda851.png)

Then each page checks if you're a search engine or not, and forwards humans to the Playground:

```tsx
const Play = (props: Props) => {
  const i = createInternational<typeof headCopy>(useIntl())
  useEffect(() => {
    // Keep this page around so it is indexed on search engines
    const isBot = /bot|google|baidu|bing|msn|duckduckbot|teoma|slurp|yandex/i.test(navigator.userAgent)
    if (!isBot) {
      // @ts-ignore - this is allowed in the DOM
      document.location = withPrefix(props.pageContext.redirectHref)
    }
  }, [])
```

This means that as we document features using Playground examples, they will be easily accessible for anyone with a search engine! This works across languages too, but I think we probably need a way to handle translating the title at some point.

![Screen Shot 2020-10-19 at 2 36 37 PM](https://user-images.githubusercontent.com/49038/96497091-22f61600-1218-11eb-93d3-31fcd554e39f.png)
<issue_comment>username_0: ### Localized Localizations

There are about [700 pages](https://gist.github.com/username_0/8374959ee9f4eb22856defac0dcd1ae4) on the TS website today, with **over 1000 sections** localized into 9 languages by the community.

This rocks. I've mentioned it a bunch of times in this blog-issue-thing, but letting people learn in their own language is real impusername_0nt to me because it lowers the barriers of entry to TypeScript considerably.

We're getting to a point where the amount of PR traffic for the localizations is starting to dwarf PRs to the website, and that can make it hard to stay on top of the repo for anyone other than me. So, at the start of 2021, [I pitched](https://github.com/microsoft/TypeScript-Website/issues/1480) that I was planning on splitting the localizations out, and would make the tooling generic and available for others. This weekend I'll flip the switch to move the localizations out.


Ah, but what's in it for you dear constant reader? Well, if you are thinking of having a large corpus of localized markdown files, you can re-use:

 - [A CLI](https://github.com/OSS-Docs-Tools/sync) ( [`@oss-docs/sync`](https://www.npmjs.com/package/@oss-docs/sync) ) which handles:
    - Pulling in localization folders to your app
    - Bootstrapping a localization repo with the english from the app
    - Updating a [set of issues per-lang](https://github.com/microsoft/TypeScript-Website-Localizations/issues?q=is%3Aissue+is%3Aopen+label%3A%22Translation+Summary%22) with TODO lists
    - Validating the file structure between localizations and the canonical english files
  
- Tooling to allow people to [assign ownership to a sub-set of a repo](https://github.com/OSS-Docs-Tools/code-owner-self-merge#readme), and merge those PRs
- Tooling to [generate JSON files of attribution](https://github.com/OSS-Docs-Tools/create-attribution-json) for localization efforts
- An [example Dangerfile](https://github.com/microsoft/TypeScript-Website-Localizations/blob/61ce630be78089dce4dd858a192f34afb492777f/dangerfile.ts) which uses Azure translations to show the English for any translated doc

All of these tools lives under a new GitHub org [OSS-Docs-Tools](https://github.com/OSS-Docs-Tools) (with a logo designed by my wife, Danger) and are usable out of the box today. There are some trivial example repos in the org, but the real production case is https://github.com/microsoft/TypeScript-Website-Localizations/
<issue_comment>username_0: https://user-images.githubusercontent.com/49038/106480889-c6a3c300-64a3-11eb-96ef-8b9c9f99d260.mp4

## Trust, but verify

I realized after reading @nayafia's book [""Working in Public""](https://press.stripe.com/#working-in-public) ( [this is a good primer](https://blas.com/working-in-public/) for those who haven't read it ) that I have been working on the problem of scaling human issues inside OSS communities for about 7 years now. As originally, I hit these problems working on the iOS dependency manager CocoaPods back in 2014.

Just like with TypeScript, for any non-trivial OSS project there's nearly always a small team of core contributors and _a lot_ of issue feedback and drive-by PRs which can get overwhelming, even when working full time on OSS. In this case a side project (localizations) of a side project (website) for TypeScript can still generate a lot of traffic. There were 10 localization PRs last week and as someone who can speak English (and barely get by with Portuguese) - I cannot provide constructive feedback on a Japanese translation PR. So, how can I handle the growing needs of contributors without burning myself out trying to really get to grips with each language?

My technique has been through rigorous application of automation which **helps maintainers put more trust in contributors**. 

I've just wrapped up moving the localization infra to a separate repo, and would like to cover the security model of how I let it more-or-less run without the TypeScript team's direct involvement. 

Just to get you up-to-date, the TypeScript website is a static site which reads markdown documents, TSX files and info from the TypeScript compiler to generate a set of HTML files [using Gatsby](#issuecomment-577445454). Localization is handled by file shadowing: e.g. a lookup for a markdown document will first look up for the locale specific version `docs/typescriptlang/es/es.ts` and if that fails then it will use the English version `docs/typescriptlang/en/en.ts`. The process of importing translations is effectively a well placed `cp -r` which occurs across repos. 
  
### Narrowing the Safe Changes

At a pull request level, we can determine how ""safe"" a change is by looking at what files have changed. Does this change affect files which aren't localization related (e.g. the `package.json` or script files) then that needs to be handled my a maintainer. However, if all the changes are localization changes which occur in the same language? If so, then someone who ""owns"" that language should have the right to merge those PRs when green.

This idea is a simplification of the far more complex [DefinitelyTyped access rights system](https://github.com/definitelytyped/definitelytyped/#make-a-pull-request). In the localization repo, this is handled by re-using the [system of code-owners](https://github.blog/2017-07-06-introducing-code-owners/) which GitHub introduced back in 2017. The GitHub implementation is for reviewers, and so people without write-access to the repo cannot be assigned to review, there is a GitHub Action [OSS-Docs-Tools/code-owner-self-merge](https://github.com/OSS-Docs-Tools/code-owner-self-merge) which turns it into an authentication system for external contributors.

How it works is that if someone included in the codeowners owns _all_ files in a Pull Request, then they have the ability to request that it get merged via the GitHub Action:

```sh
# Collaborators for Portuguese Translation of the Website
docs/playground/pt @khaosdoctor @danilofuchs [translation] [pt]
docs/tsconfig/pt/**/*.md @khaosdoctor @danilofuchs [translation] [pt]
docs/typescriptlang/pt/**/*.ts @khaosdoctor @danilofuchs [translation] [pt]
docs/documentation/pt/**/*.md @khaosdoctor @danilofuchs [translation] [pt]
```

Here's some example of files in a PR, and whether @khaosdoctor and @danilofuchs can merge:

- :white_check_mark:: `docs/documentation/pt/tutorials/Babel with TypeScript.md`, `docs/playground/pt/Playground/Config/JavaScript Playgrounds.js`
- :x:: `README.md`, `docs/documentation/pt/tutorials/Babel with TypeScript.md`
- :x:: `docs/documentation/ko/tutorials/Babel with TypeScript.md`

This means that the maintainers can know that people who are just working on the content in the repo are working on their own section, and not touching infrastructure files (or disabling the CI etc.)

This linter isn't some fancy re-usable CLI tool, [it's ~300 lines of JavaScript](https://github.com/microsoft/TypeScript-Website-Localizations/blob/main/scripts/lint.js).

### Non-breaking Changes

If the localization repo was only simple markdown documents, maybe the above would be enough. However, the markdown documents have specific metadata, and compiler-backed code samples which can throw. Even worse, the inline localizations (like the text for the navigation) are _actually evaluated code_. Hrm. 

So, the repo has a pretty strict linter to help give fast feedback to contributors. For the markdown documents, it runs the same library ([twoslash](https://www.npmjs.com/package/@typescript/twoslash)) and will validate the YML metadata.

For the code, the linter uses the TypeScript API to validate the `*.ts` files which are evaluated doesn't do anything un-expected. Unexpected when working with JavaScript is a pretty regular occurrence, so what the linter does is demand a pretty exact ""shape"" of a file. There are two possible types:

```ts
export const navCopy = {
  skip_to_content: ""Lewati ke konten"",
  nav_documentation: ""Dokumentasi"",
  nav_documentation_short: ""Dokumentasi"",
}
```

This file is validated to always be a single export which is a const, that creates an object with static strings. Template strings are also allowed, but not ones which use `${}` to evaluate code.

The other sort of files looks like:

```ts
import { defineMessages } from ""react-intl""
import { playCopy } from ""./playground""
import { Copy, messages as englishMessages } from ""../en/en""

export const lang: Copy = defineMessages({
  ...englishMessages,
  ...playCopy,
})
```

Every import is validated, there's only allowed to be the one export statement which has to then be the function `defineMessages`, then the only things allowed inside that function call are spreads.

These linter rules use the TypeScript AST, so they allow for flexibility in the names and whitespacing etc - but don't allow for the way the code works to change.

All of these linter checks run on CI, and the GitHub Action won't allow people to merge PRs which are not green. This means we can trust that changes to the evaluated code don't cause un-expected behavior in the the TypeScript website.

### Easy Introspection

Finally, there's one more automation point which is that a comment is added to any translation PR which translates it to English in the comments. This is done via Danger and an Azure API - it's a nice way for us to have a check over contentious localization changes and offer some sort of insight. 

### GitHub Checked

With all of these validations in place, it's feasible to have a secondary authentication system in a repo which allows for people without write access to maintain their own sections of the codebase without breaking the upstream project which depends on it. Making life easier for people who want to translate, and simpler for maintainers who can't provide _all_ of the useful feedback they'd need.
<issue_comment>username_0: ### How I built the Playground Plugins infra

I gave a [talk at TSConf 2020 on Playground Plugins](https://www.youtube.com/watch?v=eJWtTl62gy0&list=PL2z7rCjEG2ks2G0dcBmXuROUnDJP0ivAH&index=13) which generated quite a few questions about _how_ this was built technically. 

I think there are mainly two parts which are worth discussing, how code connects and how to think about the dev experience.

### Running the Code

To connect the JavaScript files in the browser, you need a loader of some form. In my case, I was already using the [vscode-loader](https://github.com/Microsoft/vscode-loader) for [Monaco](https://microsoft.github.io/monaco-editor/) (the code text editor). This uses [AMD modules](https://requirejs.org/docs/whyamd.html), [here you can see how TS](https://www.typescriptlang.org/tsconfig/#module) supports it. I wouldn't be too surprised if this could be done entirely in ESM today, but this was built before ESM in browsers were stable.

The vscode-loader setup which occurs way before any plugin code runs: 

```ts
 // @ts-ignore
const re: any = global.require
re.config({
  paths: {
    vs: urlForMonaco,
    ""typescript-sandbox"": withPrefix('/js/sandbox'),
    ""typescript-playground"": withPrefix('/js/playground'),
    ""unpkg"": ""https://unpkg.com/"",
    ""local"": ""http://localhost:5000""
  },
  ignoreDuplicateModules: [""vs/editor/editor.main""],
  catchError: true,
  onError: function (err) { ... }
});
```

This lets you require a url like `unpkg/danger/index.js` which is treated like ""https://unpkg.com/danger/index.js"". 
The playground plugins rely on unpkg to host the Plugin's JavaScript, and [the site assumes](https://github.com/microsoft/TypeScript-website/blob/be39639ba4af895a15f4392d0e5a763f87cc0168/packages/playground/src/index.ts#L523) that a plugin will always have an `index.js` in the root.

```ts
const downloadPlugin = (plugin: string, autoEnable: boolean) => {
  try {
    // @ts-ignore
    const re = window.require
    re([`unpkg/${plugin}@latest/dist/index`], (devPlugin: PlaygroundPlugin) => {
      activateExternalPlugin(devPlugin, autoEnable)
    })
  } catch (error) {
    console.error(""Problem loading up the plugin:"", plugin)
    console.error(error)
  }
}
```

From here we allow for factory plugins instead, [and register the plugin](https://github.com/microsoft/TypeScript-website/blob/be39639ba4af895a15f4392d0e5a763f87cc0168/packages/playground/src/index.ts#L523)

```ts
if (typeof plugin === ""function"") {
  const utils = createUtils(sandbox, react)
  readyPlugin = plugin(utils)
} else {
  readyPlugin = plugin
}

// ...

playground.registerPlugin(readyPlugin)
```

Check whether it wants to be at the front, and if so, activate it:

```ts
// Auto-select the dev plugin
const pluginWantsFront = readyPlugin.shouldBeSelected && readyPlugin.shouldBeSelected()

if (pluginWantsFront || autoActivate) {
  // Auto-select the dev plugin
  activatePlugin(readyPlugin, getCurrentPlugin(), sandbox, tabBar, container)
}
```

Plugins are kept inside [an array](https://github.com/microsoft/TypeScript-website/blob/be39639ba4af895a15f4392d0e5a763f87cc0168/packages/playground/src/index.ts#L91) in the Playground which sets the order for the tabs. 
There are a set of built-in plugins which provide the JS, .d.ts, Logs etc which are passed in at launch. By being configuarble we can support playgrounds with different default plugins like the [bug-workbench](https://www.typescriptlang.org/dev/bug-workbench/).

New user-defined plugins are push'd into that array, and are controlled with the same APIs as the built-in infra. The list of npm packages you've requested gets stored in localStorage and is pulled out on a reload and grabbed on launch.

### Development Experience
[Truncated]
    /** Get all the different emitted files after TypeScript is run */
    getEmitResult,
    /** Gets just the JavaScript for your sandbox, will transpile if in TS only */
    getRunnableJS,
    /** Gets the DTS output of the main code in the editor */
    getDTSForCode,
    /** The monaco-editor dom node, used for showing/hiding the editor */
    getDomNode,
    /** The model is an object which monaco uses to keep track of text in the editor. Use this to directly modify the text in the editor */
    getModel,
    /** Gets the text of the main model, which is the text in the editor */
    getText,
    /** Shortcut for setting the model's text content which would update the editor */
    setText,
    /** Gets the AST of the current text in monaco - uses `createTSProgram`, so the performance caveat applies there too */
    getAST,
    // ...
```'

I exclusively use these APIs in all the built-in plugins, and only really special-case the Logs/Errors plugins because they are connected to a lot more parts of the playground. That dog-fooding means they're pretty solid for plugin authors.
<issue_comment>username_3: _Sent from my SM-S767VL using [FastHub](https://play.google.com/store/apps/details?id=com.fastaccess.github)_
<issue_comment>username_0: <img width=""100%"" alt=""tt-2"" src=""https://user-images.githubusercontent.com/49038/139537400-e184dfe5-ebb1-429b-8cfc-3875b8dbbcc6.png"">

## Writing Puzzles for Developers

I've just wrapped up the second series of [`Type | Treat`](https://dev.to/username_0/series/15226) for TypeScript, which marks another 20 separate code challenges targeted at two different sets of developers. I thought it might be interesting to talk a bit about the process and cover some of the thinking which goes on behind the scenes.

### How I Try To Structure Puzzles

There's this perfect 5 minute YouTube video from [Game Maker's Toolkit](https://www.youtube.com/channel/UCqJ-Xo29CKyLTjn6z2XwYAw) on the philosophy which I have tried to apply when thinking about each puzzle: [Super Mario 3D World's 4 Step Level Design](https://www.youtube.com/watch?v=dBmIkEvEBtA).

[Koichi Hayashida](https://nintendo.fandom.com/wiki/Koichi_Hayashida) is the co-director of Super Mario 3D World, and roughly his puzzle philosophy is:

- Teach in a safe environment
- Develop on that idea in a way which pushes you
- Twist the concept so that you need to think about it from another angle
- Conclude with something to show off your new skills

While I've not succeeded in hitting all of these points in every puzzle, that is the goal for each challenge. In the context of `Type | Treat` we don't necessarily have to worry about the safe environment because the Playground provides that as a baseline. This means that we want to introduce some sort of syntax/idea, improve on your knowledge with some difficulty then give you something cool to show off with your new skills. Ideally completing a challenge should make you think ""oh, this could improve our X in the codebase"".

### Writing Process

Creating each of the 40 puzzles is a multi-step process:

1. Find 2 interesting bits of code to play with in the Playground. This takes about 2 to 4 hours for them both. I have a list of 'things which could be interesting', I re-read through TypeScript release notes, the handbook, and look through the questions posted inside the TypeScript Community Discord to see if there's something which feels useful in a general sense. e.g. not something just for describing JS patterns, but useful for people only writing TypeScript. Then I figure out if the Playground is a good environment for showing these samples, and if the docs cover it well.

1. I'll then start looking at what sort of individual concepts do you need to know in order to understand this code. This usually takes about an hour. Sometimes this can be as simple as looking at each part of the syntax, but often it can be about understanding why you might need that syntax by first understanding the limitation of the prior version. This helps to understand what necessary steps there should be in the challenge. For example, here's a first draft I had for [2021 Beginners 4](https://www.typescriptlang.org/play?#gist/927ccc66ae3022dc64c4f650109b937a-13) which I wanted people to use `X extends Y` in a generic:

   ```ts
   // Step 1
   function abc(a: any) {
      return { c: a }
   }
   // to 
   function abc2<T>(a: T) {
        return { c: a }
   }

   // Step 2
   function abc3<T>(a: T) {
        return { c: a }
   }
   // to 
   function abc4<T extends { foo: () => void }>(a: T) {
        a.foo()
        return { c: a }
   }
   ```

1. I peer review the drafts by reaching out to few people at roughly the skill level I'm targeting.
1. Next I start to apply the theme and that often provides a fresh perspective on the problem, this sometimes can lead to evolving the puzzle based on what some has learned in the last challenge. This takes about an hour or two.
1. I peer review the themed versions more publicly
1. While peer review is going on, I start to write up the answers for the previous challenges. It's tempting to write these at right after writing the puzzles, but the feedback given when the posts go live usually influences the writeup anyway. We get some un-anticipated creative answers which deserve highlighting.
1. Refinement from peer review, update gists, deploy blogs, write tweet :ship:

In real-world times it comes to about 10 hours each days, and are super mentally taxing - so I usually take some time off the next week. 

### Difficulty

I learned quite early in my career that making [a hard opponent is easy](https://www.escapistmagazine.com/review-arcade-hockey-iphone/) but making a fair one is hard. With these challenges it can be quite hard to figure out how difficult a concept is to learn (because I've already learned it) and in part that's why there's multiple peer review steps. 

The tools I use to modify the difficulty of a puzzle are:

- Comments with ""quotes"" in them, are usually exact search terms to find the related problem
- Comments with irregular grammar ""can you find the key of the type of"" 
- Adding/removing steps for incremental built-outs
- Building on prior's examples
- Variable names 
- Providing explicit hints in the comments (especially if we've figure a way it can go off the rails)

I don't expect someone to figure out syntax from first principles, so it's usually a good assumption that if someone is experienced enough to know these puzzles exist - they know that they can search ""[term] typescript"" in DuckDuckGo to find something related. I try to make sure there's always at least one clue which can be searchable in every puzzle.

### 2021 Preparation

Unlike 2020, which we were roughly guessing the format, we knew what 2021's version of `Type | Treat` would look like. So, I took some time to address what I felt was its biggest shortcoming. The system was a complex set of links across many blog posts. This is perfect for a 'does this work' but now that we know it does work, I thought we could improve on that by adding some sort of native 'multi-file' support to the Playground. There's probably a blog post in the thinking behind the different ideas we have for handling multiple files in a Playground once it's settled. 

For `Type | Treat` 2021 my approach was to build a generically useful GitHub Gist viewer, leaving the ""write"" interface entirely to GitHub's (admittedly pretty rough) gist editor. I used [GistPad](https://marketplace.visualstudio.com/items?itemName=vsls-contrib.gistfs) to edit a set of gists (2020/staging/production) which made sharing and reviewing much easier. This also means anyone can replicate this sort of experience if they want.
<issue_comment>username_4: malato2021
<issue_comment>username_0: ### Direct Support for Technical Communities

When I started trying to scope out what the community side of the TypeScript web presence could look like, I thought about what sort of support paths are available to people using the language. 

- TypeScript's issues are focused on bugs and feature requests for the language
- Stack Overflow is a reasonable (if often outdated) way to post a question and get a few responses
- [Gitter](https://gitter.im/Microsoft/TypeScript) was recommended if you had DefinitelyTyped questions
- There is subreddit in [/r/typescript](https://www.reddit.com/r/typescript/)

I think the Gitter came from the original open-source project and then was inherited by the TypeScript team [with the project](https://blog.username_1.com/2019/10/08/definitely-typed-movie/). We have someone on the TS team on rotation, but not everyone would use the Gitter.

So, if you were looking for help on a TypeScript problem where do you go? Stack Overflow is a good bet but there's a lot of people who don't post questions on Stack Overflow ([myself included](https://stackoverflow.com/users/385754/username_0?tab=questions).) That left the Gitter for one-on-one questions, but Gitter's future is still a bit debatable as post-acquisition by GitLab the codebase has been on maintenance only mode and you only get one channel. We'd struggle to handle the size of the TS community in one channel.

The other angle I was interested in was to consolidate the random chats for the different TypeScript meetups/conferences, remember this was the before-times. The 2019 meetup / conference scene was super active, and making their lives easier was high on my TODO because it was one of the ways in which I grew as an engineer and I wanted others to have that chance. 

So, we wanted a system like Slack or Discord. GitHub Discussions didn't exist at this time, and I think is worth considering about today. I think GitHub Discussions would make a good localized Stack Overflow replacement but will probably not be a place to hang out. GitHub's a bit too formal for that.

Thinking about Slack vs Discord in 2019, the writing was largely on the wall for developer communities on Slack, it was something people put quite a lot of effort into making it work, but Slack wasn't too interested in communities and it showed. Having seen a few teams go from Slack to Spectrum and then Discord. I figured we should just jump straight to Discord. 

A naive approach would have been to click 'Create new Discord', but I think there's a tension there. Outside of myself, I couldn't (and wouldn't) guarantee the time of the TypeScript compiler team to actually be there to bootstrap it, moderate it and scale it. Instead, I looked at existing Discords for TypeScript and opted to talk to the admins for the ""TypeScript Community Discord"" which had 200-300 members which had shown up in Reddit once or twice.

I effectively offered a trade: I can spend work time helping you to scale the community and start directing folks to this Discord, in exchange we'll need to set up things like Codes of Conducts, start moderating more strictly and give at least one person on the TS team moderator access. I will be here to offer a hand, but it's still your community to run. They were happy with these trade-off, and so we did a few things:

- Audit all existing channels
- Create a new GitHub org for [governance docs](https://github.com/typescript-community/governance)
- Migrate [the bot](https://github.com/typescript-community/community-bot) to that org
    - Initially we made the bot delete any message with a swear word (you can't edit other people's messages in Discord) - this got turned off after about 6 months (because it rarely needed to happen), but was quite contentious.


Over the last two years we invested in a few places:

### Help Channels

When I joined the Discord, there were two separate help channels. Once we hit ~10k members this was not scaling. Discord did not support threading at the time, and so we modified the bot into a clever and nuanced system which can handle many help simultaneous requests by cycling a set of channels between being public or archived (for example there's 15 active help channels as I write this, and 18 archived. Which means we've peaked at 33-2 concurrent help channels. ) 

Given how fundamental the help system is to the discord, it is in continual evolution - there's been some interesting proposals to move it to threads and there's a generic bot which offers this for [anyone here](https://needle.gg).

### Related Communities

Originally we migrated in meetups to the discord, but over time as meetups stalled from the lockdowns, so did those channels. Instead we found that quite organically it started to make sense to host a channel for projects which were heavily reliant on TypeScript. For example [TypeDoc](https://typedoc.org) and [ts-node](https://www.npmjs.com/package/ts-node) are there, as well as some more generalized channels for some of the biggest libraries.

### Migrating Official Channels into Discord

After the discord settled, we migrated DefinitelyTyped support from Gitter into a channel in discord and created similar channels for handling contributing to the website/playground and localization.

### Occasional Events

We ran a TypeScript Q&A on a release, and in theory could do that again sometime. I'm seeing other discords (like [RedwoodJS](https://discord.gg/jjSYEQd) or [Svelte's](https://discord.gg/yy75DKs)) doing interesting things with video tutorials, workshops and live podcasts. Maybe there's space for doing events like that in the TypeScript Community discord.

## Would I Do It Differently Now?

I think I'd still opt for something like Discord for TypeScript today, 2+ years later. The same team who were moderating when I joined are still actively running the show, so I feel like it was a good trade for them, and there's a few regulars from the DefinitelyTyped Gitter now helping out with moderation in the Discord.<issue_closed>
<issue_comment>username_0: **Wrapping up this mini-blog**. Hey folks, thanks for subscribing to my issue where I kept folks in the know on what was going on in the web/community infra for TypeScript. This issue provided a great way to write up some of the smaller wins and design decisions which would typically be kept internal because it's not big enough for the main TypeScript blog. 

Today is my [last day](https://twitter.com/username_0/status/1484485488484532224) on the TypeScript team and so it feels like the right time to close this issue up and remove it from the website footer - when I interviewed for this role, I gave a metaphor that TypeScript is a medieval castle and there's an incredibly large village growing around it which needs some thinking about. A few years later, I'm happy to go back to being a villager instead of a town planner now that we're in a good place. I'll still be around in the TypeScript Community Discord or Twitter (@username_0) if you are interested in how things are going or have questions about how it all works."
ethereum/ethereum-org-website,507738154,320,,"[{'action': 'opened', 'author': 'seichris', 'comment_id': None, 'datetime': '2019-10-16 09:44:32+00:00', 'masked_author': 'username_0', 'text': ""## Expected Behavior\r\n\r\nIt is common practice that tech projects link a newsletter on their landing page, to keep visitors in the loop.\r\n\r\n[Weekinethereum](https://weekinethereumnews.com/) arguably is one of the best regular updates on ethereum, fitting a broad user base.\r\n\r\n## Current Behavior\r\n\r\nCurrently, the only source for any news-hungry ethereum.org visitor is the @ethereum twitter, down in the footer. (It's even hidden under the header designer's names.) Everyone has email, not everyone has twitter. And the newsletter is way better to search and find older links.\r\n\r\n## Possible Solution\r\n\r\nLet users/visitors:\r\n\r\n1. Put in their email address\r\n2. Press a button to subscribe\r\n\r\n## Context\r\n\r\nLet's use the power of our great community, to get better than web2!"", 'title': 'Add a link to the weekinethereum newsletter to the landing page', 'type': 'issue'}
 {'action': 'created', 'author': 'seichris', 'comment_id': 542629421.0, 'datetime': '2019-10-16 10:08:32+00:00', 'masked_author': 'username_0', 'text': 'Why can\'t i push code anymore nor open a new branch.\r\n\r\nI just put in a normal button as a draft:\r\n\r\n`<a href=""https://weekinethereumnews.com/"" target=""_blank"">\r\n        <button class=""announcement"">\r\n          {{content[\'page-home-button\']}}\r\n        </button>\r\n      </a>`\r\n\r\nin `HomePage.vue`\r\n\r\nPlus the extra translations in `translations.js`:\r\n\r\n`// the lang (e.g. \'en-US\') is globally accessible in components via `this.$lang`\r\n// it should be specified in the front matter of every markdown page:\r\n// https://vuepress.vuejs.org/guide/markdown.html#front-matter\r\nconst translations = {\r\n  \'en-US\': {\r\n    path: \'/\',\r\n    name: \'English\',\r\n    \'english-name\': \'English\',\r\n    ethereum: \'Ethereum\',\r\n    \'link-text-artwork\': \'Read about the new artwork!\',\r\n    \'link-text-more\': \'→  More\',\r\n    \'page-home\': \'Ethereum\',\r\n    \'page-home-title\': \'Ethereum is a global, open-source platform for decentralized applications.\',\r\n    \'page-home-subtitle\': \'On Ethereum, you can write code that controls digital value, runs exactly as programmed, and is accessible anywhere in the world.\',\r\n    \'page-home-button\': \'Subscribe to our Newsletter\',\r\n    \'page-home-section-beginners-title\': \'Beginners\',\r\n    \'page-home-section-beginners-item-one\': \'Completely new to Ethereum?\',\r\n    \'page-home-section-beginners-item-two\': \'What is Ethereum?\',\r\n    \'page-home-section-beginners-item-three\': \'Why should I care?\',\r\n    \'page-home-section-use-title\': \'Use\',\r\n    \'page-home-section-use-item-one\': \'What can I do with Ethereum today?\',\r\n    \'page-home-section-use-item-one-link\': \'/use/#_1-use-an-application-built-on-ethereum\',\r\n    \'page-home-section-use-item-two\': \'How do I get Ether?\',\r\n    \'page-home-section-use-item-two-link\': \'/use/#_2-what-is-eth-and-how-do-i-get-it\',\r\n    \'page-home-section-use-item-three\': \'What\\\'s a wallet?\',\r\n    \'page-home-section-use-item-three-link\': \'/use/#_3-what-is-a-wallet-and-which-one-should-i-use\',\r\n    \'page-home-section-learn-title\': \'Learn\',\r\n    \'page-home-section-learn-item-one\': \'Beginner resources\',\r\n    \'page-home-section-learn-item-one-link\': \'/learn/#ethereum-basics\',\r\n    \'page-home-section-learn-item-two\': \'How Ethereum works\',\r\n    \'page-home-section-learn-item-two-link\': \'/learn/#how-ethereum-works\',\r\n    \'page-home-section-learn-item-three\': \'ETH 2.0\',\r\n    \'page-home-section-learn-item-three-link\': \'/learn/#eth-2-0\',\r\n    \'page-home-section-developers-title\': \'Developers\',\r\n    \'page-home-section-developers-item-one\': \'Getting started guides\',\r\n    \'page-home-section-developers-item-one-link\': \'/developers/#getting-started\',\r\n    \'page-home-section-developers-item-two\': \'Learn to program smart contracts\',\r\n    \'page-home-section-developers-item-two-link\': \'/developers/#smart-contract-languages\',\r\n    \'page-home-section-developers-item-three\': \'Find the latest developer tools\',\r\n    \'page-home-section-developers-item-three-link\': \'/developers/#developer-tools\',\r\n    \'page-home-section-enterprise-title\': \'Enterprise\',\r\n    \'page-home-section-enterprise-item-one\': \'Why Enterprise Ethereum?\',\r\n    \'page-home-section-enterprise-item-one-link\': \'/enterprise/#why-enterprise-ethereum\',\r\n    \'page-home-section-enterprise-item-two\': \'Enterprise Features\',\r\n    \'page-home-section-enterprise-item-two-link\': \'/enterprise/#enterprise-features\',\r\n    \'page-home-section-enterprise-item-three\': \'Enterprise Developer Community\',\r\n    \'page-home-section-enterprise-item-three-link\': \'/enterprise/#enterprise-developer-community\',\r\n    \'page-beginners\': \'Beginners\',\r\n    \'page-use\': \'Use\',\r\n    \'page-learn\': \'Learn\',\r\n    \'page-developers\': \'Developers\'\r\n  },\r\n  \'de-DE\': {\r\n    path: \'/de/\',\r\n    name: \'Deutsch\',\r\n    \'english-name\': \'German\',\r\n    ethereum: \'Ethereum\',\r\n    \'link-text-artwork\': \'Lesen Sie mehr über das neue Kunstwerk!\',\r\n    \'link-text-more\': \'→  Mehr\',\r\n    \'page-home\': ""Startseite"",\r\n    \'page-home-title\': ""Ethereum ist eine globale Open-Source-Plattform für dezentralisierte Anwendungen."",\r\n    \'page-home-subtitle\': ""Auf Ethereum kannst du Code schreiben, der digitale Werte verwaltet, der exakt wie programmiert ausgeführt wird und der von überall auf der Welt zugänglich ist."",\r\n    \'page-home-button\': \'Abonniere den Newsletter\',\r\n    \'page-home-section-beginners-title\': ""Anfänger"",\r\n    \'page-home-section-beginners-item-one\': ""Neu bei Ethereum?"",\r\n    \'page-home-section-beginners-item-two\': ""Was ist Ethereum?"",\r\n[Truncated]\n    \'page-beginners\': \'初学者\',\r\n    \'page-use\': \'使用\',\r\n    \'page-learn\': \'学习\',\r\n    \'page-developers\': \'开发者\'\r\n  }\r\n};\r\n\r\nconst translate = (lookup, lang = \'en-US\') => {\r\n  const translation = translations[lang][lookup];\r\n  if (translation === undefined) {\r\n    console.error(`No translation for: ${lookup} on lang: ${lang}`);\r\n  }\r\n  return translation || \'\';\r\n};\r\n\r\nmodule.exports = {\r\n  translate,\r\n  translations\r\n};\r\n`', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'seichris', 'comment_id': 542639285.0, 'datetime': '2019-10-16 10:37:13+00:00', 'masked_author': 'username_0', 'text': 'Opened a PR: https://github.com/ethereum/ethereum-org-website/pull/321\r\n\r\n\r\n\r\nI put in a simple button as showcase. In an updated version it should look nicer, and maybe directly let users send their email to the subscriber database.', 'title': None, 'type': 'comment'}
 {'action': 'closed', 'author': 'samajammin', 'comment_id': None, 'datetime': '2019-10-31 23:28:28+00:00', 'masked_author': 'username_1', 'text': '', 'title': None, 'type': 'issue'}
 {'action': 'created', 'author': 'samajammin', 'comment_id': 548608178.0, 'datetime': '2019-10-31 23:28:28+00:00', 'masked_author': 'username_1', 'text': 'Hi @username_0, thank you for this! You raise a valid issue - while we do link to Week in Ethereum News from [our ""Learn"" page](https://ethereum.org/learn/), we don\'t provide much in terms of Ethereum news. I agree it\'s valuable to provide content that keeps people up to date.\r\n\r\nRather than jumping at your specific solution, we\'ve opened up a broader issue (https://github.com/ethereum/ethereum-org-website/issues/373) to discuss & tackle this more holistically. We encourage you to add your thoughts & continue the conversation there.', 'title': None, 'type': 'comment'}]","<issue_start><issue_comment>Title: Add a link to the weekinethereum newsletter to the landing page
username_0: ## Expected Behavior

It is common practice that tech projects link a newsletter on their landing page, to keep visitors in the loop.

[Weekinethereum](https://weekinethereumnews.com/) arguably is one of the best regular updates on ethereum, fitting a broad user base.

## Current Behavior

Currently, the only source for any news-hungry ethereum.org visitor is the @ethereum twitter, down in the footer. (It's even hidden under the header designer's names.) Everyone has email, not everyone has twitter. And the newsletter is way better to search and find older links.

## Possible Solution

Let users/visitors:

1. Put in their email address
2. Press a button to subscribe

## Context

Let's use the power of our great community, to get better than web2!
<issue_comment>username_0: Why can't i push code anymore nor open a new branch.

I just put in a normal button as a draft:

`<a href=""https://weekinethereumnews.com/"" target=""_blank"">
        <button class=""announcement"">
          {{content['page-home-button']}}
        </button>
      </a>`

in `HomePage.vue`

Plus the extra translations in `translations.js`:

`// the lang (e.g. 'en-US') is globally accessible in components via `this.$lang`
// it should be specified in the front matter of every markdown page:
// https://vuepress.vuejs.org/guide/markdown.html#front-matter
const translations = {
  'en-US': {
    path: '/',
    name: 'English',
    'english-name': 'English',
    ethereum: 'Ethereum',
    'link-text-artwork': 'Read about the new artwork!',
    'link-text-more': '→  More',
    'page-home': 'Ethereum',
    'page-home-title': 'Ethereum is a global, open-source platform for decentralized applications.',
    'page-home-subtitle': 'On Ethereum, you can write code that controls digital value, runs exactly as programmed, and is accessible anywhere in the world.',
    'page-home-button': 'Subscribe to our Newsletter',
    'page-home-section-beginners-title': 'Beginners',
    'page-home-section-beginners-item-one': 'Completely new to Ethereum?',
    'page-home-section-beginners-item-two': 'What is Ethereum?',
    'page-home-section-beginners-item-three': 'Why should I care?',
    'page-home-section-use-title': 'Use',
    'page-home-section-use-item-one': 'What can I do with Ethereum today?',
    'page-home-section-use-item-one-link': '/use/#_1-use-an-application-built-on-ethereum',
    'page-home-section-use-item-two': 'How do I get Ether?',
    'page-home-section-use-item-two-link': '/use/#_2-what-is-eth-and-how-do-i-get-it',
    'page-home-section-use-item-three': 'What\'s a wallet?',
    'page-home-section-use-item-three-link': '/use/#_3-what-is-a-wallet-and-which-one-should-i-use',
    'page-home-section-learn-title': 'Learn',
    'page-home-section-learn-item-one': 'Beginner resources',
    'page-home-section-learn-item-one-link': '/learn/#ethereum-basics',
    'page-home-section-learn-item-two': 'How Ethereum works',
    'page-home-section-learn-item-two-link': '/learn/#how-ethereum-works',
    'page-home-section-learn-item-three': 'ETH 2.0',
    'page-home-section-learn-item-three-link': '/learn/#eth-2-0',
    'page-home-section-developers-title': 'Developers',
    'page-home-section-developers-item-one': 'Getting started guides',
    'page-home-section-developers-item-one-link': '/developers/#getting-started',
    'page-home-section-developers-item-two': 'Learn to program smart contracts',
    'page-home-section-developers-item-two-link': '/developers/#smart-contract-languages',
    'page-home-section-developers-item-three': 'Find the latest developer tools',
    'page-home-section-developers-item-three-link': '/developers/#developer-tools',
    'page-home-section-enterprise-title': 'Enterprise',
    'page-home-section-enterprise-item-one': 'Why Enterprise Ethereum?',
    'page-home-section-enterprise-item-one-link': '/enterprise/#why-enterprise-ethereum',
    'page-home-section-enterprise-item-two': 'Enterprise Features',
    'page-home-section-enterprise-item-two-link': '/enterprise/#enterprise-features',
    'page-home-section-enterprise-item-three': 'Enterprise Developer Community',
    'page-home-section-enterprise-item-three-link': '/enterprise/#enterprise-developer-community',
    'page-beginners': 'Beginners',
    'page-use': 'Use',
    'page-learn': 'Learn',
    'page-developers': 'Developers'
  },
  'de-DE': {
    path: '/de/',
    name: 'Deutsch',
    'english-name': 'German',
    ethereum: 'Ethereum',
    'link-text-artwork': 'Lesen Sie mehr über das neue Kunstwerk!',
    'link-text-more': '→  Mehr',
    'page-home': ""Startseite"",
    'page-home-title': ""Ethereum ist eine globale Open-Source-Plattform für dezentralisierte Anwendungen."",
    'page-home-subtitle': ""Auf Ethereum kannst du Code schreiben, der digitale Werte verwaltet, der exakt wie programmiert ausgeführt wird und der von überall auf der Welt zugänglich ist."",
    'page-home-button': 'Abonniere den Newsletter',
    'page-home-section-beginners-title': ""Anfänger"",
    'page-home-section-beginners-item-one': ""Neu bei Ethereum?"",
    'page-home-section-beginners-item-two': ""Was ist Ethereum?"",
[Truncated]
    'page-beginners': '初学者',
    'page-use': '使用',
    'page-learn': '学习',
    'page-developers': '开发者'
  }
};

const translate = (lookup, lang = 'en-US') => {
  const translation = translations[lang][lookup];
  if (translation === undefined) {
    console.error(`No translation for: ${lookup} on lang: ${lang}`);
  }
  return translation || '';
};

module.exports = {
  translate,
  translations
};
`
<issue_comment>username_0: Opened a PR: https://github.com/ethereum/ethereum-org-website/pull/321



I put in a simple button as showcase. In an updated version it should look nicer, and maybe directly let users send their email to the subscriber database.<issue_closed>
<issue_comment>username_1: Hi @username_0, thank you for this! You raise a valid issue - while we do link to Week in Ethereum News from [our ""Learn"" page](https://ethereum.org/learn/), we don't provide much in terms of Ethereum news. I agree it's valuable to provide content that keeps people up to date.

Rather than jumping at your specific solution, we've opened up a broader issue (https://github.com/ethereum/ethereum-org-website/issues/373) to discuss & tackle this more holistically. We encourage you to add your thoughts & continue the conversation there."
facebook/react-native-website,560337346,1579,,"[{'action': 'opened', 'author': 'rachelnabors', 'comment_id': None, 'datetime': '2020-02-05 12:22:53+00:00', 'masked_author': 'username_0', 'text': '### Add missing example code\r\n\r\nIf there is no example code, add a new example using [function components](https://reactjs.org/docs/hooks-state.html#hooks-and-function-components) and [Hooks](https://reactjs.org/docs/hooks-intro.html). Embed your code with a Snack player like so:\r\n\r\n```` \r\n```SnackPlayer name=Example%20Code\r\n\r\n// Example code goes here\r\n\r\n``` \r\n````\r\n\r\n### Convert existing example code to use function components and Hooks\r\n\r\nIf there’s a class component example already, use this [handy guide on converting class components to function components and Hooks](https://scotch.io/bar-talk/convert-class-components-to-functional-components-in-a-react-project-solution-to-code-challenge-14) to make a function component example. Then use the following code snippet to keep both function and class component examples: \r\n\r\n````\r\n```\r\n<div class=""toggler"">\r\n  <ul role=""tablist"" class=""toggle-syntax"">\r\n    <li id=""functional"" class=""button-functional"" aria-selected=""false"" role=""tab"" tabindex=""0"" aria-controls=""functionaltab"" onclick=""displayTabs(\'syntax\', \'functional\')"">\r\n      Function Component Example\r\n    </li>\r\n    <li id=""classical"" class=""button-classical"" aria-selected=""false"" role=""tab"" tabindex=""0"" aria-controls=""classicaltab"" onclick=""displayTabs(\'syntax\', \'classical\')"">\r\n      Class Component Example\r\n    </li>\r\n  </ul>\r\n</div>\r\n\r\n<block class=""functional syntax"" />\r\n\r\n```SnackPlayer name=Function%20Component%20Example\r\n\r\n// Function Component Example goes here\r\n\r\n```\r\n\r\n<block class=""classical syntax"" />\r\n\r\n```SnackPlayer name=Class%20Component%20Example\r\n\r\n// Class Example goes here\r\n\r\n```\r\n\r\n<block class=""endBlock syntax"" />\r\n```\r\n````\r\n\r\nIf there isn’t a class component example or there was already a function component example, just use the following code to embed just a function component example.\r\n\r\n### **Embed any example code with a Snack player**\r\n\r\n````\r\n```SnackPlayer name=Example%20Code\r\n\r\n// Example code goes here\r\n\r\n```\r\n````\r\n\r\n### Submit your PR!\r\n\r\nBe sure to tag it with this issue so it gets properly recognized.\r\n\r\n## Components and APIs update progress\r\n\r\n|\t|API up to date?\t|Has example?\t|Example uses Snack?\t|Example uses function components and Hooks?\t|\r\n|---\t|---\t|---\t|---\t|---\t|\r\n|**Components**\t|\t|\t|\t|\t|\r\n|ActivityIndicator\t| :heavy_check_mark:\t| :heavy_check_mark:\t| :heavy_check_mark:\t| 🙁 \t|\r\n|Button\t|:heavy_check_mark:\t|:heavy_check_mark:\t|:heavy_check_mark:\t|🙁\t|\r\n|DatePickerIOS\t|:heavy_check_mark:\t|:heavy_check_mark:\t|🙁\t|🙁\t|\r\n|DrawerLayoutAndroid\t|🙁\t|:heavy_check_mark:\t|🙁\t|🙁\t|\r\n|FlatList\t|:heavy_check_mark:\t|:heavy_check_mark:\t|:heavy_check_mark:\t|🙁\t|\r\n|Image\t|🙁\t|:heavy_check_mark:\t|:heavy_check_mark:\t|🙁\t|\r\n|ImageBackground\t|:heavy_check_mark:\t|:heavy_check_mark:\t|🙁\t|🙁\t|\r\n|InputAccessoryView\t|:heavy_check_mark:\t|:heavy_check_mark:\t|:heavy_check_mark:\t|🙁\t|\r\n|KeyboardAvoidingView\t|:heavy_check_mark:\t|:heavy_check_mark:\t|🙁\t|🙁\t|\r\n|Modal\t|🙁\t|:heavy_check_mark:\t|🙁\t|🙁\t|\r\n[Truncated]\n|Easing\t|:heavy_check_mark:\t|🙁\t|🙁\t|🙁\t|\r\n|Image Style Props\t|🙁\t|🙁\t|🙁\t|🙁\t|\r\n|InteractionManager\t|:heavy_check_mark:\t|:heavy_check_mark:\t|🙁\t|🙁\t|\r\n|Keyboard\t|🙁\t|:heavy_check_mark:\t|🙁\t|🙁\t|\r\n|Layout Props\t|🙁\t|🙁\t|🙁\t|🙁\t|\r\n|LayoutAnimation\t|:heavy_check_mark:\t|:heavy_check_mark:\t|🙁\t|🙁\t|\r\n|Linking\t|🙁\t|:heavy_check_mark:\t|🙁\t|🙁\t|\r\n|PanResponder\t|🙁\t|:heavy_check_mark:\t|🙁\t|:heavy_check_mark:\t|\r\n|PermissionsAndroid\t|:heavy_check_mark:\t|:heavy_check_mark:\t|🙁\t|:heavy_check_mark:\t|\r\n|PixelRatio\t|:heavy_check_mark:\t|:heavy_check_mark:\t|🙁\t|:heavy_check_mark:\t|\r\n|Settings\t|:heavy_check_mark:\t|🙁\t|🙁\t|🙁\t|\r\n|Shadow Props\t|:heavy_check_mark:\t|🙁\t|🙁\t|🙁\t|\r\n|Share\t|:heavy_check_mark:\t|🙁\t|🙁\t|🙁\t|\r\n|StyleSheet\t|🙁\t|:heavy_check_mark:\t|🙁\t|:heavy_check_mark:\t|\r\n|Systrace\t|:heavy_check_mark:\t|🙁\t|🙁\t|🙁\t|\r\n|Text Style Props\t|:heavy_check_mark:\t|🙁\t|🙁\t|🙁\t|\r\n|ToastAndroid\t|:heavy_check_mark:\t|:heavy_check_mark:\t|🙁\t|:heavy_check_mark:\t|\r\n|Transforms\t|:heavy_check_mark:\t|🙁\t|🙁\t|🙁\t|\r\n|Vibration\t|:heavy_check_mark:\t|:heavy_check_mark:\t|🙁\t|:heavy_check_mark:\t|\r\n|View Style Props\t|🙁\t|🙁\t|🙁\t|🙁\t|', 'title': 'Component Docs Drive', 'type': 'issue'}
 {'action': 'created', 'author': 'amandeepmittal', 'comment_id': 582415222.0, 'datetime': '2020-02-05 13:47:57+00:00', 'masked_author': 'username_1', 'text': 'One question, sorry for my naivety, if I am converting a class example into functional example (just converting the snack from class to function) do I keep both the snacks? Also, do I explicitly mention `<block class=""functional syntax"" />` in each snack?', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'rachelnabors', 'comment_id': 582434739.0, 'datetime': '2020-02-05 14:30:55+00:00', 'masked_author': 'username_0', 'text': 'It\'s probably best for you to copy the code block under ""Convert existing example code to use function components and Hooks,"" then replace `// Class Example goes here` with the former, class-based example. Then replace `// Function Example goes here` with a function/Hooks example.\r\n\r\nPlease correct me if I misunderstood your question!', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'amandeepmittal', 'comment_id': 582439426.0, 'datetime': '2020-02-05 14:41:18+00:00', 'masked_author': 'username_1', 'text': 'Thank you so much. I understood the point of the whole code block. I should have read the class name on the top that says `toggler`. 😅', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'rachelnabors', 'comment_id': 582444222.0, 'datetime': '2020-02-05 14:51:47+00:00', 'masked_author': 'username_0', 'text': '@username_1 Did you follow steps 3 and 4, too? ;)', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'DaniAkash', 'comment_id': 582447420.0, 'datetime': '2020-02-05 14:58:29+00:00', 'masked_author': 'username_2', 'text': '@username_0 Just created a PR for the DatePickerIOS 🗓. I basically rewrote the existing class component into a functional component with hooks. But It clearly has a lot of props, does the Snack have to cover all the props or basic functionality is enough?', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'rachelnabors', 'comment_id': 582448869.0, 'datetime': '2020-02-05 15:01:34+00:00', 'masked_author': 'username_0', 'text': ""You know, DatePickerIOS is actually in the process of being _deprecated!_ It sneaked into the table somehow (tsk tsk!). I just removed it. I'm accepting your PR regardless, but go pour your energy into another component who will be sticking around!"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'amandeepmittal', 'comment_id': 582449905.0, 'datetime': '2020-02-05 15:03:48+00:00', 'masked_author': 'username_1', 'text': '@username_0 do you have copy-paste version of the matrix table? Also should quote the matrix here or in the PR?', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'DaniAkash', 'comment_id': 582449996.0, 'datetime': '2020-02-05 15:03:59+00:00', 'masked_author': 'username_2', 'text': 'It did well for a test subject 😜 will pick up something more vital next...', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'rachelnabors', 'comment_id': 582451350.0, 'datetime': '2020-02-05 15:06:44+00:00', 'masked_author': 'username_0', 'text': ""@username_1, are you not able to edit the original post? I tried to put checkboxes in there but couldn't make them work inside tables! Thanks for bearing with me!"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'amandeepmittal', 'comment_id': 582451959.0, 'datetime': '2020-02-05 15:07:58+00:00', 'masked_author': 'username_1', 'text': ""Nope. Can't edit your original post here. No worries."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'rachelnabors', 'comment_id': 582452242.0, 'datetime': '2020-02-05 15:08:33+00:00', 'masked_author': 'username_0', 'text': 'Hmm. Gonna have to think of a way for people to claim each task..', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'amandeepmittal', 'comment_id': 582453003.0, 'datetime': '2020-02-05 15:10:07+00:00', 'masked_author': 'username_1', 'text': 'Can we do this in a gist and link it here? Just a suggestion 🤷\u200d♂️', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'rachelnabors', 'comment_id': 582458668.0, 'datetime': '2020-02-05 15:21:22+00:00', 'masked_author': 'username_0', 'text': ""I added checkboxes :) Just tick one for each task you claim. I'll update them to bold checks when the PRs are merged!"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'jeremy-deutsch', 'comment_id': 582463178.0, 'datetime': '2020-02-05 15:30:09+00:00', 'masked_author': 'username_3', 'text': 'I’d like to claim the `Animated` API up-to-date; how do I check off one of those boxes? Maybe it just doesn’t work since I’m on mobile', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'DaniAkash', 'comment_id': 582464692.0, 'datetime': '2020-02-05 15:33:08+00:00', 'masked_author': 'username_2', 'text': ""I'd like to pick this one up too. Given the size of the API, can we share this between us?"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'rachelnabors', 'comment_id': 582476809.0, 'datetime': '2020-02-05 15:58:03+00:00', 'masked_author': 'username_0', 'text': ""Why don't you both split the load? I'll put your names down for the different tasks (since the checkboxes aren't working!). How do you want to split it?"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'mitulsavani', 'comment_id': 582477846.0, 'datetime': '2020-02-05 16:00:11+00:00', 'masked_author': 'username_4', 'text': 'Hi there, I would like claim for View Style Prop.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'jeremy-deutsch', 'comment_id': 582479006.0, 'datetime': '2020-02-05 16:02:37+00:00', 'masked_author': 'username_3', 'text': '@username_0 I could document the API for `Animated.Value`/`Animated.ValueXY`, and leave the rest of `Animated` to @username_2', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'rachelnabors', 'comment_id': 582481512.0, 'datetime': '2020-02-05 16:07:48+00:00', 'masked_author': 'username_0', 'text': ""@username_4 You got it! Don't forget to reference this issue in your PR!"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'codecog', 'comment_id': 582494293.0, 'datetime': '2020-02-05 16:33:56+00:00', 'masked_author': 'username_5', 'text': '@username_0 feel free to assign `<SectionList />` to me!', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'alvessteve', 'comment_id': 582507761.0, 'datetime': '2020-02-05 17:01:25+00:00', 'masked_author': 'username_6', 'text': ""@username_0 I'll take the <ImageBackground /> :)"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'dsznajder', 'comment_id': 582512956.0, 'datetime': '2020-02-05 17:12:24+00:00', 'masked_author': 'username_7', 'text': ""@username_0 I'll take `TouchableHighlight` :)"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'ronnyiscoding', 'comment_id': 582515899.0, 'datetime': '2020-02-05 17:18:35+00:00', 'masked_author': 'username_8', 'text': '@username_0 here goes my first PR, https://github.com/facebook/react-native-website/pull/1590', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'Darking360', 'comment_id': 582515918.0, 'datetime': '2020-02-05 17:18:37+00:00', 'masked_author': 'username_9', 'text': '@username_0 Can I take `Modal`? Thank you :heart:', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'ronnyiscoding', 'comment_id': 582519087.0, 'datetime': '2020-02-05 17:25:20+00:00', 'masked_author': 'username_8', 'text': '@username_0 I can take `Image Style Props`  ? Thanks 👍', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'kaioduarte', 'comment_id': 582519660.0, 'datetime': '2020-02-05 17:26:40+00:00', 'masked_author': 'username_10', 'text': '@username_0 Can I take `Switch`? Thanks!', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'dsznajder', 'comment_id': 582520144.0, 'datetime': '2020-02-05 17:27:46+00:00', 'masked_author': 'username_7', 'text': ""@username_0 I'll take `Button` next :)"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'amandeepmittal', 'comment_id': 582520953.0, 'datetime': '2020-02-05 17:29:25+00:00', 'masked_author': 'username_1', 'text': ""@username_0 I'll work on `View` to add snack and functional component example."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'rachelnabors', 'comment_id': 582555566.0, 'datetime': '2020-02-05 18:50:27+00:00', 'masked_author': 'username_0', 'text': ""Thanks for volunteering, everyone! I've updated the matrix with all your commitments. For anyone who hasn't got a component or API to work on, we still have plenty left! Jump on in!"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'kaioduarte', 'comment_id': 582591021.0, 'datetime': '2020-02-05 20:13:37+00:00', 'masked_author': 'username_10', 'text': '@username_0 I did also a small adjustment in `Picker` component example. :grin:', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'DaniAkash', 'comment_id': 582601700.0, 'datetime': '2020-02-05 20:40:10+00:00', 'masked_author': 'username_2', 'text': ""@username_3 cool I'm up for the task ✌️"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'lfoliveir4', 'comment_id': 582610084.0, 'datetime': '2020-02-05 21:00:35+00:00', 'masked_author': 'username_11', 'text': ""@username_0 \r\n\r\nHello! I am super interested and making this contribution.\r\nAs I understand it, is it necessary to make an example with hooks and classes referring to the API?\r\n\r\nExample: Let's go up and get the Pixel Ratio\r\nDo I have to do the example in the snack using Classes and hooks? Right?\r\n\r\nIf not, please let me know!\r\n\r\nI'm waiting!"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'DaniAkash', 'comment_id': 582622077.0, 'datetime': '2020-02-05 21:30:38+00:00', 'masked_author': 'username_2', 'text': '@username_0 Just pushed out an example for the Alert component. Clipboard, Dimensions, Keyboard & LayoutAnimations are next! \r\n\r\nAlso will be picking up the Animated API which will be quite a challenging task! 😁', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'DaniAkash', 'comment_id': 582644610.0, 'datetime': '2020-02-05 22:29:44+00:00', 'masked_author': 'username_2', 'text': ""I'm unable to get the `Clipboard` working on the Expo web player. Could use some help with https://github.com/facebook/react-native-website/pull/1599"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'ahmdtalaat', 'comment_id': 582657171.0, 'datetime': '2020-02-05 23:10:33+00:00', 'masked_author': 'username_12', 'text': 'Hello \r\nFOA navigating the **table** is quite _tedious_, can you please make it a little bit easier.\r\nI would like to work on the `Keyboard`.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'DaniAkash', 'comment_id': 582679123.0, 'datetime': '2020-02-06 00:29:59+00:00', 'masked_author': 'username_2', 'text': ""@username_12 I'll be leaving the `Keyboard` in your care 👍 Picking up `LayoutAnimations` next!"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'DaniAkash', 'comment_id': 582713062.0, 'datetime': '2020-02-06 02:57:55+00:00', 'masked_author': 'username_2', 'text': ""@username_0 it'd be great if you can create a PR column to the Components and APIs update progress table and list the PRs raised related to the component. It'll greatly help the PRs to be peer-reviewed and tracked neatly ✏️"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'ronnyiscoding', 'comment_id': 582726553.0, 'datetime': '2020-02-06 04:03:45+00:00', 'masked_author': 'username_8', 'text': '@username_0 Can I take `VirtualizedList` ?', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'brunokiafuka', 'comment_id': 582819078.0, 'datetime': '2020-02-06 09:43:36+00:00', 'masked_author': 'username_13', 'text': '@username_0, I took the clipboard API.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'DaniAkash', 'comment_id': 582819663.0, 'datetime': '2020-02-06 09:45:04+00:00', 'masked_author': 'username_2', 'text': ""@username_13 There's already a PR open for this API - https://github.com/facebook/react-native-website/pull/1599"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'brunokiafuka', 'comment_id': 582820541.0, 'datetime': '2020-02-06 09:47:09+00:00', 'masked_author': 'username_13', 'text': ""Sorry @username_2, I've missed that"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'DaniAkash', 'comment_id': 582821620.0, 'datetime': '2020-02-06 09:49:48+00:00', 'masked_author': 'username_2', 'text': '@username_13 I can use your help in it 👍 it is WIP', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'hugobytes', 'comment_id': 582831896.0, 'datetime': '2020-02-06 10:15:29+00:00', 'masked_author': 'username_14', 'text': '@username_0 feel free to assign LayoutAnimation Snack example to me!', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'DaniAkash', 'comment_id': 582857973.0, 'datetime': '2020-02-06 11:18:47+00:00', 'masked_author': 'username_2', 'text': ""@username_14 I'm almost done with the LayoutAnimation. Will be sending a PR soon."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'nnajiabraham', 'comment_id': 583014416.0, 'datetime': '2020-02-06 17:21:46+00:00', 'masked_author': 'username_15', 'text': 'Hi @username_0 can I get the KeyboardAvoidingView. I will be working on _Example uses Snack_ and _Example uses function components and Hooks for that componenet_', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'tsawan', 'comment_id': 583041936.0, 'datetime': '2020-02-06 18:22:39+00:00', 'masked_author': 'username_16', 'text': 'Hi @username_0, I will be taking the Text and working on Example uses function components and Hooks.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'nnajiabraham', 'comment_id': 583083785.0, 'datetime': '2020-02-06 20:00:54+00:00', 'masked_author': 'username_15', 'text': '@username_8 Are you working on the VirtualizedList precisely on `Example uses Snack and `Example uses function components and Hooks` for that component, if not can I take it from you?', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'ronnyiscoding', 'comment_id': 583084825.0, 'datetime': '2020-02-06 20:03:38+00:00', 'masked_author': 'username_8', 'text': 'ok, it is fine.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'nnajiabraham', 'comment_id': 583086800.0, 'datetime': '2020-02-06 20:08:45+00:00', 'masked_author': 'username_15', 'text': ""Ok then @username_0  I'll be taking VirtualizedList from @username_8 precisely on `Example uses Snack` and `Example uses function components and Hooks`"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'ronnyiscoding', 'comment_id': 583118095.0, 'datetime': '2020-02-06 21:25:33+00:00', 'masked_author': 'username_8', 'text': '@username_15 I mentioned you in this PR https://github.com/facebook/react-native-website/pull/1607', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'DaniAkash', 'comment_id': 583216202.0, 'datetime': '2020-02-07 03:21:34+00:00', 'masked_author': 'username_2', 'text': ""@username_0 Summary of my PRs\r\nLayoutAnimation - https://github.com/facebook/react-native-website/pull/1609 [WIP]\r\nClipboard - https://github.com/facebook/react-native-website/pull/1599 [WIP]\r\nDatePickerIOS - https://github.com/facebook/react-native-website/pull/1583\r\nDimensions - https://github.com/facebook/react-native-website/pull/1601\r\nAlert - https://github.com/facebook/react-native-website/pull/1597\r\n\r\nIt'd be helpful if you can add these to the Components and APIs update progress. Also, I'll be picking up `Animated` library next @username_3 look forward to my PR soon 👍"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'miganga', 'comment_id': 583345250.0, 'datetime': '2020-02-07 11:10:23+00:00', 'masked_author': 'username_17', 'text': '@username_0 I would like to take on Layout Props api to update.  Thank you.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'rachelnabors', 'comment_id': 583510711.0, 'datetime': '2020-02-07 17:22:34+00:00', 'masked_author': 'username_0', 'text': 'You only need to make examples with function components and Hooks. If there is ALREADY an example with class components, then use the toggler code to show both examples together :) You should only make new examples with function components/hooks', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'rachelnabors', 'comment_id': 583517637.0, 'datetime': '2020-02-07 17:32:59+00:00', 'masked_author': 'username_0', 'text': ""Folks, I have updated the matrix to reflect the projects you've claimed! Phew! Time to review some of your pull requests! Thanks so much for contributing, and if you haven't contributed yet, just claim a component here!"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'lcelso', 'comment_id': 583594164.0, 'datetime': '2020-02-07 20:20:15+00:00', 'masked_author': 'username_18', 'text': ""I'll take the Linking"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'Simek', 'comment_id': 583657006.0, 'datetime': '2020-02-07 23:17:29+00:00', 'masked_author': 'username_19', 'text': 'I was reviewing today a few PRs related to this issue and I would like to summarize some tips according to code quality and best practices of those new examples. \r\n\r\nThere are minor things but overall this code could be used by many developers and mistakes or negligence here could be replicated further. There is no bad intent I just assume that we all want to have the best examples here 😉 \r\n\r\nPlease pay a bit attention for those details if possible:\r\n* work on master docs (`docs/*.md`) not versioned ones (`website/versioned_docs/version-0.*/*.md`)\r\n* extract styles to `StyleSheet` outside of component if necessary\r\n* use arrow function instead of `function` keyword\r\n* sort `imports` alphabetically\r\n* remember about semicolons (especially after `export`s)\r\n* use same quotation marks across whole example (I don\'t know which are prefered here `""` or `\'` but be consistent)\r\n* remember about specifying `supportedPlatforms` for the Snack if component requires that (example: c7c7929dfa0c20af5bf953c45708ce21ca0019f8)\r\n* brake lines even more often than in your IDE - Snack code block fits only `66` characters per line\r\n* do not overcomplicate Snack names\r\n\r\nThat\'s all from me. Thank you all for your contributions. Keep up the good work!', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'lcelso', 'comment_id': 583702482.0, 'datetime': '2020-02-08 04:46:31+00:00', 'masked_author': 'username_18', 'text': '@username_19 \r\n\r\nI agree with you, however I have some points in which I wanted us to reflect.\r\n\r\nWe are using SnackPlayer to generate the example together with the Expo.\r\n\r\nStrengths:\r\n\r\nCode editor\r\nDemo for three versions, web / ios and android\r\n\r\nNegative points:\r\n\r\nProject structure using the docusaurus, leaves devs a little limited, since these are markdown files, the examples in react within it are without the sixtaxe highlight.\r\n\r\nPerhaps there is some configuration in which we can make the prettier to solve this.\r\nIn js and html files I already made certain settings for this.\r\nHowever, we got to the point of using markdown syntax together with React (SnackPlayer).\r\n\r\nWhat I thought, was maybe to rethink the architecture of the project maybe using gatsbyjs, in which we have integrations with github pages, among other points.\r\n\r\nSearching here I saw that this subject was addressed in another post as well and that this is not currently in our plans.\r\nBut I think the debate is also worth it, right?', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'mdabrowka', 'comment_id': 583722234.0, 'datetime': '2020-02-08 10:03:36+00:00', 'masked_author': 'username_20', 'text': 'I will work on refactoring `AccessibilityInfo` example into a function component with Hooks', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'Simek', 'comment_id': 583735028.0, 'datetime': '2020-02-08 13:06:56+00:00', 'masked_author': 'username_19', 'text': ""@username_18 I agree that developing examples could be a bit more difficult due to fact that code is embedded in Markdown. Having examples in separate JS files would be nice (for example we can setup linter than etc.) but changing project architecture and converting all docs could be a challenging and daunting process. I don't even know if it's possible within Docusaurus. Also switch to Gatsby is not likely since Docusaurus is a Facebook product and Gatsby is not (also purpose of those platforms is bit different).\r\n\r\nMany code editors/IDEs this days can highlight JS code properly inside other type files ([screenshot](https://user-images.githubusercontent.com/719641/74085408-fd095680-4a78-11ea-91a5-5e607acfdb6e.png)). Running website on localhost and developing with live preview also helps a lot.\r\n\r\nBut back to main topic. Since `Clipboard` API is being deprecated (#1608) I would like to propose removal of this API from the TODO list. I'm sorry for that to the #1599 and #1604 authors.\r\n\r\nIt's also a good opportunity to start conversation about removing ALL existing examples from the deprecated components (leaving short description and reference only) before next major release. This whole idea started here https://github.com/facebook/react-native-website/pull/1583#issuecomment-583345444. \r\n\r\nFew pages in the `master` docs right now follow this pattern (ImageEditor, PickerIOS, Slider) but most of deprecated pages include examples. In my opinion removing those examples can force (mainy new) users to follow deprecation notice and use the proper maintained and up to date package which always contains an example or a few of them in the README."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'espipj', 'comment_id': 583773151.0, 'datetime': '2020-02-08 20:21:28+00:00', 'masked_author': 'username_21', 'text': ""Hey @username_0 ! I'll be making some changes in the TextInput API docs 😄"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'DaniAkash', 'comment_id': 583796374.0, 'datetime': '2020-02-09 02:07:42+00:00', 'masked_author': 'username_2', 'text': 'While testing out the Animated API, I had to write some transforms and realized I might as well use them as an example for the Transforms API. However, as per https://github.com/facebook/react-native/issues/27649, the skew transform isn\'t working on Android.\r\n## Skew on iOS: \r\n<img width=""224"" alt=""Screenshot 2020-02-09 at 7 13 07 AM"" src=""https://user-images.githubusercontent.com/6841445/74094922-e6154380-4b0e-11ea-9469-729736570b06.png"">\r\n## Skew on Android:\r\n<img width=""218"" alt=""Screenshot 2020-02-09 at 7 12 29 AM"" src=""https://user-images.githubusercontent.com/6841445/74094930-06450280-4b0f-11ea-9912-ce5dfbd256d2.png"">', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'ahmdtalat', 'comment_id': 583867489.0, 'datetime': '2020-02-09 16:53:58+00:00', 'masked_author': 'username_22', 'text': ""Hello guys,\r\nI've an issue and need you help. when I make a change to the docs. it does not render although I'm using the latest version as the documentation says `Changes to /docs will only be visible in the latest version of the documentation (master).\r\n`.\r\nto solve this. I have to run `yarn run version 0.62`. but is that's ok?\r\nI mean what if I want to push changes. should I push the docs changes only?"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'DaniAkash', 'comment_id': 583981423.0, 'datetime': '2020-02-10 06:53:44+00:00', 'masked_author': 'username_2', 'text': '@username_22 the changes are in the master documentation. \r\n\r\nTo open master documentation: \r\nyou can directly click on the version number next to the ""React Native"" title icon of the page and see the list of all versions including the master documentation. You can view your changes in this section. No need to run version 0.62 command\r\n<img width=""269"" alt=""Screenshot 2020-02-10 at 12 20 45 PM"" src=""https://user-images.githubusercontent.com/6841445/74127251-1be62500-4c00-11ea-85c3-0dd6268f21dc.png"">', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'rachelnabors', 'comment_id': 584144404.0, 'datetime': '2020-02-10 14:19:37+00:00', 'masked_author': 'username_0', 'text': 'I\'ve updated the matrix with new contributors and some new protips to help folks contributing their code (thanks, @username_19!) Please check them out under ""Submit your PR!"" and ""Code Tips""! Thanks again to everyone for contributing!', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'lfoliveir4', 'comment_id': 584377594.0, 'datetime': '2020-02-10 21:57:34+00:00', 'masked_author': 'username_11', 'text': ""How do I stop checking the lib that I'm going to do the example?"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'lfoliveir4', 'comment_id': 584382063.0, 'datetime': '2020-02-10 22:09:11+00:00', 'masked_author': 'username_11', 'text': '@username_0 \r\nI will make the contribution with the Image and FlatList component', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'DaniAkash', 'comment_id': 584471940.0, 'datetime': '2020-02-11 04:16:11+00:00', 'masked_author': 'username_2', 'text': '@username_0 add me to the Transforms API, I have already raised a PR https://github.com/facebook/react-native-website/pull/1613', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'ahmdtalat', 'comment_id': 584606755.0, 'datetime': '2020-02-11 12:13:35+00:00', 'masked_author': 'username_22', 'text': 'Hello Guys, I added Keyboard API example using function components & hooks #1619', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'mohamedsgap', 'comment_id': 584663368.0, 'datetime': '2020-02-11 14:32:32+00:00', 'masked_author': 'username_23', 'text': ""Can't find TabBarIOS in [react-native/Libraries](https://github.com/facebook/react-native/tree/9caf99162dcd1ee73c571c494ca3115540f45f69/Libraries/Components) to start update its API"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'lcelso', 'comment_id': 584821289.0, 'datetime': '2020-02-11 19:55:02+00:00', 'masked_author': 'username_18', 'text': '@username_19 e @username_0 \r\n\r\nI understand your point and agree that we should have a scenario where editing the javascript files is a little easier.\r\n\r\nI was analyzing some PRs here and I miss some standards, like 2 tabs, single quotes among other points, in which I believe we can define this here as a team, what do you say?\r\n\r\nOn the points that you raised from discontinuation I really totally agree.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'lcelso', 'comment_id': 584851908.0, 'datetime': '2020-02-11 21:06:31+00:00', 'masked_author': 'username_18', 'text': 'Hi guys, can someone review this for me?\r\n\r\n@username_19 @username_0 \r\n# 1626', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'tsawan', 'comment_id': 585025543.0, 'datetime': '2020-02-12 04:40:55+00:00', 'masked_author': 'username_16', 'text': '@username_0 I can also change ""Image"" and ""AppState"" examples to use functional components and hooks.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'luism3861', 'comment_id': 585244496.0, 'datetime': '2020-02-12 14:56:19+00:00', 'masked_author': 'username_24', 'text': ""@username_0  this is my 2 pr's #1627  #1617"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'luism3861', 'comment_id': 585245510.0, 'datetime': '2020-02-12 14:58:08+00:00', 'masked_author': 'username_24', 'text': '@username_0  #1617  #1627  !!', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'DaniAkash', 'comment_id': 585576839.0, 'datetime': '2020-02-13 06:42:56+00:00', 'masked_author': 'username_2', 'text': ""I'm struggling to get the RNTester app running in my machine. Anyone else facing issue with this app?"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'rachelnabors', 'comment_id': 586634550.0, 'datetime': '2020-02-15 19:42:38+00:00', 'masked_author': 'username_0', 'text': 'Hi everyone, sorry for the absence. Got sick again!\r\n\r\nMatrix is updated!', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'rachelnabors', 'comment_id': 586634555.0, 'datetime': '2020-02-15 19:42:41+00:00', 'masked_author': 'username_0', 'text': '@username_18 We have a discord we could use to coordinate, but then we\'d have to track in two locations, which historically can be even more confusing! If you want to team up with someone, I suggest you reach out to them personally and choose the format of your choice to coordinate :) Could you expand on ""do you think we can have some language context? Mainly in the context for examples.""?', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'mitulsavani', 'comment_id': 587119197.0, 'datetime': '2020-02-17 18:49:43+00:00', 'masked_author': 'username_4', 'text': 'Hi @username_0, I see that you recently updated the metrics and tick marked `View Style Props`  referenced #1614 on it. I am not sure if that was a typo if so then, my PR is #1612 FYI. \r\n\r\nI wonder if there is anything else that I need to finish for `View Style Props`? If not then, I can start working on other pending work', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'lcelso', 'comment_id': 587210477.0, 'datetime': '2020-02-18 00:10:41+00:00', 'masked_author': 'username_18', 'text': '@username_0 Hello, I believe that a faster communication channel could speed up some points, such as clearing doubts, which we can remove / discontinue.\r\n\r\nEspecially between some points of decisions and this done we can make official here.\r\n\r\nAbout languages, I was seeing react.org and this is already done there.\r\n\r\nThis is a point if we have a group on Slack or anywhere else that we will have a more fluid communication.\r\n\r\nWe can discuss tools or other things like that and I try to have a better agility to give things a better flow.\r\n\r\nWhat do you say?', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'amandeepmittal', 'comment_id': 587295390.0, 'datetime': '2020-02-18 06:08:35+00:00', 'masked_author': 'username_1', 'text': 'Hi @username_0, I will update the `Share` API by adding functional and hooks example since it already has the class component example.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'Simek', 'comment_id': 587298298.0, 'datetime': '2020-02-18 06:20:37+00:00', 'masked_author': 'username_19', 'text': '@username_0 Could you asses the idea proposed in https://github.com/facebook/react-native-website/issues/1579#issuecomment-583735028?', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'DaniAkash', 'comment_id': 587465992.0, 'datetime': '2020-02-18 13:42:57+00:00', 'masked_author': 'username_2', 'text': 'While it is a good idea to remove the options from the sidebar, I still feel removing the examples would be bit harsh for people who are already heavily using these components...', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'rachelnabors', 'comment_id': 587610889.0, 'datetime': '2020-02-18 18:24:51+00:00', 'masked_author': 'username_0', 'text': ""@simek I can confirm that deprecated components will be removed from the sidebar but their legacy pages will live on quietly—there is no harm in finishing up the examples! I hope this settles things.\r\n\r\n@username_1 you're on Share, thanks!\r\n\r\n@username_18 Will need to hear more support from other people for your idea—worry another communication channel now would slow down and split communications rather than keeping us moving in one direction with one source of truth—this location. Feel free to coordinate privately on individual collaborations, naturally.\r\n\r\n@username_4 I'll correct the issue post haste.\r\n\r\nNext up: I'll be removing pieces of the matrix that have been completed to make it easier to see what's left to do. Thanks, everyone, for your hard work so far!"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'Simek', 'comment_id': 588253187.0, 'datetime': '2020-02-19 14:15:12+00:00', 'masked_author': 'username_19', 'text': '@username_0 Are there any planned changes for the [Components and APIs](https://facebook.github.io/react-native/docs/next/components-and-apis) page? Would you like to mark in some way or even remove deprecated pages listed in there?', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'rachelnabors', 'comment_id': 588361038.0, 'datetime': '2020-02-19 18:04:44+00:00', 'masked_author': 'username_0', 'text': ""@username_19 Smart thinking! And to think I've been looking at this page the whole week without realizing it! What a cold! Good thing you're on the ball!\r\n\r\nWe should remove the deprecated components and APIs from the page as we are removing them from the sidebar as well. Would you like to handle that one?"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'lcelso', 'comment_id': 588387678.0, 'datetime': '2020-02-19 18:56:51+00:00', 'masked_author': 'username_18', 'text': '@username_0 @username_19 \r\n\r\nI created a channel for quick communication and central points of doubts here. \r\n\r\n[link to slack](https://join.slack.com/t/react-native-website/shared_invite/enQtOTU5NzkzMjA1MzE3LTEzNjBhYTdlNGVlZGEzNTEzZTlkNTliMTBjOTZlN2RiOWQ3MjMyMzjMjMj)\r\n\r\nHowever I agree that here we must have the data and everything that was talked about there registered here.\r\n\r\nWhat do you say?\r\n\r\nBecause I think so, I am feeling our agility / decision making is very slow.\r\n\r\nThere are points of doubt about how we should do it and even points of discussion with better fluidity.\r\n\r\nWe currently have many PRs stopped a lot of them for many days. Among other points where we can try to start reviewing this.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'Simek', 'comment_id': 588812978.0, 'datetime': '2020-02-20 09:09:06+00:00', 'masked_author': 'username_19', 'text': '@username_0 I think that ""API"" link in top bar which leads to `ActivityIndicator` instead of  `Components and APIs` in `next` docs do not help either 😉 \r\n\r\nBack to the deprecation discussion - I would like to help with those changes but I\'m still not 100% sure how to perform them. \r\n\r\nIn my opinion, in some point in time `0.61` docs should be regenerated to include all the work from this issue and more changes that landed on the `next` docs during last months (I assume this should happen before or on `0.62` release?). \r\n\r\nMerging sidebar and `Components and APIs` deprecation cleanup PRs before refreshing `0.61` will cause a loss of some improvements (mainly deprecation indicators and notes because they are currently only on the `next` docs and are targeted to be deleted before/on `0.62` release). That is also the reason why I was talking about generating `0.62` docs when you asked about sidebar changes in earlier discussion.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'Simek', 'comment_id': 588831420.0, 'datetime': '2020-02-20 09:22:18+00:00', 'masked_author': 'username_19', 'text': '@username_18 I think that Slack/Teams/Discord channel will help with communication but you should remember that this is still a Facebook repo which is not officially maintained by the community. \r\n\r\nIn my opinion creating this kind of communication platform should be approved and managed by FB employees (maintainers). If your idea got a green light of course I will join along.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'mitulsavani', 'comment_id': 588847325.0, 'datetime': '2020-02-20 09:33:51+00:00', 'masked_author': 'username_4', 'text': 'I definitely agree with @username_19 opinion,  @username_18 I recommend you to open an issue on core react native repo to discuss further about it.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'lcelso', 'comment_id': 588993385.0, 'datetime': '2020-02-20 12:19:31+00:00', 'masked_author': 'username_18', 'text': 'And if this suggestion is a bad point I would like to understand how we can resolve the points below:\r\n\r\n- Long standing PRs\r\n- Doubts of those who want to help and have a quick flow of responses\r\n- Discussions on topics that we can make obsolete or not', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'lcelso', 'comment_id': 588994321.0, 'datetime': '2020-02-20 12:21:44+00:00', 'masked_author': 'username_18', 'text': 'I would like to help with this too', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'cosio55', 'comment_id': 589372397.0, 'datetime': '2020-02-20 22:10:27+00:00', 'masked_author': 'username_25', 'text': ""Hi @username_0 I was looking at the missing components and I saw that TabBarIOS & TabBarIOS.item were deprecated on RN 0.5959 here's the [CHANGELOG](https://github.com/react-native-community/releases/blob/master/CHANGELOG.md#059) they don't appear on the docs for version 0.59 but they re appeared on version 60 and 61."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'rachelnabors', 'comment_id': 589888563.0, 'datetime': '2020-02-22 00:08:44+00:00', 'masked_author': 'username_0', 'text': ""@username_25 Thank you for hunting that one down! I wish we could go back and remove it from all the following versions of the docs now. I'll remove it from the matrix. Much obliged!"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'rachelnabors', 'comment_id': 589896783.0, 'datetime': '2020-02-22 00:54:49+00:00', 'masked_author': 'username_0', 'text': ""I've updated the matrix and moved all the completed components and APIs to a leaderboard to recognize their contributors. Thank you everyone! There's still lots to do: those APIs need love, too!"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'nnajiabraham', 'comment_id': 589904635.0, 'datetime': '2020-02-22 01:54:39+00:00', 'masked_author': 'username_15', 'text': 'Hi @username_0, please can you assign me for all fields on AppRegistry, will update API and write examples 🙌🙌', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'kaioduarte', 'comment_id': 589941993.0, 'datetime': '2020-02-22 10:34:49+00:00', 'masked_author': 'username_10', 'text': ""@username_0 I'll take `Shadow Props` and `Text Style Props` :wink:"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'ahmdtalat', 'comment_id': 589943279.0, 'datetime': '2020-02-22 10:50:48+00:00', 'masked_author': 'username_22', 'text': '@username_0 update my username in the matrix from (Keyboard) username_12 -> @username_22 \r\nand I need someone to review my PR #1619, thanks.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'espipj', 'comment_id': 589952806.0, 'datetime': '2020-02-22 12:46:00+00:00', 'masked_author': 'username_21', 'text': 'Appreciate the gifs lol 🦄', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'espipj', 'comment_id': 589952840.0, 'datetime': '2020-02-22 12:46:28+00:00', 'masked_author': 'username_21', 'text': 'Appreciate the gifs lol 🦄 @username_0', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'lfoliveir4', 'comment_id': 589969890.0, 'datetime': '2020-02-22 16:03:25+00:00', 'masked_author': 'username_11', 'text': '@username_0 What do I need to do to finish my contribution with FlatList and if it is possible to update another API or Component?', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'rachelnabors', 'comment_id': 590265367.0, 'datetime': '2020-02-24 10:55:34+00:00', 'masked_author': 'username_0', 'text': 'Matrix is updated! Thanks everyone!\r\n\r\n@username_11 just pick another one and get to it! Flatlist is in the queue. There area lot of PRs to merge. Thank you for your patience!', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'Simek', 'comment_id': 590366997.0, 'datetime': '2020-02-24 15:06:01+00:00', 'masked_author': 'username_19', 'text': ""@username_0 Can you claryfiy how you would like to perform  changes to deprecated components mentioned in https://github.com/facebook/react-native-website/issues/1579#issuecomment-588361038? I have created an explanation why I'm not sure how to do this properly here: https://github.com/facebook/react-native-website/issues/1579#issuecomment-588812978. If my explanation is still foggy or confusing instead of clarifying I can try explain it again in different words."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'rachelnabors', 'comment_id': 590426531.0, 'datetime': '2020-02-24 16:43:14+00:00', 'masked_author': 'username_0', 'text': '@simek Changes to versioned docs have to happen in */website/versioned_docs/<version number>/*. Add the <file>.md with the content you want to edit for that version. More information on how to do that is here: https://docusaurus.io/docs/en/next/versioning \r\n\r\nAre you on Discord or Twitter? Perhaps there or in a new issue would be the best place to coordinate, as this channel is for people updating the docs and we could confuse them with conversation about versioning files :)', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'Simek', 'comment_id': 590441520.0, 'datetime': '2020-02-24 17:09:06+00:00', 'masked_author': 'username_19', 'text': ""@username_0 Sorry for bringing up this topic here. I have some basic knowledge about versioning in Docasurus but in my opinion the right process depends on final effect you want to archive. We can continue discussion on the Discord, since I'm not a frequent user of my Twitter. My Discord handle is `username_19#2069`."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'kakukakug', 'comment_id': 591179453.0, 'datetime': '2020-02-26 01:02:48+00:00', 'masked_author': 'username_26', 'text': 'Hi @username_0, I Want to contribute React Native!\r\nplease can you assign me for TouchableWithoutFeedback: Modify the example to use snacks.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'tsawan', 'comment_id': 591230953.0, 'datetime': '2020-02-26 04:20:43+00:00', 'masked_author': 'username_16', 'text': ""@username_0 I've just checked and the following component examples are already using functional components and hooks so no further action is required.\r\n\r\n- InputAccessoryView\r\n- RefreshControl\r\n- SafeAreaView\r\n- ScrollView"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'tsawan', 'comment_id': 591231462.0, 'datetime': '2020-02-26 04:23:18+00:00', 'masked_author': 'username_16', 'text': '@username_0 I\'ve also checked that almost all of the remaining APIs don\'t need any work for ""Examples uses functional components and hooks"". So these can be marked as Done or NA.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'rachelnabors', 'comment_id': 591970902.0, 'datetime': '2020-02-27 13:29:33+00:00', 'masked_author': 'username_0', 'text': '@username_26 You\'re on it!\r\n\r\n@username_16 Thanks for checking on all those! I\'ve removed those four components from the matrix. I\'m happy to tick off the APIs—but could you be more specific than ""almost all?"" Who\'s missing yet?', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'ahmdtalat', 'comment_id': 591989188.0, 'datetime': '2020-02-27 14:07:52+00:00', 'masked_author': 'username_22', 'text': ""Hello guys, I'm working on the Keyboard API, I added hooks example and snacks, but how to check if the `API is up to date`? #1619"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'tsawan', 'comment_id': 592118335.0, 'datetime': '2020-02-27 18:51:18+00:00', 'masked_author': 'username_16', 'text': '@username_0 following APIs don\'t need anything for ""Examples uses functional components and hooks"":  ActionSheetIOS, Easing, InteractionManager, Settings, Systrace.\r\nI am not too sure about BackHandler API, so you may want to check this.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'rachelnabors', 'comment_id': 592235890.0, 'datetime': '2020-02-27 23:49:23+00:00', 'masked_author': 'username_0', 'text': '@username_16 Hmm, they may have function components in their example code, but they still need big example Snacks that use them as well. So they stay up!', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'lfoliveir4', 'comment_id': 592517377.0, 'datetime': '2020-02-28 13:40:56+00:00', 'masked_author': 'username_11', 'text': '@username_0 So I just have to wait for PR? Can I contribute with another API if I have it available?', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'codecog', 'comment_id': 592517676.0, 'datetime': '2020-02-28 13:41:45+00:00', 'masked_author': 'username_5', 'text': 'Will get to SectionList this weekend', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'rachelnabors', 'comment_id': 592533932.0, 'datetime': '2020-02-28 14:21:22+00:00', 'masked_author': 'username_0', 'text': ""@username_11 You sure can :) Don't wait on my PRs. Sometimes there's feedback, but it's rare that that should stop you from tackling a new task!\r\n\r\n@username_5 Oh thank you so much!"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'rachelnabors', 'comment_id': 592534806.0, 'datetime': '2020-02-28 14:23:28+00:00', 'masked_author': 'username_0', 'text': ""*Folks!* We're hoping to cut the next branch of the docs in a few weeks. Your contributions are making this a great new edition of the React Native docs! Thank you so much for your hard individual efforts, from the tiniest example update to whole new pages! \r\n\r\nIf you have the bandwidth, taking on those APIs are going to help push us over the edge to completeness. If you've updated a component already, I know you have what it takes to tackle and API. Hit me up here, on Twitter, or Discord if you run into any trouble! \r\n\r\nLet's do this!\r\n![shera_BAM](https://user-images.githubusercontent.com/236306/75556115-7de2bf00-5a35-11ea-9ac1-f6dbc6f3ce20.gif)"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'rachelnabors', 'comment_id': 592561174.0, 'datetime': '2020-02-28 15:23:44+00:00', 'masked_author': 'username_0', 'text': ""Oh snap! We are so close to finishing _all the Core Components!_\r\n\r\n* @username_26, we're counting on you for `TouchableWithoutFeedback`\r\n* @username_8, can you check `VirtualizedList` to see if it's API is up to date?\r\n* _We need a volunteer for `DrawerLayoutAndroid`!_ Any takers?"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'espipj', 'comment_id': 592568947.0, 'datetime': '2020-02-28 15:40:50+00:00', 'masked_author': 'username_21', 'text': 'If not worked/assigned yet I could take DrawerLayoutAndroid @username_0', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'ahmdtalat', 'comment_id': 592570757.0, 'datetime': '2020-02-28 15:44:53+00:00', 'masked_author': 'username_22', 'text': ""@username_0 Hello Rachel, I've updated the keyboard API and now I think it's done, check the changes. :) #1619"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'rachelnabors', 'comment_id': 592584150.0, 'datetime': '2020-02-28 16:15:00+00:00', 'masked_author': 'username_0', 'text': ""@username_21 It's all yours! \r\n\r\nMatrix is updated!"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'lcelso', 'comment_id': 592998101.0, 'datetime': '2020-02-29 21:49:21+00:00', 'masked_author': 'username_18', 'text': '@username_0 and @username_19 \r\n\r\nHow do i find you on discord?', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'mohamedsgap', 'comment_id': 593002941.0, 'datetime': '2020-02-29 22:54:30+00:00', 'masked_author': 'username_23', 'text': ""Hey @username_0 I gonna check if the 'AppState' API is up to date or not! and I gonna update it if it needs."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'rachelnabors', 'comment_id': 593408145.0, 'datetime': '2020-03-02 13:42:51+00:00', 'masked_author': 'username_0', 'text': '@username_18 I\'m \'R ""Nearest"" Nabors#7453\' on Discord\r\n\r\n@username_23 THANK YOU! Please report back here if it needed updating or not so I can update the matrix!', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'DaniAkash', 'comment_id': 593731283.0, 'datetime': '2020-03-03 02:18:14+00:00', 'masked_author': 'username_2', 'text': '@username_0 Just added examples for Animated & PanResponder. If there are any specific animations you think I need to cover, let me know 😁', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'mohamedsgap', 'comment_id': 594373159.0, 'datetime': '2020-03-04 07:44:55+00:00', 'masked_author': 'username_23', 'text': ""Hey @username_0 I've just checked the core code of 'AppState' and I think it's up to date but there is an event in core code called 'memoryWarning' didn't mention in the events' reference in the doc, do you need me to fill a PR for it? I'm ready ;)"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'rachelnabors', 'comment_id': 594704481.0, 'datetime': '2020-03-04 17:53:53+00:00', 'masked_author': 'username_0', 'text': 'Yes please, @username_23! That would be an API in need of updating! Please PR <3', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'rachelnabors', 'comment_id': 595238157.0, 'datetime': '2020-03-05 13:47:20+00:00', 'masked_author': 'username_0', 'text': ""@username_21, @username_5, @username_8: How are your components doing? We are waiting on your three components to close out the updated components docs! We're so close! Don't stop now!\r\n\r\nEveryone else: the matrix is up to date. We've still got some APIs in need of examples and updates! If you have the time to commit to working on one, it really helps the docs!"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'danilobrinu', 'comment_id': 595257478.0, 'datetime': '2020-03-05 14:29:17+00:00', 'masked_author': 'username_27', 'text': '@username_0 how I can help ?', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'mohamedsgap', 'comment_id': 595346453.0, 'datetime': '2020-03-05 17:19:13+00:00', 'masked_author': 'username_23', 'text': ""Hi @username_0, very excited to contribute more, so I gonna add an example uses Snack for 'Vibration' API, stay tuned for the PR ;)"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'Simek', 'comment_id': 595353813.0, 'datetime': '2020-03-05 17:34:50+00:00', 'masked_author': 'username_19', 'text': '@username_23 `Vibration` API has been updated in 5fcd97d80e58cfadc81ff0bdc67b3c53fe177e61.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'rachelnabors', 'comment_id': 595365752.0, 'datetime': '2020-03-05 18:01:37+00:00', 'masked_author': 'username_0', 'text': ""@username_23 Actually, the example is still in class components. If you could add a function component exampe and a class/function component toggler I can remove it from the matrix! Won't you please? I'd have less to worry about!"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'rachelnabors', 'comment_id': 595366118.0, 'datetime': '2020-03-05 18:02:26+00:00', 'masked_author': 'username_0', 'text': '@username_27 Good to hear your enthusiasm! Read that post up top and claim an API to update down here!', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'danilobrinu', 'comment_id': 595367607.0, 'datetime': '2020-03-05 18:05:43+00:00', 'masked_author': 'username_27', 'text': '@username_0 I want to take the Settings :)', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'Simek', 'comment_id': 595369500.0, 'datetime': '2020-03-05 18:09:47+00:00', 'masked_author': 'username_19', 'text': '@username_27 I have PR in stash for the `Settings` but there is an issue with API that need to be resolved first: facebook/react-native#28213', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'danilobrinu', 'comment_id': 595370186.0, 'datetime': '2020-03-05 18:11:07+00:00', 'masked_author': 'username_27', 'text': '@username_19 ohh Ok', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'rachelnabors', 'comment_id': 595372935.0, 'datetime': '2020-03-05 18:16:48+00:00', 'masked_author': 'username_0', 'text': 'I updated the matrix to show that!', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'mohamedsgap', 'comment_id': 595375530.0, 'datetime': '2020-03-05 18:22:35+00:00', 'masked_author': 'username_23', 'text': ""Okay @username_0 I will update the entire 'Vibration' API, then I gonna create PR for it asap :)"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'rachelnabors', 'comment_id': 595861208.0, 'datetime': '2020-03-06 16:57:01+00:00', 'masked_author': 'username_0', 'text': 'We still have three APIs in need of owners!\r\n\r\n* [PermissionsAndroid](https://reactnative.dev/docs/permissionsandroid) and [InteractionManager](https://reactnative.dev/docs/interactionmanager) need their examples wrapped in a Snack player\r\n\r\n* [Systrace](https://reactnative.dev/docs/systrace) needs an example', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'rachelnabors', 'comment_id': 595865916.0, 'datetime': '2020-03-06 17:06:01+00:00', 'masked_author': 'username_0', 'text': ""You've done a great job so far! The docs are rocking for all your help! I could not be prouder!"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'danilobrinu', 'comment_id': 595881571.0, 'datetime': '2020-03-06 17:42:53+00:00', 'masked_author': 'username_27', 'text': ""@username_0 can you give one of those :D ? I'm open to help"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'rachelnabors', 'comment_id': 595903340.0, 'datetime': '2020-03-06 18:38:21+00:00', 'masked_author': 'username_0', 'text': 'Sure, @username_27! I give you `InteractionManager`!', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'danilobrinu', 'comment_id': 595914539.0, 'datetime': '2020-03-06 19:05:54+00:00', 'masked_author': 'username_27', 'text': '@username_0 thanks :)', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'ahmdtalat', 'comment_id': 595919607.0, 'datetime': '2020-03-06 19:18:09+00:00', 'masked_author': 'username_22', 'text': '@username_0  Does the Keyboard component need extra work? my PR is merged.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'rachelnabors', 'comment_id': 595924302.0, 'datetime': '2020-03-06 19:29:16+00:00', 'masked_author': 'username_0', 'text': '@username_22 You did contribute an example! But did you also check to see if the API needed updating?', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'danilobrinu', 'comment_id': 595926873.0, 'datetime': '2020-03-06 19:35:39+00:00', 'masked_author': 'username_27', 'text': ""@username_0 I run the `yarn start` command but I don't see my changes in the page. I see the page is refreshed everytime I do some change but I don't see my changes.  How should works ?"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'ahmdtalat', 'comment_id': 595927190.0, 'datetime': '2020-03-06 19:36:30+00:00', 'masked_author': 'username_22', 'text': 'my last commit was about updating the API. https://github.com/facebook/react-native-website/pull/1619/commits/27ec6e8df4d0dc0e1969d90f61d9e4ff6e37542b', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'mohamedsgap', 'comment_id': 595958721.0, 'datetime': '2020-03-06 20:47:18+00:00', 'masked_author': 'username_23', 'text': ""@username_27 Hi Danilo, to see your changes on Docs you should, put 'next/yourComponentName' in the URL, to learn more please, take a look at contribution guides.\r\n\r\n@username_22 Hey Ahmed, Make sure that you check the core code of 'Keyboard' API component, if there any change in the core code, you need to mention it in doc as an API reference."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'danilobrinu', 'comment_id': 595965882.0, 'datetime': '2020-03-06 21:08:16+00:00', 'masked_author': 'username_27', 'text': '@username_23 thanks', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'ahmdtalat', 'comment_id': 595972695.0, 'datetime': '2020-03-06 21:28:13+00:00', 'masked_author': 'username_22', 'text': ""@username_23 I did if I'm not mistaken. this the new function I added to the docs:\r\n```jsx\r\nstatic scheduleLayoutAnimation(event)\r\n```\r\n\r\nUseful for syncing TextInput (or other keyboard accessory view) size of position changes with keyboard movements."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'mohamedsgap', 'comment_id': 595976025.0, 'datetime': '2020-03-06 21:38:04+00:00', 'masked_author': 'username_23', 'text': '@username_22 If you already mentioned it in the doc as an API reference, that’s good and tell Rachel to update the matrix, if not please update it, and if u need any help, just ping me ✌️🙂', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'rachelnabors', 'comment_id': 596083677.0, 'datetime': '2020-03-07 12:34:32+00:00', 'masked_author': 'username_0', 'text': ""@username_27 are you looking at http://localhost:3000/react-native/docs/next/YOURPAGE ?\r\n\r\n@username_22 Then you're good to go! I'll remove it from the matrix! Thank you!"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'danilobrinu', 'comment_id': 596086375.0, 'datetime': '2020-03-07 13:05:55+00:00', 'masked_author': 'username_27', 'text': '@username_0 yes, is my bad (typo mistake) hehehe sorry.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'gedeagas', 'comment_id': 596320109.0, 'datetime': '2020-03-09 03:56:15+00:00', 'masked_author': 'username_28', 'text': 'Can i take `PermissionsAndroid` @username_0', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'rachelnabors', 'comment_id': 596482175.0, 'datetime': '2020-03-09 11:53:41+00:00', 'masked_author': 'username_0', 'text': ""@username_28 Sure thing! It's a little weird to use with Expo (see also the bit on the page about using it with Expo!). Here's a sample example from @brentvatne: https://snack.expo.io/rJZTlmgrI"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'rachelnabors', 'comment_id': 596490692.0, 'datetime': '2020-03-09 12:13:49+00:00', 'masked_author': 'username_0', 'text': '@username_28 re: #1705, are there anymore updates that the API needs? Can I remove it from the list of work that needs doing?', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'danilobrinu', 'comment_id': 596681847.0, 'datetime': '2020-03-09 17:51:55+00:00', 'masked_author': 'username_27', 'text': '@username_0 can you review my PR #1712, I think is done but I prefer your feedback :)', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'rachelnabors', 'comment_id': 596717111.0, 'datetime': '2020-03-09 18:48:05+00:00', 'masked_author': 'username_0', 'text': '@username_27 just a few more edits! Please check your PR for more info <3', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'gedeagas', 'comment_id': 596932198.0, 'datetime': '2020-03-10 06:53:54+00:00', 'masked_author': 'username_28', 'text': ""@username_0 thank you for merging the pr, there is no more update that the Flatlist API needs.\r\n \r\nAnd also about the `PermissionsAndroid`, as you say because snack use expo under the hood It's a little weird to use and I notice that while the popup for `requestCameraPermission` does come up the `title`, `message`, and `button` don't. Is that okay?"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'codecog', 'comment_id': 596968633.0, 'datetime': '2020-03-10 08:45:04+00:00', 'masked_author': 'username_5', 'text': '@username_28 @username_0 please take section list from me if you would like another one.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'gedeagas', 'comment_id': 597037448.0, 'datetime': '2020-03-10 11:28:49+00:00', 'masked_author': 'username_28', 'text': 'Thanks @username_5, i think i will take over `section list` first until i have clarification about `PermissionsAndroid`.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'rachelnabors', 'comment_id': 597057888.0, 'datetime': '2020-03-10 12:24:03+00:00', 'masked_author': 'username_0', 'text': ""@username_28 It's ok. It is better than no example :) Moving you on to `SectionList` as well"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'gedeagas', 'comment_id': 597058791.0, 'datetime': '2020-03-10 12:26:21+00:00', 'masked_author': 'username_28', 'text': 'Got it thanks @username_0.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'gedeagas', 'comment_id': 597187917.0, 'datetime': '2020-03-10 16:39:43+00:00', 'masked_author': 'username_28', 'text': '@username_0 #1717 and #1720 should be ready for review ❤️', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'mohamedsgap', 'comment_id': 597444429.0, 'datetime': '2020-03-11 04:57:13+00:00', 'masked_author': 'username_23', 'text': ""So proud to see the huge progress that all the contributors are made so far, all the components and APIs are already assigned except `systrace` API, I tried to look for the core code of it to figure out it built under the hood but I couldn't find it in the 'react-native' repo, so please if anyone has an idea how to start with `systrace`. I'll be so greatful. @username_0"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'Naturalclar', 'comment_id': 597472987.0, 'datetime': '2020-03-11 06:54:39+00:00', 'masked_author': 'username_29', 'text': ""@username_23 \r\nFile for `systrace` api in the react-native repo seems to exist here \r\nhttps://github.com/facebook/react-native/blob/master/Libraries/Performance/Systrace.js\r\nI haven't read the code much yet for me to help out, but should be a good starting point :+1:"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'rachelnabors', 'comment_id': 597922297.0, 'datetime': '2020-03-11 23:02:24+00:00', 'masked_author': 'username_0', 'text': ""Wow, we're down to 7 docs left to write! If the owners haven't spoken for them by the end of tomorrow, I'll be releasing them back into the pool for more active members to pick up. Things happen! We'll carry the torch!\r\n\r\n@username_23 Shall I sign you up for `systrace`? The last kitten in the box, I'm sure it would be happy to find a home with you!\r\n\r\n@username_28 Does `sectionList` still need its API updated? Let me know! Hope we can take it off the list <3"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'nnajiabraham', 'comment_id': 597923918.0, 'datetime': '2020-03-11 23:07:59+00:00', 'masked_author': 'username_15', 'text': '@username_0 still working on AppRegistry, just got sidetracked with other stuffs', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'DaniAkash', 'comment_id': 597938202.0, 'datetime': '2020-03-11 23:58:41+00:00', 'masked_author': 'username_2', 'text': '@username_0 Transforms PR is merged. The API can be marked closed...', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'mohamedsgap', 'comment_id': 598156262.0, 'datetime': '2020-03-12 12:21:08+00:00', 'masked_author': 'username_23', 'text': 'Okay @username_0  I gonna work on `systrace`, I hope ship it asap ;)', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'rachelnabors', 'comment_id': 598490727.0, 'datetime': '2020-03-13 00:32:21+00:00', 'masked_author': 'username_0', 'text': ""Folks: in less than 12 hours I will be releasing any docs in the matrix whose people haven't checked in:\r\n\r\nSectionList | @username_28\r\nVirtualizedList | @username_8 \r\nLayout Props | @username_17 \r\nLinking | @username_18\r\nPanResponder | @username_2 \r\n\r\nThere's a lot going on and we're really close. If you're still in or if you need to bow out, please just let me know!"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'gedeagas', 'comment_id': 598495664.0, 'datetime': '2020-03-13 00:54:21+00:00', 'masked_author': 'username_28', 'text': '@username_0 still searching the `SectionList` codebase for any changes. will update here ASAP.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'DaniAkash', 'comment_id': 598655194.0, 'datetime': '2020-03-13 10:30:15+00:00', 'masked_author': 'username_2', 'text': ""@username_0  I'm working on the PanResponder API!"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'rachelnabors', 'comment_id': 598677122.0, 'datetime': '2020-03-13 11:29:39+00:00', 'masked_author': 'username_0', 'text': ""The following Components and APIs need new people to work on them! Please give them a good home!\r\n\r\n* VirtualizedList needs someone to check its API for updates\r\n* Layout Props and Linking both need someone to add examples and check their APIs for updates\r\n\r\nJust comment that you'd like to take them on!"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'danilobrinu', 'comment_id': 598700350.0, 'datetime': '2020-03-13 12:38:50+00:00', 'masked_author': 'username_27', 'text': '@username_0 can I take the `Linking` docs task ?', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'nnajiabraham', 'comment_id': 598805732.0, 'datetime': '2020-03-13 16:25:11+00:00', 'masked_author': 'username_15', 'text': ""@username_0 Working on AppRegistry and just created a PR for the docs update. For the examples, it won't be possible to create an example using SnackPlayer since Snack uses Expo and Expo abstracts that from the User. Is there any alternative to use for creating examples or should I forget about examples in that case???\r\n\r\nAlso, can I have the VirtualizedList API update, will work on it now?"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'espipj', 'comment_id': 598851689.0, 'datetime': '2020-03-13 18:14:05+00:00', 'masked_author': 'username_21', 'text': ""Hey! I'll be taking Layout Props ⏹️ @username_0"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'rachelnabors', 'comment_id': 598878579.0, 'datetime': '2020-03-13 19:27:30+00:00', 'masked_author': 'username_0', 'text': ""@username_15 Add some example code snippets using our usual code block notation then!\r\n\r\n@username_27 You're on Linking now!\r\n\r\n@username_21 You're on Layout Props\r\n\r\nThank you three very much for your trouble and toil!"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'nnajiabraham', 'comment_id': 598955684.0, 'datetime': '2020-03-13 22:25:36+00:00', 'masked_author': 'username_15', 'text': 'Hi, @username_0  all done with VirtualizedList API and AppRegistry example, PRs are #1742 and #1743 respectively. Let me know if anything needs changing 👍', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'danilobrinu', 'comment_id': 599086378.0, 'datetime': '2020-03-14 16:02:06+00:00', 'masked_author': 'username_27', 'text': ""Hi @username_0 I have a question. I get an error when I call to `Linking.sendIntent` -> `s.default.sendIntent is not a function`. I see the source and is part of the current API so I don't understand why I get that error :'(, can you help me with that ??"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'danilobrinu', 'comment_id': 599265285.0, 'datetime': '2020-03-15 21:11:45+00:00', 'masked_author': 'username_27', 'text': '@username_0 can you review this PR #1751 ?', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'rachelnabors', 'comment_id': 599484839.0, 'datetime': '2020-03-16 11:27:03+00:00', 'masked_author': 'username_0', 'text': ""@username_27 This question is better posited on your PR! Would you mind moving it there? (Also, double check you're using the most recent version of React Native!)"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'rachelnabors', 'comment_id': 599497601.0, 'datetime': '2020-03-16 12:00:56+00:00', 'masked_author': 'username_0', 'text': ""I've updated the matrix! Just four left to go!\r\n\r\n* `AppRegistry` and `Linking` are already in PR"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'danilobrinu', 'comment_id': 599528834.0, 'datetime': '2020-03-16 13:13:41+00:00', 'masked_author': 'username_27', 'text': '@username_0 I tested that code in Snack and I get that error.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'gedeagas', 'comment_id': 599570831.0, 'datetime': '2020-03-16 14:34:56+00:00', 'masked_author': 'username_28', 'text': 'hi @username_0, after searching the codebase I only found one deprecated prop. if anyone finds any changes please let me know and I will happily update the docs', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'rachelnabors', 'comment_id': 599599426.0, 'datetime': '2020-03-16 15:27:58+00:00', 'masked_author': 'username_0', 'text': 'Folks, it looks like [`Text.onlayout`](https://reactnative.dev/docs/text#ontextlayout) is still ""TODO."" Anyone want to patch it up?', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'nnajiabraham', 'comment_id': 599617150.0, 'datetime': '2020-03-16 15:59:33+00:00', 'masked_author': 'username_15', 'text': '@username_0 I could patch it up, what is needed for that??', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'rachelnabors', 'comment_id': 599801392.0, 'datetime': '2020-03-16 23:21:58+00:00', 'masked_author': 'username_0', 'text': 'Literally replace ""TODO"" with a proper description of what `onlayout` is and does!', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'DaniAkash', 'comment_id': 599805921.0, 'datetime': '2020-03-16 23:39:48+00:00', 'masked_author': 'username_2', 'text': '@username_0 Signing off PanResponder API as up-to-date in https://github.com/facebook/react-native-website/pull/1691\r\n\r\nWhich means we only have two more to go!\r\n\r\nAlso the PR for Transforms is at - https://github.com/facebook/react-native-website/pull/1613', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'rachelnabors', 'comment_id': 599811188.0, 'datetime': '2020-03-17 00:00:53+00:00', 'masked_author': 'username_0', 'text': 'We are one PR away from being done! Dear contributors, I must ask, what is your favorite format for swag? For me, I love stickers. I put them on my laptop. But some prefer buttons you can wear with pride. What about you?', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'DaniAkash', 'comment_id': 599824640.0, 'datetime': '2020-03-17 00:58:49+00:00', 'masked_author': 'username_2', 'text': 'Gosh, I love buttons! ✨', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'gedeagas', 'comment_id': 599874561.0, 'datetime': '2020-03-17 04:43:27+00:00', 'masked_author': 'username_28', 'text': ""@username_0 I prefer stickers ❤️, because of recent cancelation of f8 2020 I can't get sticker packs to share with my local Facebook developer circles anymore 😥. But any swag is welcome 😄."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'mohamedsgap', 'comment_id': 599880057.0, 'datetime': '2020-03-17 05:06:11+00:00', 'masked_author': 'username_23', 'text': '@username_0, I love stickers too :heart:.They enables me to show how much I admire what I put on my laptop :hugs:', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'Naturalclar', 'comment_id': 600194735.0, 'datetime': '2020-03-17 17:18:13+00:00', 'masked_author': 'username_29', 'text': 'I love stickers ❤️', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'nnajiabraham', 'comment_id': 600199386.0, 'datetime': '2020-03-17 17:27:34+00:00', 'masked_author': 'username_15', 'text': ""@username_0 I've got the PR up for the Text.onTextLayout #1757  let me know if any other thing needed 🙌 \r\nAlso, discovered my info on the Docs Drive Leaderboard is missing and having some nulls 🤣 to help, here are the PRs I had if you'd want to update the LeaderBoard, Thank You 🙌 ... \r\n#1606 #1743 #1742 #1740 #1632 #1757 \r\n\r\nFinally will love stickers or t-shirts ❤️ and if there are any other ways I could help contribute to this project or any other FB projects, will appreciate your guidance and opportunity on where to start"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'rachelnabors', 'comment_id': 600229181.0, 'datetime': '2020-03-17 18:28:08+00:00', 'masked_author': 'username_0', 'text': '🍾🎉🎈Thank you everyone! We are mission complete!🍾🎉🎈\r\n\r\nThank you all so much for your conributions! The new docs are being cut now, meaning all your contributions will be front and center, not hiding under **/next/**!\r\n\r\nIf you could be so kind to [give me a little info about yourselves in this form,](https://docs.google.com/forms/d/1h4evpvafv5WVfupr4zohoizZ1nVtk__8U8LH1odQFSI/) I can see about sending you any swag we might be able to acquire (might be awhile, given the current pandemic!)\r\n\r\n![mlp_party](https://user-images.githubusercontent.com/236306/76889154-00181380-687d-11ea-9073-f05165ccc0df.gif)', 'title': None, 'type': 'comment'}
 {'action': 'closed', 'author': 'rachelnabors', 'comment_id': None, 'datetime': '2020-03-17 18:28:09+00:00', 'masked_author': 'username_0', 'text': '', 'title': None, 'type': 'issue'}
 {'action': 'created', 'author': 'danilobrinu', 'comment_id': 600275635.0, 'datetime': '2020-03-17 20:15:05+00:00', 'masked_author': 'username_27', 'text': '@username_0 I love t-shirts and stickers ♥️.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'espipj', 'comment_id': 600362695.0, 'datetime': '2020-03-18 00:20:37+00:00', 'masked_author': 'username_21', 'text': 'Amazing effort by everyone! Thanks @username_0 for your patience and support with/to everyone! 🚀🦄', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'rachelnabors', 'comment_id': 614156520.0, 'datetime': '2020-04-15 16:54:55+00:00', 'masked_author': 'username_0', 'text': 'So, umm, the pandemic has made procuring and mailing swag more difficult than I had imagined! Eek! But we have not forgotten your contributions :) You can expect a shout out in an upcoming blog post!', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'mitulsavani', 'comment_id': 623811246.0, 'datetime': '2020-05-05 03:16:55+00:00', 'masked_author': 'username_4', 'text': 'Hi @username_0, could you please post the link of the blog post here for the reference when the team publishes it?', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'Naturalclar', 'comment_id': 710740649.0, 'datetime': '2020-10-17 03:44:45+00:00', 'masked_author': 'username_29', 'text': '@username_4 I believe this is the blogpost :) https://reactnative.dev/blog/2020/07/23/docs-update', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'luism3861', 'comment_id': 716099464.0, 'datetime': '2020-10-25 06:02:30+00:00', 'masked_author': 'username_24', 'text': 'hi @username_0  what happened if i have contributed in another issues i have to complete this form form for stickers or t shirt ?', 'title': None, 'type': 'comment'}]","<issue_start><issue_comment>Title: Component Docs Drive
username_0: ### Add missing example code

If there is no example code, add a new example using [function components](https://reactjs.org/docs/hooks-state.html#hooks-and-function-components) and [Hooks](https://reactjs.org/docs/hooks-intro.html). Embed your code with a Snack player like so:

```` 
```SnackPlayer name=Example%20Code

// Example code goes here

``` 
````

### Convert existing example code to use function components and Hooks

If there’s a class component example already, use this [handy guide on converting class components to function components and Hooks](https://scotch.io/bar-talk/convert-class-components-to-functional-components-in-a-react-project-solution-to-code-challenge-14) to make a function component example. Then use the following code snippet to keep both function and class component examples: 

````
```
<div class=""toggler"">
  <ul role=""tablist"" class=""toggle-syntax"">
    <li id=""functional"" class=""button-functional"" aria-selected=""false"" role=""tab"" tabindex=""0"" aria-controls=""functionaltab"" onclick=""displayTabs('syntax', 'functional')"">
      Function Component Example
    </li>
    <li id=""classical"" class=""button-classical"" aria-selected=""false"" role=""tab"" tabindex=""0"" aria-controls=""classicaltab"" onclick=""displayTabs('syntax', 'classical')"">
      Class Component Example
    </li>
  </ul>
</div>

<block class=""functional syntax"" />

```SnackPlayer name=Function%20Component%20Example

// Function Component Example goes here

```

<block class=""classical syntax"" />

```SnackPlayer name=Class%20Component%20Example

// Class Example goes here

```

<block class=""endBlock syntax"" />
```
````

If there isn’t a class component example or there was already a function component example, just use the following code to embed just a function component example.

### **Embed any example code with a Snack player**

````
```SnackPlayer name=Example%20Code

// Example code goes here

```
````

### Submit your PR!

Be sure to tag it with this issue so it gets properly recognized.

## Components and APIs update progress

|	|API up to date?	|Has example?	|Example uses Snack?	|Example uses function components and Hooks?	|
|---	|---	|---	|---	|---	|
|**Components**	|	|	|	|	|
|ActivityIndicator	| :heavy_check_mark:	| :heavy_check_mark:	| :heavy_check_mark:	| 🙁 	|
|Button	|:heavy_check_mark:	|:heavy_check_mark:	|:heavy_check_mark:	|🙁	|
|DatePickerIOS	|:heavy_check_mark:	|:heavy_check_mark:	|🙁	|🙁	|
|DrawerLayoutAndroid	|🙁	|:heavy_check_mark:	|🙁	|🙁	|
|FlatList	|:heavy_check_mark:	|:heavy_check_mark:	|:heavy_check_mark:	|🙁	|
|Image	|🙁	|:heavy_check_mark:	|:heavy_check_mark:	|🙁	|
|ImageBackground	|:heavy_check_mark:	|:heavy_check_mark:	|🙁	|🙁	|
|InputAccessoryView	|:heavy_check_mark:	|:heavy_check_mark:	|:heavy_check_mark:	|🙁	|
|KeyboardAvoidingView	|:heavy_check_mark:	|:heavy_check_mark:	|🙁	|🙁	|
|Modal	|🙁	|:heavy_check_mark:	|🙁	|🙁	|
[Truncated]
|Easing	|:heavy_check_mark:	|🙁	|🙁	|🙁	|
|Image Style Props	|🙁	|🙁	|🙁	|🙁	|
|InteractionManager	|:heavy_check_mark:	|:heavy_check_mark:	|🙁	|🙁	|
|Keyboard	|🙁	|:heavy_check_mark:	|🙁	|🙁	|
|Layout Props	|🙁	|🙁	|🙁	|🙁	|
|LayoutAnimation	|:heavy_check_mark:	|:heavy_check_mark:	|🙁	|🙁	|
|Linking	|🙁	|:heavy_check_mark:	|🙁	|🙁	|
|PanResponder	|🙁	|:heavy_check_mark:	|🙁	|:heavy_check_mark:	|
|PermissionsAndroid	|:heavy_check_mark:	|:heavy_check_mark:	|🙁	|:heavy_check_mark:	|
|PixelRatio	|:heavy_check_mark:	|:heavy_check_mark:	|🙁	|:heavy_check_mark:	|
|Settings	|:heavy_check_mark:	|🙁	|🙁	|🙁	|
|Shadow Props	|:heavy_check_mark:	|🙁	|🙁	|🙁	|
|Share	|:heavy_check_mark:	|🙁	|🙁	|🙁	|
|StyleSheet	|🙁	|:heavy_check_mark:	|🙁	|:heavy_check_mark:	|
|Systrace	|:heavy_check_mark:	|🙁	|🙁	|🙁	|
|Text Style Props	|:heavy_check_mark:	|🙁	|🙁	|🙁	|
|ToastAndroid	|:heavy_check_mark:	|:heavy_check_mark:	|🙁	|:heavy_check_mark:	|
|Transforms	|:heavy_check_mark:	|🙁	|🙁	|🙁	|
|Vibration	|:heavy_check_mark:	|:heavy_check_mark:	|🙁	|:heavy_check_mark:	|
|View Style Props	|🙁	|🙁	|🙁	|🙁	|
<issue_comment>username_1: One question, sorry for my naivety, if I am converting a class example into functional example (just converting the snack from class to function) do I keep both the snacks? Also, do I explicitly mention `<block class=""functional syntax"" />` in each snack?
<issue_comment>username_0: It's probably best for you to copy the code block under ""Convert existing example code to use function components and Hooks,"" then replace `// Class Example goes here` with the former, class-based example. Then replace `// Function Example goes here` with a function/Hooks example.

Please correct me if I misunderstood your question!
<issue_comment>username_1: Thank you so much. I understood the point of the whole code block. I should have read the class name on the top that says `toggler`. 😅
<issue_comment>username_0: @username_1 Did you follow steps 3 and 4, too? ;)
<issue_comment>username_2: @username_0 Just created a PR for the DatePickerIOS 🗓. I basically rewrote the existing class component into a functional component with hooks. But It clearly has a lot of props, does the Snack have to cover all the props or basic functionality is enough?
<issue_comment>username_0: You know, DatePickerIOS is actually in the process of being _deprecated!_ It sneaked into the table somehow (tsk tsk!). I just removed it. I'm accepting your PR regardless, but go pour your energy into another component who will be sticking around!
<issue_comment>username_1: @username_0 do you have copy-paste version of the matrix table? Also should quote the matrix here or in the PR?
<issue_comment>username_2: It did well for a test subject 😜 will pick up something more vital next...
<issue_comment>username_0: @username_1, are you not able to edit the original post? I tried to put checkboxes in there but couldn't make them work inside tables! Thanks for bearing with me!
<issue_comment>username_1: Nope. Can't edit your original post here. No worries.
<issue_comment>username_0: Hmm. Gonna have to think of a way for people to claim each task..
<issue_comment>username_1: Can we do this in a gist and link it here? Just a suggestion 🤷‍♂️
<issue_comment>username_0: I added checkboxes :) Just tick one for each task you claim. I'll update them to bold checks when the PRs are merged!
<issue_comment>username_3: I’d like to claim the `Animated` API up-to-date; how do I check off one of those boxes? Maybe it just doesn’t work since I’m on mobile
<issue_comment>username_2: I'd like to pick this one up too. Given the size of the API, can we share this between us?
<issue_comment>username_0: Why don't you both split the load? I'll put your names down for the different tasks (since the checkboxes aren't working!). How do you want to split it?
<issue_comment>username_4: Hi there, I would like claim for View Style Prop.
<issue_comment>username_3: @username_0 I could document the API for `Animated.Value`/`Animated.ValueXY`, and leave the rest of `Animated` to @username_2
<issue_comment>username_0: @username_4 You got it! Don't forget to reference this issue in your PR!
<issue_comment>username_5: @username_0 feel free to assign `<SectionList />` to me!
<issue_comment>username_6: @username_0 I'll take the <ImageBackground /> :)
<issue_comment>username_7: @username_0 I'll take `TouchableHighlight` :)
<issue_comment>username_8: @username_0 here goes my first PR, https://github.com/facebook/react-native-website/pull/1590
<issue_comment>username_9: @username_0 Can I take `Modal`? Thank you :heart:
<issue_comment>username_8: @username_0 I can take `Image Style Props`  ? Thanks 👍
<issue_comment>username_10: @username_0 Can I take `Switch`? Thanks!
<issue_comment>username_7: @username_0 I'll take `Button` next :)
<issue_comment>username_1: @username_0 I'll work on `View` to add snack and functional component example.
<issue_comment>username_0: Thanks for volunteering, everyone! I've updated the matrix with all your commitments. For anyone who hasn't got a component or API to work on, we still have plenty left! Jump on in!
<issue_comment>username_10: @username_0 I did also a small adjustment in `Picker` component example. :grin:
<issue_comment>username_2: @username_3 cool I'm up for the task ✌️
<issue_comment>username_11: @username_0 

Hello! I am super interested and making this contribution.
As I understand it, is it necessary to make an example with hooks and classes referring to the API?

Example: Let's go up and get the Pixel Ratio
Do I have to do the example in the snack using Classes and hooks? Right?

If not, please let me know!

I'm waiting!
<issue_comment>username_2: @username_0 Just pushed out an example for the Alert component. Clipboard, Dimensions, Keyboard & LayoutAnimations are next! 

Also will be picking up the Animated API which will be quite a challenging task! 😁
<issue_comment>username_2: I'm unable to get the `Clipboard` working on the Expo web player. Could use some help with https://github.com/facebook/react-native-website/pull/1599
<issue_comment>username_12: Hello 
FOA navigating the **table** is quite _tedious_, can you please make it a little bit easier.
I would like to work on the `Keyboard`.
<issue_comment>username_2: @username_12 I'll be leaving the `Keyboard` in your care 👍 Picking up `LayoutAnimations` next!
<issue_comment>username_2: @username_0 it'd be great if you can create a PR column to the Components and APIs update progress table and list the PRs raised related to the component. It'll greatly help the PRs to be peer-reviewed and tracked neatly ✏️
<issue_comment>username_8: @username_0 Can I take `VirtualizedList` ?
<issue_comment>username_13: @username_0, I took the clipboard API.
<issue_comment>username_2: @username_13 There's already a PR open for this API - https://github.com/facebook/react-native-website/pull/1599
<issue_comment>username_13: Sorry @username_2, I've missed that
<issue_comment>username_2: @username_13 I can use your help in it 👍 it is WIP
<issue_comment>username_14: @username_0 feel free to assign LayoutAnimation Snack example to me!
<issue_comment>username_2: @username_14 I'm almost done with the LayoutAnimation. Will be sending a PR soon.
<issue_comment>username_15: Hi @username_0 can I get the KeyboardAvoidingView. I will be working on _Example uses Snack_ and _Example uses function components and Hooks for that componenet_
<issue_comment>username_16: Hi @username_0, I will be taking the Text and working on Example uses function components and Hooks.
<issue_comment>username_15: @username_8 Are you working on the VirtualizedList precisely on `Example uses Snack and `Example uses function components and Hooks` for that component, if not can I take it from you?
<issue_comment>username_8: ok, it is fine.
<issue_comment>username_15: Ok then @username_0  I'll be taking VirtualizedList from @username_8 precisely on `Example uses Snack` and `Example uses function components and Hooks`
<issue_comment>username_8: @username_15 I mentioned you in this PR https://github.com/facebook/react-native-website/pull/1607
<issue_comment>username_2: @username_0 Summary of my PRs
LayoutAnimation - https://github.com/facebook/react-native-website/pull/1609 [WIP]
Clipboard - https://github.com/facebook/react-native-website/pull/1599 [WIP]
DatePickerIOS - https://github.com/facebook/react-native-website/pull/1583
Dimensions - https://github.com/facebook/react-native-website/pull/1601
Alert - https://github.com/facebook/react-native-website/pull/1597

It'd be helpful if you can add these to the Components and APIs update progress. Also, I'll be picking up `Animated` library next @username_3 look forward to my PR soon 👍
<issue_comment>username_17: @username_0 I would like to take on Layout Props api to update.  Thank you.
<issue_comment>username_0: You only need to make examples with function components and Hooks. If there is ALREADY an example with class components, then use the toggler code to show both examples together :) You should only make new examples with function components/hooks
<issue_comment>username_0: Folks, I have updated the matrix to reflect the projects you've claimed! Phew! Time to review some of your pull requests! Thanks so much for contributing, and if you haven't contributed yet, just claim a component here!
<issue_comment>username_18: I'll take the Linking
<issue_comment>username_19: I was reviewing today a few PRs related to this issue and I would like to summarize some tips according to code quality and best practices of those new examples. 

There are minor things but overall this code could be used by many developers and mistakes or negligence here could be replicated further. There is no bad intent I just assume that we all want to have the best examples here 😉 

Please pay a bit attention for those details if possible:
* work on master docs (`docs/*.md`) not versioned ones (`website/versioned_docs/version-0.*/*.md`)
* extract styles to `StyleSheet` outside of component if necessary
* use arrow function instead of `function` keyword
* sort `imports` alphabetically
* remember about semicolons (especially after `export`s)
* use same quotation marks across whole example (I don't know which are prefered here `""` or `'` but be consistent)
* remember about specifying `supportedPlatforms` for the Snack if component requires that (example: c7c7929dfa0c20af5bf953c45708ce21ca0019f8)
* brake lines even more often than in your IDE - Snack code block fits only `66` characters per line
* do not overcomplicate Snack names

That's all from me. Thank you all for your contributions. Keep up the good work!
<issue_comment>username_18: @username_19 

I agree with you, however I have some points in which I wanted us to reflect.

We are using SnackPlayer to generate the example together with the Expo.

Strengths:

Code editor
Demo for three versions, web / ios and android

Negative points:

Project structure using the docusaurus, leaves devs a little limited, since these are markdown files, the examples in react within it are without the sixtaxe highlight.

Perhaps there is some configuration in which we can make the prettier to solve this.
In js and html files I already made certain settings for this.
However, we got to the point of using markdown syntax together with React (SnackPlayer).

What I thought, was maybe to rethink the architecture of the project maybe using gatsbyjs, in which we have integrations with github pages, among other points.

Searching here I saw that this subject was addressed in another post as well and that this is not currently in our plans.
But I think the debate is also worth it, right?
<issue_comment>username_20: I will work on refactoring `AccessibilityInfo` example into a function component with Hooks
<issue_comment>username_19: @username_18 I agree that developing examples could be a bit more difficult due to fact that code is embedded in Markdown. Having examples in separate JS files would be nice (for example we can setup linter than etc.) but changing project architecture and converting all docs could be a challenging and daunting process. I don't even know if it's possible within Docusaurus. Also switch to Gatsby is not likely since Docusaurus is a Facebook product and Gatsby is not (also purpose of those platforms is bit different).

Many code editors/IDEs this days can highlight JS code properly inside other type files ([screenshot](https://user-images.githubusercontent.com/719641/74085408-fd095680-4a78-11ea-91a5-5e607acfdb6e.png)). Running website on localhost and developing with live preview also helps a lot.

But back to main topic. Since `Clipboard` API is being deprecated (#1608) I would like to propose removal of this API from the TODO list. I'm sorry for that to the #1599 and #1604 authors.

It's also a good opportunity to start conversation about removing ALL existing examples from the deprecated components (leaving short description and reference only) before next major release. This whole idea started here https://github.com/facebook/react-native-website/pull/1583#issuecomment-583345444. 

Few pages in the `master` docs right now follow this pattern (ImageEditor, PickerIOS, Slider) but most of deprecated pages include examples. In my opinion removing those examples can force (mainy new) users to follow deprecation notice and use the proper maintained and up to date package which always contains an example or a few of them in the README.
<issue_comment>username_21: Hey @username_0 ! I'll be making some changes in the TextInput API docs 😄
<issue_comment>username_2: While testing out the Animated API, I had to write some transforms and realized I might as well use them as an example for the Transforms API. However, as per https://github.com/facebook/react-native/issues/27649, the skew transform isn't working on Android.
## Skew on iOS: 
<img width=""224"" alt=""Screenshot 2020-02-09 at 7 13 07 AM"" src=""https://user-images.githubusercontent.com/6841445/74094922-e6154380-4b0e-11ea-9469-729736570b06.png"">
## Skew on Android:
<img width=""218"" alt=""Screenshot 2020-02-09 at 7 12 29 AM"" src=""https://user-images.githubusercontent.com/6841445/74094930-06450280-4b0f-11ea-9912-ce5dfbd256d2.png"">
<issue_comment>username_22: Hello guys,
I've an issue and need you help. when I make a change to the docs. it does not render although I'm using the latest version as the documentation says `Changes to /docs will only be visible in the latest version of the documentation (master).
`.
to solve this. I have to run `yarn run version 0.62`. but is that's ok?
I mean what if I want to push changes. should I push the docs changes only?
<issue_comment>username_2: @username_22 the changes are in the master documentation. 

To open master documentation: 
you can directly click on the version number next to the ""React Native"" title icon of the page and see the list of all versions including the master documentation. You can view your changes in this section. No need to run version 0.62 command
<img width=""269"" alt=""Screenshot 2020-02-10 at 12 20 45 PM"" src=""https://user-images.githubusercontent.com/6841445/74127251-1be62500-4c00-11ea-85c3-0dd6268f21dc.png"">
<issue_comment>username_0: I've updated the matrix with new contributors and some new protips to help folks contributing their code (thanks, @username_19!) Please check them out under ""Submit your PR!"" and ""Code Tips""! Thanks again to everyone for contributing!
<issue_comment>username_11: How do I stop checking the lib that I'm going to do the example?
<issue_comment>username_11: @username_0 
I will make the contribution with the Image and FlatList component
<issue_comment>username_2: @username_0 add me to the Transforms API, I have already raised a PR https://github.com/facebook/react-native-website/pull/1613
<issue_comment>username_22: Hello Guys, I added Keyboard API example using function components & hooks #1619
<issue_comment>username_23: Can't find TabBarIOS in [react-native/Libraries](https://github.com/facebook/react-native/tree/9caf99162dcd1ee73c571c494ca3115540f45f69/Libraries/Components) to start update its API
<issue_comment>username_18: @username_19 e @username_0 

I understand your point and agree that we should have a scenario where editing the javascript files is a little easier.

I was analyzing some PRs here and I miss some standards, like 2 tabs, single quotes among other points, in which I believe we can define this here as a team, what do you say?

On the points that you raised from discontinuation I really totally agree.
<issue_comment>username_18: Hi guys, can someone review this for me?

@username_19 @username_0 
# 1626
<issue_comment>username_16: @username_0 I can also change ""Image"" and ""AppState"" examples to use functional components and hooks.
<issue_comment>username_24: @username_0  this is my 2 pr's #1627  #1617
<issue_comment>username_24: @username_0  #1617  #1627  !!
<issue_comment>username_2: I'm struggling to get the RNTester app running in my machine. Anyone else facing issue with this app?
<issue_comment>username_0: Hi everyone, sorry for the absence. Got sick again!

Matrix is updated!
<issue_comment>username_0: @username_18 We have a discord we could use to coordinate, but then we'd have to track in two locations, which historically can be even more confusing! If you want to team up with someone, I suggest you reach out to them personally and choose the format of your choice to coordinate :) Could you expand on ""do you think we can have some language context? Mainly in the context for examples.""?
<issue_comment>username_4: Hi @username_0, I see that you recently updated the metrics and tick marked `View Style Props`  referenced #1614 on it. I am not sure if that was a typo if so then, my PR is #1612 FYI. 

I wonder if there is anything else that I need to finish for `View Style Props`? If not then, I can start working on other pending work
<issue_comment>username_18: @username_0 Hello, I believe that a faster communication channel could speed up some points, such as clearing doubts, which we can remove / discontinue.

Especially between some points of decisions and this done we can make official here.

About languages, I was seeing react.org and this is already done there.

This is a point if we have a group on Slack or anywhere else that we will have a more fluid communication.

We can discuss tools or other things like that and I try to have a better agility to give things a better flow.

What do you say?
<issue_comment>username_1: Hi @username_0, I will update the `Share` API by adding functional and hooks example since it already has the class component example.
<issue_comment>username_19: @username_0 Could you asses the idea proposed in https://github.com/facebook/react-native-website/issues/1579#issuecomment-583735028?
<issue_comment>username_2: While it is a good idea to remove the options from the sidebar, I still feel removing the examples would be bit harsh for people who are already heavily using these components...
<issue_comment>username_0: @simek I can confirm that deprecated components will be removed from the sidebar but their legacy pages will live on quietly—there is no harm in finishing up the examples! I hope this settles things.

@username_1 you're on Share, thanks!

@username_18 Will need to hear more support from other people for your idea—worry another communication channel now would slow down and split communications rather than keeping us moving in one direction with one source of truth—this location. Feel free to coordinate privately on individual collaborations, naturally.

@username_4 I'll correct the issue post haste.

Next up: I'll be removing pieces of the matrix that have been completed to make it easier to see what's left to do. Thanks, everyone, for your hard work so far!
<issue_comment>username_19: @username_0 Are there any planned changes for the [Components and APIs](https://facebook.github.io/react-native/docs/next/components-and-apis) page? Would you like to mark in some way or even remove deprecated pages listed in there?
<issue_comment>username_0: @username_19 Smart thinking! And to think I've been looking at this page the whole week without realizing it! What a cold! Good thing you're on the ball!

We should remove the deprecated components and APIs from the page as we are removing them from the sidebar as well. Would you like to handle that one?
<issue_comment>username_18: @username_0 @username_19 

I created a channel for quick communication and central points of doubts here. 

[link to slack](https://join.slack.com/t/react-native-website/shared_invite/enQtOTU5NzkzMjA1MzE3LTEzNjBhYTdlNGVlZGEzNTEzZTlkNTliMTBjOTZlN2RiOWQ3MjMyMzjMjMj)

However I agree that here we must have the data and everything that was talked about there registered here.

What do you say?

Because I think so, I am feeling our agility / decision making is very slow.

There are points of doubt about how we should do it and even points of discussion with better fluidity.

We currently have many PRs stopped a lot of them for many days. Among other points where we can try to start reviewing this.
<issue_comment>username_19: @username_0 I think that ""API"" link in top bar which leads to `ActivityIndicator` instead of  `Components and APIs` in `next` docs do not help either 😉 

Back to the deprecation discussion - I would like to help with those changes but I'm still not 100% sure how to perform them. 

In my opinion, in some point in time `0.61` docs should be regenerated to include all the work from this issue and more changes that landed on the `next` docs during last months (I assume this should happen before or on `0.62` release?). 

Merging sidebar and `Components and APIs` deprecation cleanup PRs before refreshing `0.61` will cause a loss of some improvements (mainly deprecation indicators and notes because they are currently only on the `next` docs and are targeted to be deleted before/on `0.62` release). That is also the reason why I was talking about generating `0.62` docs when you asked about sidebar changes in earlier discussion.
<issue_comment>username_19: @username_18 I think that Slack/Teams/Discord channel will help with communication but you should remember that this is still a Facebook repo which is not officially maintained by the community. 

In my opinion creating this kind of communication platform should be approved and managed by FB employees (maintainers). If your idea got a green light of course I will join along.
<issue_comment>username_4: I definitely agree with @username_19 opinion,  @username_18 I recommend you to open an issue on core react native repo to discuss further about it.
<issue_comment>username_18: And if this suggestion is a bad point I would like to understand how we can resolve the points below:

- Long standing PRs
- Doubts of those who want to help and have a quick flow of responses
- Discussions on topics that we can make obsolete or not
<issue_comment>username_18: I would like to help with this too
<issue_comment>username_25: Hi @username_0 I was looking at the missing components and I saw that TabBarIOS & TabBarIOS.item were deprecated on RN 0.5959 here's the [CHANGELOG](https://github.com/react-native-community/releases/blob/master/CHANGELOG.md#059) they don't appear on the docs for version 0.59 but they re appeared on version 60 and 61.
<issue_comment>username_0: @username_25 Thank you for hunting that one down! I wish we could go back and remove it from all the following versions of the docs now. I'll remove it from the matrix. Much obliged!
<issue_comment>username_0: I've updated the matrix and moved all the completed components and APIs to a leaderboard to recognize their contributors. Thank you everyone! There's still lots to do: those APIs need love, too!
<issue_comment>username_15: Hi @username_0, please can you assign me for all fields on AppRegistry, will update API and write examples 🙌🙌
<issue_comment>username_10: @username_0 I'll take `Shadow Props` and `Text Style Props` :wink:
<issue_comment>username_22: @username_0 update my username in the matrix from (Keyboard) username_12 -> @username_22 
and I need someone to review my PR #1619, thanks.
<issue_comment>username_21: Appreciate the gifs lol 🦄
<issue_comment>username_21: Appreciate the gifs lol 🦄 @username_0
<issue_comment>username_11: @username_0 What do I need to do to finish my contribution with FlatList and if it is possible to update another API or Component?
<issue_comment>username_0: Matrix is updated! Thanks everyone!

@username_11 just pick another one and get to it! Flatlist is in the queue. There area lot of PRs to merge. Thank you for your patience!
<issue_comment>username_19: @username_0 Can you claryfiy how you would like to perform  changes to deprecated components mentioned in https://github.com/facebook/react-native-website/issues/1579#issuecomment-588361038? I have created an explanation why I'm not sure how to do this properly here: https://github.com/facebook/react-native-website/issues/1579#issuecomment-588812978. If my explanation is still foggy or confusing instead of clarifying I can try explain it again in different words.
<issue_comment>username_0: @simek Changes to versioned docs have to happen in */website/versioned_docs/<version number>/*. Add the <file>.md with the content you want to edit for that version. More information on how to do that is here: https://docusaurus.io/docs/en/next/versioning 

Are you on Discord or Twitter? Perhaps there or in a new issue would be the best place to coordinate, as this channel is for people updating the docs and we could confuse them with conversation about versioning files :)
<issue_comment>username_19: @username_0 Sorry for bringing up this topic here. I have some basic knowledge about versioning in Docasurus but in my opinion the right process depends on final effect you want to archive. We can continue discussion on the Discord, since I'm not a frequent user of my Twitter. My Discord handle is `username_19#2069`.
<issue_comment>username_26: Hi @username_0, I Want to contribute React Native!
please can you assign me for TouchableWithoutFeedback: Modify the example to use snacks.
<issue_comment>username_16: @username_0 I've just checked and the following component examples are already using functional components and hooks so no further action is required.

- InputAccessoryView
- RefreshControl
- SafeAreaView
- ScrollView
<issue_comment>username_16: @username_0 I've also checked that almost all of the remaining APIs don't need any work for ""Examples uses functional components and hooks"". So these can be marked as Done or NA.
<issue_comment>username_0: @username_26 You're on it!

@username_16 Thanks for checking on all those! I've removed those four components from the matrix. I'm happy to tick off the APIs—but could you be more specific than ""almost all?"" Who's missing yet?
<issue_comment>username_22: Hello guys, I'm working on the Keyboard API, I added hooks example and snacks, but how to check if the `API is up to date`? #1619
<issue_comment>username_16: @username_0 following APIs don't need anything for ""Examples uses functional components and hooks"":  ActionSheetIOS, Easing, InteractionManager, Settings, Systrace.
I am not too sure about BackHandler API, so you may want to check this.
<issue_comment>username_0: @username_16 Hmm, they may have function components in their example code, but they still need big example Snacks that use them as well. So they stay up!
<issue_comment>username_11: @username_0 So I just have to wait for PR? Can I contribute with another API if I have it available?
<issue_comment>username_5: Will get to SectionList this weekend
<issue_comment>username_0: @username_11 You sure can :) Don't wait on my PRs. Sometimes there's feedback, but it's rare that that should stop you from tackling a new task!

@username_5 Oh thank you so much!
<issue_comment>username_0: *Folks!* We're hoping to cut the next branch of the docs in a few weeks. Your contributions are making this a great new edition of the React Native docs! Thank you so much for your hard individual efforts, from the tiniest example update to whole new pages! 

If you have the bandwidth, taking on those APIs are going to help push us over the edge to completeness. If you've updated a component already, I know you have what it takes to tackle and API. Hit me up here, on Twitter, or Discord if you run into any trouble! 

Let's do this!
![shera_BAM](https://user-images.githubusercontent.com/236306/75556115-7de2bf00-5a35-11ea-9ac1-f6dbc6f3ce20.gif)
<issue_comment>username_0: Oh snap! We are so close to finishing _all the Core Components!_

* @username_26, we're counting on you for `TouchableWithoutFeedback`
* @username_8, can you check `VirtualizedList` to see if it's API is up to date?
* _We need a volunteer for `DrawerLayoutAndroid`!_ Any takers?
<issue_comment>username_21: If not worked/assigned yet I could take DrawerLayoutAndroid @username_0
<issue_comment>username_22: @username_0 Hello Rachel, I've updated the keyboard API and now I think it's done, check the changes. :) #1619
<issue_comment>username_0: @username_21 It's all yours! 

Matrix is updated!
<issue_comment>username_18: @username_0 and @username_19 

How do i find you on discord?
<issue_comment>username_23: Hey @username_0 I gonna check if the 'AppState' API is up to date or not! and I gonna update it if it needs.
<issue_comment>username_0: @username_18 I'm 'R ""Nearest"" Nabors#7453' on Discord

@username_23 THANK YOU! Please report back here if it needed updating or not so I can update the matrix!
<issue_comment>username_2: @username_0 Just added examples for Animated & PanResponder. If there are any specific animations you think I need to cover, let me know 😁
<issue_comment>username_23: Hey @username_0 I've just checked the core code of 'AppState' and I think it's up to date but there is an event in core code called 'memoryWarning' didn't mention in the events' reference in the doc, do you need me to fill a PR for it? I'm ready ;)
<issue_comment>username_0: Yes please, @username_23! That would be an API in need of updating! Please PR <3
<issue_comment>username_0: @username_21, @username_5, @username_8: How are your components doing? We are waiting on your three components to close out the updated components docs! We're so close! Don't stop now!

Everyone else: the matrix is up to date. We've still got some APIs in need of examples and updates! If you have the time to commit to working on one, it really helps the docs!
<issue_comment>username_27: @username_0 how I can help ?
<issue_comment>username_23: Hi @username_0, very excited to contribute more, so I gonna add an example uses Snack for 'Vibration' API, stay tuned for the PR ;)
<issue_comment>username_19: @username_23 `Vibration` API has been updated in 5fcd97d80e58cfadc81ff0bdc67b3c53fe177e61.
<issue_comment>username_0: @username_23 Actually, the example is still in class components. If you could add a function component exampe and a class/function component toggler I can remove it from the matrix! Won't you please? I'd have less to worry about!
<issue_comment>username_0: @username_27 Good to hear your enthusiasm! Read that post up top and claim an API to update down here!
<issue_comment>username_27: @username_0 I want to take the Settings :)
<issue_comment>username_19: @username_27 I have PR in stash for the `Settings` but there is an issue with API that need to be resolved first: facebook/react-native#28213
<issue_comment>username_27: @username_19 ohh Ok
<issue_comment>username_0: I updated the matrix to show that!
<issue_comment>username_23: Okay @username_0 I will update the entire 'Vibration' API, then I gonna create PR for it asap :)
<issue_comment>username_0: We still have three APIs in need of owners!

* [PermissionsAndroid](https://reactnative.dev/docs/permissionsandroid) and [InteractionManager](https://reactnative.dev/docs/interactionmanager) need their examples wrapped in a Snack player

* [Systrace](https://reactnative.dev/docs/systrace) needs an example
<issue_comment>username_0: You've done a great job so far! The docs are rocking for all your help! I could not be prouder!
<issue_comment>username_27: @username_0 can you give one of those :D ? I'm open to help
<issue_comment>username_0: Sure, @username_27! I give you `InteractionManager`!
<issue_comment>username_27: @username_0 thanks :)
<issue_comment>username_22: @username_0  Does the Keyboard component need extra work? my PR is merged.
<issue_comment>username_0: @username_22 You did contribute an example! But did you also check to see if the API needed updating?
<issue_comment>username_27: @username_0 I run the `yarn start` command but I don't see my changes in the page. I see the page is refreshed everytime I do some change but I don't see my changes.  How should works ?
<issue_comment>username_22: my last commit was about updating the API. https://github.com/facebook/react-native-website/pull/1619/commits/27ec6e8df4d0dc0e1969d90f61d9e4ff6e37542b
<issue_comment>username_23: @username_27 Hi Danilo, to see your changes on Docs you should, put 'next/yourComponentName' in the URL, to learn more please, take a look at contribution guides.

@username_22 Hey Ahmed, Make sure that you check the core code of 'Keyboard' API component, if there any change in the core code, you need to mention it in doc as an API reference.
<issue_comment>username_27: @username_23 thanks
<issue_comment>username_22: @username_23 I did if I'm not mistaken. this the new function I added to the docs:
```jsx
static scheduleLayoutAnimation(event)
```

Useful for syncing TextInput (or other keyboard accessory view) size of position changes with keyboard movements.
<issue_comment>username_23: @username_22 If you already mentioned it in the doc as an API reference, that’s good and tell Rachel to update the matrix, if not please update it, and if u need any help, just ping me ✌️🙂
<issue_comment>username_0: @username_27 are you looking at http://localhost:3000/react-native/docs/next/YOURPAGE ?

@username_22 Then you're good to go! I'll remove it from the matrix! Thank you!
<issue_comment>username_27: @username_0 yes, is my bad (typo mistake) hehehe sorry.
<issue_comment>username_28: Can i take `PermissionsAndroid` @username_0
<issue_comment>username_0: @username_28 Sure thing! It's a little weird to use with Expo (see also the bit on the page about using it with Expo!). Here's a sample example from @brentvatne: https://snack.expo.io/rJZTlmgrI
<issue_comment>username_0: @username_28 re: #1705, are there anymore updates that the API needs? Can I remove it from the list of work that needs doing?
<issue_comment>username_27: @username_0 can you review my PR #1712, I think is done but I prefer your feedback :)
<issue_comment>username_0: @username_27 just a few more edits! Please check your PR for more info <3
<issue_comment>username_28: @username_0 thank you for merging the pr, there is no more update that the Flatlist API needs.
 
And also about the `PermissionsAndroid`, as you say because snack use expo under the hood It's a little weird to use and I notice that while the popup for `requestCameraPermission` does come up the `title`, `message`, and `button` don't. Is that okay?
<issue_comment>username_5: @username_28 @username_0 please take section list from me if you would like another one.
<issue_comment>username_28: Thanks @username_5, i think i will take over `section list` first until i have clarification about `PermissionsAndroid`.
<issue_comment>username_0: @username_28 It's ok. It is better than no example :) Moving you on to `SectionList` as well
<issue_comment>username_28: Got it thanks @username_0.
<issue_comment>username_28: @username_0 #1717 and #1720 should be ready for review ❤️
<issue_comment>username_23: So proud to see the huge progress that all the contributors are made so far, all the components and APIs are already assigned except `systrace` API, I tried to look for the core code of it to figure out it built under the hood but I couldn't find it in the 'react-native' repo, so please if anyone has an idea how to start with `systrace`. I'll be so greatful. @username_0
<issue_comment>username_29: @username_23 
File for `systrace` api in the react-native repo seems to exist here 
https://github.com/facebook/react-native/blob/master/Libraries/Performance/Systrace.js
I haven't read the code much yet for me to help out, but should be a good starting point :+1:
<issue_comment>username_0: Wow, we're down to 7 docs left to write! If the owners haven't spoken for them by the end of tomorrow, I'll be releasing them back into the pool for more active members to pick up. Things happen! We'll carry the torch!

@username_23 Shall I sign you up for `systrace`? The last kitten in the box, I'm sure it would be happy to find a home with you!

@username_28 Does `sectionList` still need its API updated? Let me know! Hope we can take it off the list <3
<issue_comment>username_15: @username_0 still working on AppRegistry, just got sidetracked with other stuffs
<issue_comment>username_2: @username_0 Transforms PR is merged. The API can be marked closed...
<issue_comment>username_23: Okay @username_0  I gonna work on `systrace`, I hope ship it asap ;)
<issue_comment>username_0: Folks: in less than 12 hours I will be releasing any docs in the matrix whose people haven't checked in:

SectionList | @username_28
VirtualizedList | @username_8 
Layout Props | @username_17 
Linking | @username_18
PanResponder | @username_2 

There's a lot going on and we're really close. If you're still in or if you need to bow out, please just let me know!
<issue_comment>username_28: @username_0 still searching the `SectionList` codebase for any changes. will update here ASAP.
<issue_comment>username_2: @username_0  I'm working on the PanResponder API!
<issue_comment>username_0: The following Components and APIs need new people to work on them! Please give them a good home!

* VirtualizedList needs someone to check its API for updates
* Layout Props and Linking both need someone to add examples and check their APIs for updates

Just comment that you'd like to take them on!
<issue_comment>username_27: @username_0 can I take the `Linking` docs task ?
<issue_comment>username_15: @username_0 Working on AppRegistry and just created a PR for the docs update. For the examples, it won't be possible to create an example using SnackPlayer since Snack uses Expo and Expo abstracts that from the User. Is there any alternative to use for creating examples or should I forget about examples in that case???

Also, can I have the VirtualizedList API update, will work on it now?
<issue_comment>username_21: Hey! I'll be taking Layout Props ⏹️ @username_0
<issue_comment>username_0: @username_15 Add some example code snippets using our usual code block notation then!

@username_27 You're on Linking now!

@username_21 You're on Layout Props

Thank you three very much for your trouble and toil!
<issue_comment>username_15: Hi, @username_0  all done with VirtualizedList API and AppRegistry example, PRs are #1742 and #1743 respectively. Let me know if anything needs changing 👍
<issue_comment>username_27: Hi @username_0 I have a question. I get an error when I call to `Linking.sendIntent` -> `s.default.sendIntent is not a function`. I see the source and is part of the current API so I don't understand why I get that error :'(, can you help me with that ??
<issue_comment>username_27: @username_0 can you review this PR #1751 ?
<issue_comment>username_0: @username_27 This question is better posited on your PR! Would you mind moving it there? (Also, double check you're using the most recent version of React Native!)
<issue_comment>username_0: I've updated the matrix! Just four left to go!

* `AppRegistry` and `Linking` are already in PR
<issue_comment>username_27: @username_0 I tested that code in Snack and I get that error.
<issue_comment>username_28: hi @username_0, after searching the codebase I only found one deprecated prop. if anyone finds any changes please let me know and I will happily update the docs
<issue_comment>username_0: Folks, it looks like [`Text.onlayout`](https://reactnative.dev/docs/text#ontextlayout) is still ""TODO."" Anyone want to patch it up?
<issue_comment>username_15: @username_0 I could patch it up, what is needed for that??
<issue_comment>username_0: Literally replace ""TODO"" with a proper description of what `onlayout` is and does!
<issue_comment>username_2: @username_0 Signing off PanResponder API as up-to-date in https://github.com/facebook/react-native-website/pull/1691

Which means we only have two more to go!

Also the PR for Transforms is at - https://github.com/facebook/react-native-website/pull/1613
<issue_comment>username_0: We are one PR away from being done! Dear contributors, I must ask, what is your favorite format for swag? For me, I love stickers. I put them on my laptop. But some prefer buttons you can wear with pride. What about you?
<issue_comment>username_2: Gosh, I love buttons! ✨
<issue_comment>username_28: @username_0 I prefer stickers ❤️, because of recent cancelation of f8 2020 I can't get sticker packs to share with my local Facebook developer circles anymore 😥. But any swag is welcome 😄.
<issue_comment>username_23: @username_0, I love stickers too :heart:.They enables me to show how much I admire what I put on my laptop :hugs:
<issue_comment>username_29: I love stickers ❤️
<issue_comment>username_15: @username_0 I've got the PR up for the Text.onTextLayout #1757  let me know if any other thing needed 🙌 
Also, discovered my info on the Docs Drive Leaderboard is missing and having some nulls 🤣 to help, here are the PRs I had if you'd want to update the LeaderBoard, Thank You 🙌 ... 
#1606 #1743 #1742 #1740 #1632 #1757 

Finally will love stickers or t-shirts ❤️ and if there are any other ways I could help contribute to this project or any other FB projects, will appreciate your guidance and opportunity on where to start
<issue_comment>username_0: 🍾🎉🎈Thank you everyone! We are mission complete!🍾🎉🎈

Thank you all so much for your conributions! The new docs are being cut now, meaning all your contributions will be front and center, not hiding under **/next/**!

If you could be so kind to [give me a little info about yourselves in this form,](https://docs.google.com/forms/d/1h4evpvafv5WVfupr4zohoizZ1nVtk__8U8LH1odQFSI/) I can see about sending you any swag we might be able to acquire (might be awhile, given the current pandemic!)

![mlp_party](https://user-images.githubusercontent.com/236306/76889154-00181380-687d-11ea-9073-f05165ccc0df.gif)<issue_closed>
<issue_comment>username_27: @username_0 I love t-shirts and stickers ♥️.
<issue_comment>username_21: Amazing effort by everyone! Thanks @username_0 for your patience and support with/to everyone! 🚀🦄
<issue_comment>username_0: So, umm, the pandemic has made procuring and mailing swag more difficult than I had imagined! Eek! But we have not forgotten your contributions :) You can expect a shout out in an upcoming blog post!
<issue_comment>username_4: Hi @username_0, could you please post the link of the blog post here for the reference when the team publishes it?
<issue_comment>username_29: @username_4 I believe this is the blogpost :) https://reactnative.dev/blog/2020/07/23/docs-update
<issue_comment>username_24: hi @username_0  what happened if i have contributed in another issues i have to complete this form form for stickers or t shirt ?"
flutter/website,651151217,4306,,"[{'action': 'opened', 'author': 'socialcalendarteam', 'comment_id': None, 'datetime': '2020-07-05 21:42:02+00:00', 'masked_author': 'username_0', 'text': 'Page URL: https://flutter.dev/docs/resources/platform-adaptations.html\r\nPage source: https://github.com/flutter/website/tree/master/src/docs/resources/platform-adaptations.md\r\n\r\nFound a typo? You can fix it yourself by going to the page source and clicking the pencil icon. Or finish creating this issue.\r\n\r\nDescription of issue: Not mentioning the scrollbar differences.', 'title': ""'Platform specific behaviors and adaptations' page issue"", 'type': 'issue'}
 {'action': 'created', 'author': 'johnpryan', 'comment_id': 654485661.0, 'datetime': '2020-07-06 21:56:27+00:00', 'masked_author': 'username_1', 'text': 'cc: @username_2', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'xster', 'comment_id': 656280476.0, 'datetime': '2020-07-09 18:23:16+00:00', 'masked_author': 'username_2', 'text': 'oh ya, good callout. Forgot about that one. PRs welcome for this addition :)', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'salaryazdjerdi', 'comment_id': 656468600.0, 'datetime': '2020-07-10 03:56:59+00:00', 'masked_author': 'username_3', 'text': ""Now that I have your attention, the scrollbar widgets (cupertino and material) are annoyingly non-customizable.\r\n\r\nI've seen arguments that these are platform defaults and you don't want to mess with platform defaults but I don't agree at all. We're using flutter and the whole point of it is to control and paint the whole screen on any platform. Or make whole new design new to both platforms.\r\n\r\nMinimum options I would add to the Scrollbar widget:\r\n- width: double\r\n- roundedBorder: boolean\r\n- color\r\n\r\nAnd if possible, a way to show page is scrollable without always showing it, like showing it for a second before fading out.\r\n\r\nAlso, your Cupertino widget has a serious bug, it does not change color to light on a dark background like the real ios scrollbar does.\r\n\r\n\r\n\r\nThis might not be the correct place to add all my issues with flutter and you can point me to the correct place but my biggest easily fixable problem with flutter is that there's no good place to find out from where in the theme do widgets get their color from.\r\n\r\nI spent a whole day figuring this information out for the datePicker and timePicker. Please try to customize these widgets for yourself to see how hard and nonstandard they are.\r\n\r\nEVERY SINGLE WIDGET should have this information in an easy to find location probably in the docs. I shouldn't have ro read the underlying code to find out I'm supposed to be using the onSurfaceColor of the colorSwatch to change a widget's color.\r\n\r\nThat said, I think Flutter is amazing and it is giving me superpowers I never had. Keep it up and also please fix these issues."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'johnpryan', 'comment_id': 656798420.0, 'datetime': '2020-07-10 17:39:07+00:00', 'masked_author': 'username_1', 'text': '@username_3 You can file issues at https://github.com/flutter/flutter/issues. This issue tracker is for issues related to our website.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'salaryazdjerdi', 'comment_id': 656818004.0, 'datetime': '2020-07-10 18:23:26+00:00', 'masked_author': 'username_3', 'text': 'Okay thanks!', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'xster', 'comment_id': 656940541.0, 'datetime': '2020-07-10 23:44:01+00:00', 'masked_author': 'username_2', 'text': 'ya, all pretty reasonable feature requests. Feel free to send us PRs to modify the SDK as well to add more customizability.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'salaryazdjerdi', 'comment_id': 657006867.0, 'datetime': '2020-07-11 07:19:58+00:00', 'masked_author': 'username_3', 'text': ""If you leave it to me, it might take longer. I don't know all the lingo/processes and I'm on a long trip. If anyone adds them please send add me to the PRs."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'johnpryan', 'comment_id': 657681472.0, 'datetime': '2020-07-13 17:10:05+00:00', 'masked_author': 'username_1', 'text': 'https://github.com/flutter/flutter/issues/61362\r\nhttps://github.com/flutter/flutter/issues/61364', 'title': None, 'type': 'comment'}]","<issue_start><issue_comment>Title: 'Platform specific behaviors and adaptations' page issue
username_0: Page URL: https://flutter.dev/docs/resources/platform-adaptations.html
Page source: https://github.com/flutter/website/tree/master/src/docs/resources/platform-adaptations.md

Found a typo? You can fix it yourself by going to the page source and clicking the pencil icon. Or finish creating this issue.

Description of issue: Not mentioning the scrollbar differences.
<issue_comment>username_1: cc: @username_2
<issue_comment>username_2: oh ya, good callout. Forgot about that one. PRs welcome for this addition :)
<issue_comment>username_3: Now that I have your attention, the scrollbar widgets (cupertino and material) are annoyingly non-customizable.

I've seen arguments that these are platform defaults and you don't want to mess with platform defaults but I don't agree at all. We're using flutter and the whole point of it is to control and paint the whole screen on any platform. Or make whole new design new to both platforms.

Minimum options I would add to the Scrollbar widget:
- width: double
- roundedBorder: boolean
- color

And if possible, a way to show page is scrollable without always showing it, like showing it for a second before fading out.

Also, your Cupertino widget has a serious bug, it does not change color to light on a dark background like the real ios scrollbar does.



This might not be the correct place to add all my issues with flutter and you can point me to the correct place but my biggest easily fixable problem with flutter is that there's no good place to find out from where in the theme do widgets get their color from.

I spent a whole day figuring this information out for the datePicker and timePicker. Please try to customize these widgets for yourself to see how hard and nonstandard they are.

EVERY SINGLE WIDGET should have this information in an easy to find location probably in the docs. I shouldn't have ro read the underlying code to find out I'm supposed to be using the onSurfaceColor of the colorSwatch to change a widget's color.

That said, I think Flutter is amazing and it is giving me superpowers I never had. Keep it up and also please fix these issues.
<issue_comment>username_1: @username_3 You can file issues at https://github.com/flutter/flutter/issues. This issue tracker is for issues related to our website.
<issue_comment>username_3: Okay thanks!
<issue_comment>username_2: ya, all pretty reasonable feature requests. Feel free to send us PRs to modify the SDK as well to add more customizability.
<issue_comment>username_3: If you leave it to me, it might take longer. I don't know all the lingo/processes and I'm on a long trip. If anyone adds them please send add me to the PRs.
<issue_comment>username_1: https://github.com/flutter/flutter/issues/61362
https://github.com/flutter/flutter/issues/61364"
kubernetes/website,611089030,20720,"{'number': 20720.0, 'repo': 'website', 'user_login': 'kubernetes'}","[{'action': 'opened', 'author': 'afmsavage', 'comment_id': None, 'datetime': '2020-05-02T02:22:18Z', 'masked_author': 'username_0', 'text': ""I fixed a Powershell command that you had provided in this document.  Attempting to run the command with the format you supplied resulted in errors due to some conflict between using backwards slash for pathnames inside of parentheses.\r\n\r\n<!-- 🛈\r\n\r\n Hello!\r\n\r\n Remember to ADD A DESCRIPTION and delete this note before submitting\r\n your pull request. The description should explain what will change,\r\n and why.\r\n\r\n PLEASE title the FIRST commit appropriately, so that if you squash all\r\n your commits into one, the combined commit message makes sense.\r\n For overall help on editing and submitting pull requests, visit:\r\n  https://kubernetes.io/docs/contribute/start/#improve-existing-content\r\n\r\n Use the default base branch, “master”, if you're documenting existing\r\n features in the English localization.\r\n\r\n If you're working on a different localization (not English), or you\r\n are documenting a feature that will be part of a future release, see\r\n https://kubernetes.io/docs/contribute/start#choose-which-git-branch-to-use\r\n for advice.\r\n\r\n-->"", 'title': 'Fixed configure-access-multiple-clusters.md', 'type': 'issue'}
 {'action': 'created', 'author': 'afmsavage', 'comment_id': 622655829.0, 'datetime': '2020-05-02 02:27:39+00:00', 'masked_author': 'username_0', 'text': 'I signed it', 'title': None, 'type': 'comment'}]","<issue_start><issue_comment>Title: Fixed configure-access-multiple-clusters.md
username_0: I fixed a Powershell command that you had provided in this document.  Attempting to run the command with the format you supplied resulted in errors due to some conflict between using backwards slash for pathnames inside of parentheses.

<!-- 🛈

 Hello!

 Remember to ADD A DESCRIPTION and delete this note before submitting
 your pull request. The description should explain what will change,
 and why.

 PLEASE title the FIRST commit appropriately, so that if you squash all
 your commits into one, the combined commit message makes sense.
 For overall help on editing and submitting pull requests, visit:
  https://kubernetes.io/docs/contribute/start/#improve-existing-content

 Use the default base branch, “master”, if you're documenting existing
 features in the English localization.

 If you're working on a different localization (not English), or you
 are documenting a feature that will be part of a future release, see
 https://kubernetes.io/docs/contribute/start#choose-which-git-branch-to-use
 for advice.

-->
<issue_comment>username_0: I signed it"
