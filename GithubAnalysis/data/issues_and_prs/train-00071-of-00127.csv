flutter/website,516771336,3200,,"[{'action': 'opened', 'author': 'zhengger', 'comment_id': None, 'datetime': '2019-11-03 02:25:15+00:00', 'masked_author': 'username_0', 'text': ""Page URL: https://flutter.dev/docs/development/platform-integration/platform-channels.html\r\nPage source: https://github.com/flutter/website/tree/master/src/docs/development/platform-integration/platform-channels.md\r\n\r\nFound a typo? You can fix it yourself by going to the page source and clicking the pencil icon. Or finish creating this issue.\r\n\r\nDescription of issue:\r\nIt's outdated. For the latest flutter SDK(v1.9.1), there is no MainActivity.java file created but just MainActivity.kt when executing 'flutter create batterylevel' command. Please update this article for the latest flutter SDK."", 'title': ""'Writing custom platform-specific code' page issue"", 'type': 'issue'}]","<issue_start><issue_comment>Title: 'Writing custom platform-specific code' page issue
username_0: Page URL: https://flutter.dev/docs/development/platform-integration/platform-channels.html
Page source: https://github.com/flutter/website/tree/master/src/docs/development/platform-integration/platform-channels.md

Found a typo? You can fix it yourself by going to the page source and clicking the pencil icon. Or finish creating this issue.

Description of issue:
It's outdated. For the latest flutter SDK(v1.9.1), there is no MainActivity.java file created but just MainActivity.kt when executing 'flutter create batterylevel' command. Please update this article for the latest flutter SDK."
facebook/docusaurus,1177383140,6964,"{'number': 6964.0, 'repo': 'docusaurus', 'user_login': 'facebook'}","[{'action': 'opened', 'author': 'lex111', 'comment_id': None, 'datetime': '2022-03-22T22:43:07Z', 'masked_author': 'username_0', 'text': '<!--\r\nThank you for sending the PR! We appreciate you spending the time to work on these changes.\r\n\r\nHelp us understand your motivation by explaining why you decided to make this change.\r\n\r\nYou can learn more about contributing to Docusaurus here: https://github.com/facebook/docusaurus/blob/main/CONTRIBUTING.md\r\n\r\nIf this PR adds or changes functionality, please take some time to update the docs.\r\n\r\nHappy contributing!\r\n\r\n-->\r\n\r\n## Motivation\r\n\r\nI have long noticed that many docs sites use icons instead of text in for copy code buttons. I would call this a modern style that makes sense for us to follow it. Besides better design, icons are shorter than text, for example text of ""Copy"" in Russian will look long (compared to English one) -- ""Copy"" vs ""–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å""\r\n\r\n![image](https://user-images.githubusercontent.com/4408379/159585426-4498fe50-50d1-46db-be9e-7f041b7eefae.png)\r\n\r\nAlso you can see in the screenshot that the default colors don\'t meet to the WCAG contrast requirement https://webaim.org/resources/contrastchecker/?fcolor=FFFFFF&bcolor=ACADAF\r\n\r\nAlso, since a clipboard icon turns out to be smaller in size, we can display it in UI with small opacity to demonstrate that the code can be copied. Probably not a big deal but it makes the UI cleaner and more transparent.\r\n\r\nPages/alternative demos for reference/inspiration which uses copy code button with icons:\r\n\r\n- https://developers.google.com/cast/docs/android_sender/customize_ui\r\n- https://developer.mozilla.org/en-US/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_Three.js#html_structure\r\n- https://docs.github.com/en/actions/quickstart#creating-your-first-workflow\r\n- https://docs.gitlab.com/runner/install/docker.html\r\n- https://docs.flutter.dev/development/data-and-backend/json#serializing-json-manually-using-dartconvert\r\n\r\n- https://nuxtjs.org/docs/features/rendering-modes\r\n\r\nDocusaurus\' alternatives examples:\r\n\r\n- GitBook - https://docs.powershelluniversal.com/api/endpoints \r\n- MkDocs Material - https://squidfunk.github.io/mkdocs-material/getting-started/#with-pip\r\n\r\n### Have you read the [Contributing Guidelines on pull requests](https://github.com/facebook/docusaurus/blob/main/CONTRIBUTING.md#pull-requests)?\r\n\r\nYes\r\n\r\n## Test Plan\r\n\r\n![ezgif com-gif-maker](https://user-images.githubusercontent.com/4408379/159588000-31a4b8c7-c562-4108-9407-52d9421cba7f.gif)\r\n\r\n\r\n## Related PRs\r\n\r\n<!-- If you haven\'t already, link to issues/PRs that are related to this change. This helps us develop the context and keep a rich repo history. -->', 'title': 'refactor: replace text-based copy code button with icons', 'type': 'issue'}
 {'action': 'created', 'author': 'lex111', 'comment_id': 1075725237.0, 'datetime': '2022-03-22 22:45:54+00:00', 'masked_author': 'username_0', 'text': ""I understand that perhaps not all our might be pleasant with such a redesign, so it make sense to hold a poll on Twitter or Discord chat. So that's why I haven't removed the current i18n messages yet."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'Josh-Cena', 'comment_id': 1075771709.0, 'datetime': '2022-03-23 00:10:43+00:00', 'masked_author': 'username_1', 'text': 'Can we make the button only show on hover? Showing it on every code block looks too noisy.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'lex111', 'comment_id': 1075975514.0, 'datetime': '2022-03-23 06:36:47+00:00', 'masked_author': 'username_0', 'text': ""Alright, but left a small opacity when hovering yet.\r\n\r\nGenerally screen readers re-pronounce value when changing `aria-label`, but I'm not sure if all screen readers do that. So the universal working solution is to create an `aria-live` area. However, if you have a chance, please test it on your macOS (via VoiceOver) by uncommenting the `aria-label` attribute and commenting out the `span` with `aria-live`."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'Josh-Cena', 'comment_id': 1076071208.0, 'datetime': '2022-03-23 08:21:03+00:00', 'masked_author': 'username_1', 'text': 'Yes, can confirm it at least works with voice over', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'Josh-Cena', 'comment_id': 1076479099.0, 'datetime': '2022-03-23 15:13:25+00:00', 'masked_author': 'username_1', 'text': 'Another UX point: when I click the copy button and the cursor leaves, the button should immediately go away instead of falling back to the ""copy"" state for a millisecond:\r\n\r\n![Test](https://user-images.githubusercontent.com/55398995/159732242-3d4a34fc-1a93-4806-b587-ea875fb5bbc3.gif)', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'slorber', 'comment_id': 1077435543.0, 'datetime': '2022-03-24 09:47:51+00:00', 'masked_author': 'username_2', 'text': 'Thanks üëç \r\n\r\nThat looks good enough to me to merge', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'lex111', 'comment_id': 1077439519.0, 'datetime': '2022-03-24 09:51:40+00:00', 'masked_author': 'username_0', 'text': ""I guess currently there is no easy way to pronounce only the value `aria-label` attribute by a screen reader when using `title` attribute. Problem is that when using `aria-label` and `title` together, a screen reader will first read out the value of `aria-label` and then - the value of `title` attribute. This is not very nice UX, but I haven't found a simple solution to fix it.\r\nThe best would be to use tooltip instead of `title` attribute. But implementing own tooltip is not that easy, so for now I propose to leave it as it is -- i.e. use `aria-label` and `title`, as we currently do in other Docusaurus components. And then migrating from `title` attributes to using tooltips in the future."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'Josh-Cena', 'comment_id': 1077442502.0, 'datetime': '2022-03-24 09:55:03+00:00', 'masked_author': 'username_1', 'text': ""The a11y experience was frankly already good enough without the title with VoiceOver, but not sure about other screen readers. Let's see if anyone complains."", 'title': None, 'type': 'comment'}]","<issue_start><issue_comment>Title: refactor: replace text-based copy code button with icons
username_0: <!--
Thank you for sending the PR! We appreciate you spending the time to work on these changes.

Help us understand your motivation by explaining why you decided to make this change.

You can learn more about contributing to Docusaurus here: https://github.com/facebook/docusaurus/blob/main/CONTRIBUTING.md

If this PR adds or changes functionality, please take some time to update the docs.

Happy contributing!

-->

## Motivation

I have long noticed that many docs sites use icons instead of text in for copy code buttons. I would call this a modern style that makes sense for us to follow it. Besides better design, icons are shorter than text, for example text of ""Copy"" in Russian will look long (compared to English one) -- ""Copy"" vs ""–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å""

![image](https://user-images.githubusercontent.com/4408379/159585426-4498fe50-50d1-46db-be9e-7f041b7eefae.png)

Also you can see in the screenshot that the default colors don't meet to the WCAG contrast requirement https://webaim.org/resources/contrastchecker/?fcolor=FFFFFF&bcolor=ACADAF

Also, since a clipboard icon turns out to be smaller in size, we can display it in UI with small opacity to demonstrate that the code can be copied. Probably not a big deal but it makes the UI cleaner and more transparent.

Pages/alternative demos for reference/inspiration which uses copy code button with icons:

- https://developers.google.com/cast/docs/android_sender/customize_ui
- https://developer.mozilla.org/en-US/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_Three.js#html_structure
- https://docs.github.com/en/actions/quickstart#creating-your-first-workflow
- https://docs.gitlab.com/runner/install/docker.html
- https://docs.flutter.dev/development/data-and-backend/json#serializing-json-manually-using-dartconvert

- https://nuxtjs.org/docs/features/rendering-modes

Docusaurus' alternatives examples:

- GitBook - https://docs.powershelluniversal.com/api/endpoints 
- MkDocs Material - https://squidfunk.github.io/mkdocs-material/getting-started/#with-pip

### Have you read the [Contributing Guidelines on pull requests](https://github.com/facebook/docusaurus/blob/main/CONTRIBUTING.md#pull-requests)?

Yes

## Test Plan

![ezgif com-gif-maker](https://user-images.githubusercontent.com/4408379/159588000-31a4b8c7-c562-4108-9407-52d9421cba7f.gif)


## Related PRs

<!-- If you haven't already, link to issues/PRs that are related to this change. This helps us develop the context and keep a rich repo history. -->
<issue_comment>username_0: I understand that perhaps not all our might be pleasant with such a redesign, so it make sense to hold a poll on Twitter or Discord chat. So that's why I haven't removed the current i18n messages yet.
<issue_comment>username_1: Can we make the button only show on hover? Showing it on every code block looks too noisy.
<issue_comment>username_0: Alright, but left a small opacity when hovering yet.

Generally screen readers re-pronounce value when changing `aria-label`, but I'm not sure if all screen readers do that. So the universal working solution is to create an `aria-live` area. However, if you have a chance, please test it on your macOS (via VoiceOver) by uncommenting the `aria-label` attribute and commenting out the `span` with `aria-live`.
<issue_comment>username_1: Yes, can confirm it at least works with voice over
<issue_comment>username_1: Another UX point: when I click the copy button and the cursor leaves, the button should immediately go away instead of falling back to the ""copy"" state for a millisecond:

![Test](https://user-images.githubusercontent.com/55398995/159732242-3d4a34fc-1a93-4806-b587-ea875fb5bbc3.gif)
<issue_comment>username_2: Thanks üëç 

That looks good enough to me to merge
<issue_comment>username_0: I guess currently there is no easy way to pronounce only the value `aria-label` attribute by a screen reader when using `title` attribute. Problem is that when using `aria-label` and `title` together, a screen reader will first read out the value of `aria-label` and then - the value of `title` attribute. This is not very nice UX, but I haven't found a simple solution to fix it.
The best would be to use tooltip instead of `title` attribute. But implementing own tooltip is not that easy, so for now I propose to leave it as it is -- i.e. use `aria-label` and `title`, as we currently do in other Docusaurus components. And then migrating from `title` attributes to using tooltips in the future.
<issue_comment>username_1: The a11y experience was frankly already good enough without the title with VoiceOver, but not sure about other screen readers. Let's see if anyone complains."
eduardoboucas/staticman,445729927,293,,"[{'action': 'opened', 'author': 'robinmoussu', 'comment_id': None, 'datetime': '2019-05-18 16:08:07+00:00', 'masked_author': 'username_0', 'text': ""Staticman seems usable with gitlab, but I wasn't able to understand how to do it. I think that the [main documentation](https://staticman.net/docs/) should be updated (or at least points to another page) where it explains how to use gitlab.\r\n\r\n@username_1 Do you think it could be possible that you describe what you did on your [test](https://gitlab.com/username_1/test-hugo-staticman). I'm also using hugo, so it would be highly welcome."", 'title': '[documentation] how to use staticman on gitlab?', 'type': 'issue'}
 {'action': 'created', 'author': 'VincentTam', 'comment_id': 493695497.0, 'datetime': '2019-05-18 17:59:23+00:00', 'masked_author': 'username_1', 'text': ""@username_0 I've already done that in [my GitLab + Staticman tutorial](https://vincenttam.gitlab.io/post/2018-09-16-staticman-powered-gitlab-pages/1/) in September, and here's a more refined version: https://gitlab.com/username_1/bhdemo#beautiful-hugo-with-staticman-comment-reply.  Nonetheless, I recommend [using Framagit](https://math.meta.stackexchange.com/a/29462/290189), another GitLab instance, instead of GitLab.com for performance reasons.\r\n\r\nJudging from PR's for documentation changes such as #256, #261, #266, #281, I think writing a separate blog post would be a better choice for the moment.  You may consider contributing one if you like."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'robinmoussu', 'comment_id': 493708504.0, 'datetime': '2019-05-18 21:28:49+00:00', 'masked_author': 'username_0', 'text': 'Thanks for the quick answer. I tried again, but without success.\r\n\r\nI obviously don\'t understand something, so I tried to sum-up what I understand, and what I tried.\r\n\r\nFrom what I understand, I should add in each blog post a form to be able to send a comment. I think that it\'s just a configuration somewhere, and when the gitlab CI build my blog, it will add that form automatically at the end of each blog post.\r\nWhen a user fill that form and click on the ""submit"" button, a request to a staticman instance should be send (for example to the framasoft instance). The staticman instance will then create a pull request on the gitlab of my blogpost, that should be accepted automatically (if I comments are not moderated). To do that the gitlab user of the framasoft instance of staticman should be added as a developper. That pull request will add a new file in `data/comments`, and trigger a rebuild of the site (like any PR). Once rebuilded, the blog post will contains the post + the form + the comment.\r\n\r\n1. I don\'t understand how the form (to be able to send the comments) is generated.\r\n2. I cloned https://gitlab.com/username_1/bhdemo#beautiful-hugo-with-staticman-comment-reply then did `hugo server` to test locally. I only have a blank page on my localhost instance, witch is quite impractical for testing. I force pushed it on my blog, and (after the CI builded it), I got the blog posts with the comments. I tried to add a new comment, without success. For obvious reason I reverted this push to the normal content of my blog.\r\n3. I\'m not sure that I gave the correct right to the framasoft bot. What is it\'s username?', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'VincentTam', 'comment_id': 493710061.0, 'datetime': '2019-05-18 21:56:29+00:00', 'masked_author': 'username_1', 'text': 'The Go-HTML template file(s) under `layouts/partials` do the job.\r\n\r\n* * *\r\n\r\nBefore I proceed, it\'s better to give a quick response tp clarify the roles of my two public GitLab instances.\r\n\r\n| ""name"" | ""public GitLab instance"" | ""public Framagit instance"" |\r\n| --- | --- | --- |\r\n| GitLab instance | GitLab.com | Framagit |\r\n| `gitlabBaseUrl` | https://gitlab.com | https://framagit.org |\r\n| username | staticmanlab | staticmanlab1 |\r\n| `githubBaseUrl` | https://github.com | https://github.com |\r\n\r\nAFAIK, `gitlabBaseUrl` can only take one GitLab instance.\r\n\r\nRemarks: The user name **staticmanlab** has been taken up by someone else on Framagit, so I have to append the digit \'1\'.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'VincentTam', 'comment_id': 493712634.0, 'datetime': '2019-05-18 22:49:07+00:00', 'masked_author': 'username_1', 'text': 'That\'s the result of several things done well:\r\n\r\n1. Staticman (as a NodeJS app) (relay HTML `<form>` data to GitHub/GitLab repo according to the `path` found in root-level `staticman.yml`)\r\n2. CD/CI (for automatic rebuild)\r\n3. Site theme(\'s Staticman integration) (for displaying static comments)\r\n\r\nItems (1) and (3) require a config file.  I call the former ""(git) repo config"", and the later ""site config"" for clarity.\r\n\r\nStaticman (this Git repo, as a a NodeJS app), is only responsible for (1).  As long as the API server can transmit the generated data files into the `path` specified in root-level `staticman.yml`, then step (1) is good.  In case of problems in (3), it\'s a problem with the site theme.\r\n\r\n* * *\r\n\r\nLet\'s get back to your questions.\r\n\r\n1. To generate an HTML form by hand, you may try the HTML `<form>` element on W3 School\'s tutorial.\r\n2. Staticman API servers communicate with remote Git servers, not local Git repos.\r\n3. Please see the table in the above comment.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'VincentTam', 'comment_id': 493735958.0, 'datetime': '2019-05-19 08:03:54+00:00', 'masked_author': 'username_1', 'text': ""@username_0 Please include the link to your site as well as your source code, so that other users, apart from me, may also offer a helping hand.  Please consider giving the error message and the error code so that your error can be reproduced by others.\r\n\r\nAfter resting for a night, I've reminded myself that I haven't yet clearly addressed the quoted sentence.  The [GitLab repo for your blog](https://gitlab.com/username_0/blog) has _no root-level_ `staticman.yml`.  That's why a Staticman API instance _can't_ interact with your repo.\r\n\r\nTo understand how Staticman (as a NodeJS app) works, I recommend the original demo repo https://gitlab.com/ntsim/test-staticman (require GitLab login to view) posted in https://github.com/eduardoboucas/staticman/pull/219#issuecomment-417857360.  I recommend reading the comments by Nicolas Tsim, the author of that PR, as a _reference_, especially the top of the page.  However, the setup guide mixes up two things: server-side setup and client-side setup.  That's why I've written two separate articles in my blog to make things clear for *non*-developers like me.  In addition, the original comments might contain [careless mistakes](https://github.com/eduardoboucas/staticman/pull/219#issuecomment-419676635), since our mind might get tired after hours of coding, thinking and writing.\r\n\r\nApart from the [lack of repo config](https://gitlab.com/search?utf8=%E2%9C%93&search=staticman&group_id=&project_id=7544454&search_code=true&repository_ref=master) in the GitLab repo for your blog, your site template (customized Beautiful Hugo) lacks Go-HTML partial template(s) for Staticman comments display.  Despite the [offiical GitLab Pages + Hugo demo](https://gitlab.com/pages/hugo) embed Hugo themes as a subdirectory, it's better to follow [Hugo's official quick start guide](https://gohugo.io/getting-started/quick-start/#step-3-add-a-theme) and embed a Hugo theme as a [Git submodule](https://git-scm.com/book/en/v2/Git-Tools-Submodules) because it's not supposed to be modified as frequently as the blog's `content` folder.  This allows you to easily merge additional features and/or bug fixes in [your Hugo theme's PR](https://github.com/halogenica/beautifulhugo/pulls), such as, halogenica/beautifulhugo#225 for Archive support.  You may consider my Staticman nested comment & instant preview support halogenica/beautifulhugo#222 for the Go-HTML template needed to render Staticman comments."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'VincentTam', 'comment_id': 495579617.0, 'datetime': '2019-05-24 11:15:19+00:00', 'masked_author': 'username_1', 'text': ""@username_0 I've overlooked this problem.  This is due to the lack of the `themeDir` `theme/beautifulhugo`, and that's a usage problem of `hugo server`, not a Staticman problem.  You may include the theme Beautiful Hugo by `git submodule update --init --remote --recursive`.  Due to the file `.gitmodules`, `git submodule` will set up the `themeDir` to track [my tweaked Beautiful Hugo](https://gitlab.com/vincenttam/beautifulhugo), which includes some PR's (optional features and bug fixes) of the original theme, notably halogenica/beautifulhugo#222.\r\n\r\nLooking back, I should have included the [`--recurse-submodules`](https://stackoverflow.com/q/3796927/3184351) in the `git clone` command in the README of my demo project.\r\n\r\nP.S. The code written for nested Staticman integration for the theme Beautiful Hugo in the above linked PR is, in fact, unnecessarily complicated. (c.f. https://github.com/victoriadotdev/hugo-theme-introduction/pull/119#issuecomment-448613809) This has motivated me to retake [a Framagit user's abandonned work](https://framagit.org/Bridouz/bridouz.frama.io/commit/f01aca4e3267d87d15057ca596554b3a190bd45f), simplify the template code and port it into another theme [Huginn](https://framagit.org/staticman-gitlab-pages/hugo-theme-huginn).  The newly developped site should be a better demo.\r\n\r\nDemo site: https://staticman-gitlab-pages.frama.io/huginn"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'robinmoussu', 'comment_id': 495580602.0, 'datetime': '2019-05-24 11:18:33+00:00', 'masked_author': 'username_0', 'text': '', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'VincentTam', 'comment_id': 495581856.0, 'datetime': '2019-05-24 11:22:32+00:00', 'masked_author': 'username_1', 'text': '@username_0 Bon d√©m√©nagement et bonne installation !', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'VincentTam', 'comment_id': 498871633.0, 'datetime': '2019-06-04 22:50:24+00:00', 'masked_author': 'username_1', 'text': ""@username_0 Here's a related [Hugo Discourse question](https://discourse.gohugo.io/t/installed-hugo-installed-template-but-localhost-1313-blank-or-error/18838) about the problem of blank page in Hugo.  I didn't (and won't) read it in details.  Perhaps you might find this informative."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'VincentTam', 'comment_id': 518645602.0, 'datetime': '2019-08-06 12:21:32+00:00', 'masked_author': 'username_1', 'text': ""Update: For a documentation on how to use Staticman with GitLab, I've written an illustrated guide in the README for a recently published Hugo theme called Huginn at https://themes.gohugo.io/huginn/."", 'title': None, 'type': 'comment'}
 {'action': 'closed', 'author': 'alexwaibel', 'comment_id': None, 'datetime': '2019-11-08 03:23:47+00:00', 'masked_author': 'username_2', 'text': '', 'title': None, 'type': 'issue'}
 {'action': 'created', 'author': 'alexwaibel', 'comment_id': 551368129.0, 'datetime': '2019-11-08 03:23:48+00:00', 'masked_author': 'username_2', 'text': 'Duplicate of #312', 'title': None, 'type': 'comment'}]","<issue_start><issue_comment>Title: [documentation] how to use staticman on gitlab?
username_0: Staticman seems usable with gitlab, but I wasn't able to understand how to do it. I think that the [main documentation](https://staticman.net/docs/) should be updated (or at least points to another page) where it explains how to use gitlab.

@username_1 Do you think it could be possible that you describe what you did on your [test](https://gitlab.com/username_1/test-hugo-staticman). I'm also using hugo, so it would be highly welcome.
<issue_comment>username_1: @username_0 I've already done that in [my GitLab + Staticman tutorial](https://vincenttam.gitlab.io/post/2018-09-16-staticman-powered-gitlab-pages/1/) in September, and here's a more refined version: https://gitlab.com/username_1/bhdemo#beautiful-hugo-with-staticman-comment-reply.  Nonetheless, I recommend [using Framagit](https://math.meta.stackexchange.com/a/29462/290189), another GitLab instance, instead of GitLab.com for performance reasons.

Judging from PR's for documentation changes such as #256, #261, #266, #281, I think writing a separate blog post would be a better choice for the moment.  You may consider contributing one if you like.
<issue_comment>username_0: Thanks for the quick answer. I tried again, but without success.

I obviously don't understand something, so I tried to sum-up what I understand, and what I tried.

From what I understand, I should add in each blog post a form to be able to send a comment. I think that it's just a configuration somewhere, and when the gitlab CI build my blog, it will add that form automatically at the end of each blog post.
When a user fill that form and click on the ""submit"" button, a request to a staticman instance should be send (for example to the framasoft instance). The staticman instance will then create a pull request on the gitlab of my blogpost, that should be accepted automatically (if I comments are not moderated). To do that the gitlab user of the framasoft instance of staticman should be added as a developper. That pull request will add a new file in `data/comments`, and trigger a rebuild of the site (like any PR). Once rebuilded, the blog post will contains the post + the form + the comment.

1. I don't understand how the form (to be able to send the comments) is generated.
2. I cloned https://gitlab.com/username_1/bhdemo#beautiful-hugo-with-staticman-comment-reply then did `hugo server` to test locally. I only have a blank page on my localhost instance, witch is quite impractical for testing. I force pushed it on my blog, and (after the CI builded it), I got the blog posts with the comments. I tried to add a new comment, without success. For obvious reason I reverted this push to the normal content of my blog.
3. I'm not sure that I gave the correct right to the framasoft bot. What is it's username?
<issue_comment>username_1: The Go-HTML template file(s) under `layouts/partials` do the job.

* * *

Before I proceed, it's better to give a quick response tp clarify the roles of my two public GitLab instances.

| ""name"" | ""public GitLab instance"" | ""public Framagit instance"" |
| --- | --- | --- |
| GitLab instance | GitLab.com | Framagit |
| `gitlabBaseUrl` | https://gitlab.com | https://framagit.org |
| username | staticmanlab | staticmanlab1 |
| `githubBaseUrl` | https://github.com | https://github.com |

AFAIK, `gitlabBaseUrl` can only take one GitLab instance.

Remarks: The user name **staticmanlab** has been taken up by someone else on Framagit, so I have to append the digit '1'.
<issue_comment>username_1: That's the result of several things done well:

1. Staticman (as a NodeJS app) (relay HTML `<form>` data to GitHub/GitLab repo according to the `path` found in root-level `staticman.yml`)
2. CD/CI (for automatic rebuild)
3. Site theme('s Staticman integration) (for displaying static comments)

Items (1) and (3) require a config file.  I call the former ""(git) repo config"", and the later ""site config"" for clarity.

Staticman (this Git repo, as a a NodeJS app), is only responsible for (1).  As long as the API server can transmit the generated data files into the `path` specified in root-level `staticman.yml`, then step (1) is good.  In case of problems in (3), it's a problem with the site theme.

* * *

Let's get back to your questions.

1. To generate an HTML form by hand, you may try the HTML `<form>` element on W3 School's tutorial.
2. Staticman API servers communicate with remote Git servers, not local Git repos.
3. Please see the table in the above comment.
<issue_comment>username_1: @username_0 Please include the link to your site as well as your source code, so that other users, apart from me, may also offer a helping hand.  Please consider giving the error message and the error code so that your error can be reproduced by others.

After resting for a night, I've reminded myself that I haven't yet clearly addressed the quoted sentence.  The [GitLab repo for your blog](https://gitlab.com/username_0/blog) has _no root-level_ `staticman.yml`.  That's why a Staticman API instance _can't_ interact with your repo.

To understand how Staticman (as a NodeJS app) works, I recommend the original demo repo https://gitlab.com/ntsim/test-staticman (require GitLab login to view) posted in https://github.com/eduardoboucas/staticman/pull/219#issuecomment-417857360.  I recommend reading the comments by Nicolas Tsim, the author of that PR, as a _reference_, especially the top of the page.  However, the setup guide mixes up two things: server-side setup and client-side setup.  That's why I've written two separate articles in my blog to make things clear for *non*-developers like me.  In addition, the original comments might contain [careless mistakes](https://github.com/eduardoboucas/staticman/pull/219#issuecomment-419676635), since our mind might get tired after hours of coding, thinking and writing.

Apart from the [lack of repo config](https://gitlab.com/search?utf8=%E2%9C%93&search=staticman&group_id=&project_id=7544454&search_code=true&repository_ref=master) in the GitLab repo for your blog, your site template (customized Beautiful Hugo) lacks Go-HTML partial template(s) for Staticman comments display.  Despite the [offiical GitLab Pages + Hugo demo](https://gitlab.com/pages/hugo) embed Hugo themes as a subdirectory, it's better to follow [Hugo's official quick start guide](https://gohugo.io/getting-started/quick-start/#step-3-add-a-theme) and embed a Hugo theme as a [Git submodule](https://git-scm.com/book/en/v2/Git-Tools-Submodules) because it's not supposed to be modified as frequently as the blog's `content` folder.  This allows you to easily merge additional features and/or bug fixes in [your Hugo theme's PR](https://github.com/halogenica/beautifulhugo/pulls), such as, halogenica/beautifulhugo#225 for Archive support.  You may consider my Staticman nested comment & instant preview support halogenica/beautifulhugo#222 for the Go-HTML template needed to render Staticman comments.
<issue_comment>username_1: @username_0 I've overlooked this problem.  This is due to the lack of the `themeDir` `theme/beautifulhugo`, and that's a usage problem of `hugo server`, not a Staticman problem.  You may include the theme Beautiful Hugo by `git submodule update --init --remote --recursive`.  Due to the file `.gitmodules`, `git submodule` will set up the `themeDir` to track [my tweaked Beautiful Hugo](https://gitlab.com/vincenttam/beautifulhugo), which includes some PR's (optional features and bug fixes) of the original theme, notably halogenica/beautifulhugo#222.

Looking back, I should have included the [`--recurse-submodules`](https://stackoverflow.com/q/3796927/3184351) in the `git clone` command in the README of my demo project.

P.S. The code written for nested Staticman integration for the theme Beautiful Hugo in the above linked PR is, in fact, unnecessarily complicated. (c.f. https://github.com/victoriadotdev/hugo-theme-introduction/pull/119#issuecomment-448613809) This has motivated me to retake [a Framagit user's abandonned work](https://framagit.org/Bridouz/bridouz.frama.io/commit/f01aca4e3267d87d15057ca596554b3a190bd45f), simplify the template code and port it into another theme [Huginn](https://framagit.org/staticman-gitlab-pages/hugo-theme-huginn).  The newly developped site should be a better demo.

Demo site: https://staticman-gitlab-pages.frama.io/huginn
<issue_comment>username_1: @username_0 Bon d√©m√©nagement et bonne installation !
<issue_comment>username_1: @username_0 Here's a related [Hugo Discourse question](https://discourse.gohugo.io/t/installed-hugo-installed-template-but-localhost-1313-blank-or-error/18838) about the problem of blank page in Hugo.  I didn't (and won't) read it in details.  Perhaps you might find this informative.
<issue_comment>username_1: Update: For a documentation on how to use Staticman with GitLab, I've written an illustrated guide in the README for a recently published Hugo theme called Huginn at https://themes.gohugo.io/huginn/.<issue_closed>
<issue_comment>username_2: Duplicate of #312"
nodejs/nodejs.org,141331271,581,,"[{'action': 'opened', 'author': 'mikeal', 'comment_id': None, 'datetime': '2016-03-16 16:44:10+00:00', 'masked_author': 'username_0', 'text': 'Heya,\r\n\r\nIt has been a bit problematic having some of the foundation content on the regular website because the contribution flow is a bit too developer specific for people from marketing and PR to edit the content. Examples of this content are:\r\n\r\n* Press Releases (currently https://nodejs.org/en/foundation/announcements/)\r\n* ""In the News"" articles (currently https://nodejs.org/en/foundation/in-the-news/ which is a JS load in from a spreadsheet to workaround this)\r\n* Member List which needs to be updated in lock step with new member announcements (https://nodejs.org/en/foundation/members/)\r\n\r\nThere\'s also new content coming up like case studies that need a place to go.\r\n\r\nI\'ve spent a lot of time trying to find an editor or some kind of workflow that makes it usable to create and edit content on the regular website but there just isn\'t. There\'s a few good markdown editors but the yaml metadata at the top of pages is a pretty difficult hill to climb.\r\n\r\nIdeally we would keep the contribution flow for design, structure and hosting to be friendly to the developer community but with an integrated content editor that is usable by non-programmers.\r\n\r\nEnter KeystoneJS http://keystonejs.com/ , which is the best CMS I can find written in Node.js :)\r\n\r\nThe marketing and PR people have tested out the demo and find it suitable and it\'s also relatively simple for developers to edit structure and design.\r\n\r\n@nodejs/build will need to verify that we can easily host and auto-deploy this.', 'title': 'New Foundation Microsite', 'type': 'issue'}
 {'action': 'created', 'author': 'ghostbar', 'comment_id': 197425348.0, 'datetime': '2016-03-16 17:00:52+00:00', 'masked_author': 'username_1', 'text': ""Is there no way to adapt prose.io? http://prose.io/#about https://github.com/prose/prose\r\n\r\nThe metadata looks pretty much like what jekyll uses and that's handled already by prose."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'mikeal', 'comment_id': 197444940.0, 'datetime': '2016-03-16 17:31:33+00:00', 'masked_author': 'username_0', 'text': ""@username_1 the problem isn't just editing the metadata, it's that there's a bunch of boilerplate metadata that you need to understand in order to add any content. I tried to get prose to work, I tried all of the markdown editors, and it just isn't a good flow, especially for editing content."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'williamkapke', 'comment_id': 197458658.0, 'datetime': '2016-03-16 17:57:34+00:00', 'masked_author': 'username_2', 'text': ""@username_0 I'm concerned that putting the content in Mongo (via KeystoneJS or whatever) with a system that needs logins doesn't offer a place for the community to iterate/collaborate on the content before and after publishing.\r\n\r\n...maybe, in this case, the Foundation content is solely owned and controlled by Marketing/PR..?"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'Starefossen', 'comment_id': 197458677.0, 'datetime': '2016-03-16 17:57:37+00:00', 'masked_author': 'username_3', 'text': 'I am curios how the Marketing and PR people at the Foundation fits in with the open and collaborative effort by the Evangelism and Website working groups? Will Marketing and PR take over all responsibilities for publishing content on the nodejs.org website in the future?', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'mikeal', 'comment_id': 197526911.0, 'datetime': '2016-03-16 20:15:13+00:00', 'masked_author': 'username_0', 'text': ""@username_2 ya, this content is primarily, if not entirely, created and edited by marketing/PR, who currently can't collaborate in the existing website (to date I've had to do almost all the writing and edits myself).\r\n\r\n@username_3 So, for the last 6 months both Evangelism and Marketing/PR have been working in an independent but complimentary way. Evangelism posts to the Node.js blog (they actually create more content than Marketing/PR) and routinely gives the @nodejs tweets to publish and promote. \r\n\r\nWe've actually already separated the voices somewhat. The Project/Community has the main blog voice and Marketing/Industry voice is on a Medium blog. The place this gets mixed up is the Press Releases that end up in the main blog, and that's only because when we give that to press it needs to a nodejs.org address on it. I would like to clean this up because when the **project** tells people they need to install a security update it means more than the **marketing** voice telling them the same thing.\r\n\r\nBut, to be clear, nothing Evangelism is doing now will be taken on by Marketing/PR. These will remain parallel and complimentary efforts.\r\n\r\nAlso, the work here is separated but we've actually been working to bridge the communication between Evangelism and Marketing/PR. Julian was invited to participate in the Marketing Committee in order to bring in a perspective from Evangelism and i18n."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'jbergstroem', 'comment_id': 197606764.0, 'datetime': '2016-03-16 23:38:10+00:00', 'masked_author': 'username_4', 'text': ""@username_0 quick q: searched for a marketing team but couldn't find any members? https://github.com/orgs/nodejs/teams?utf8=‚úì&query=marketing. Is this separate from github?"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'mikeal', 'comment_id': 197609519.0, 'datetime': '2016-03-16 23:51:31+00:00', 'masked_author': 'username_0', 'text': ""@username_4 A few of them have GitHub accounts but mostly aren't on GitHub :) These are people employed by the Linux Foundation to do this work for the Node.js Foundation in coordination with the Marketing Committee (which is a foundation member committee)."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'rvagg', 'comment_id': 197623902.0, 'datetime': '2016-03-17 00:42:21+00:00', 'masked_author': 'username_5', 'text': '/cc @jedwatson who is behind KeystoneJS.\r\n\r\nI\'m concerned that the Build team may not have the stomach to administer or be responsible for a Mongo deployment but reckon that we might be able to find a mutually beneficial arrangement with Jed & Keystone, either by their contributing to the Build team to help shoulder responsibility or perhaps even taking that load entirely. It\'d be good for Keystone _(I have no problem with a ""powered by Keystone"" FWIW)_ and the usability is absolutely a problem for non-technical people that we need to fix.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'JedWatson', 'comment_id': 197629788.0, 'datetime': '2016-03-17 01:04:51+00:00', 'masked_author': 'username_6', 'text': ""Thanks @username_0! Stoked to hear that.\r\n\r\n:+1: Just had a quick chat with the team at Thinkmill, would love to take this on. We're happy to support the deployment and help make sure things go smoothly. Also on board for design / development if that helps.\r\n\r\nFWIW we're also embarking on a project to implement database adapters in Keystone (to remove the hard dependency on MongoDB) and are looking initially at Postgres and RethingDB. No promises on timing but we can look at the Mongo deployment as a short-term thing. We also have production systems replicating to Postgres by tailing the oplog, in place for analytics, which has been quite successful and means anything we do don't be locked into the Mongo platform."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'mikeal', 'comment_id': 197633277.0, 'datetime': '2016-03-17 01:10:52+00:00', 'masked_author': 'username_0', 'text': ""The whole setup will end up behind Cloudflare so we could use a remotely hosted MongoDB if there is a reasonable hosting service. Any performance issues we might be worried about are probably negligible given it'll be behind a cache."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'JedWatson', 'comment_id': 197633563.0, 'datetime': '2016-03-17 01:12:31+00:00', 'masked_author': 'username_6', 'text': 'We generally use https://mlab.com for hosting with servers at AWS', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'williamkapke', 'comment_id': 197634473.0, 'datetime': '2016-03-17 01:17:28+00:00', 'masked_author': 'username_2', 'text': ""+1 on [mlab](https://mlab.com) (prev known as MongoLab). I've had great success with them... even with their FREE version. They been handling a ton of Tinder's load."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'wonderdogone', 'comment_id': 198806120.0, 'datetime': '2016-03-19 23:29:54+00:00', 'masked_author': 'username_7', 'text': ""mlab will work if it's def going to be mongo. What about the host? I using Digital Ocean for some smaller (and budget conscious) projects/ They do have nice API's to work with."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'mikeal', 'comment_id': 198816997.0, 'datetime': '2016-03-20 01:04:48+00:00', 'masked_author': 'username_0', 'text': '@username_7 the build group has donated compute resources across several providers, including digitalocean.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'mikeal', 'comment_id': 199514505.0, 'datetime': '2016-03-21 22:21:43+00:00', 'masked_author': 'username_0', 'text': ""Created a new repo https://github.com/nodejs/foundation.nodejs.org\r\n\r\nI signed up for mlab for the foundation, I can share the credentials with the build team.\r\n\r\n@username_6 the site.css doesn't seem to be loading, wondering what the deal is there."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'mxstbr', 'comment_id': 199526852.0, 'datetime': '2016-03-21 23:04:48+00:00', 'masked_author': 'username_8', 'text': ""I [submitted a PR](https://github.com/nodejs/foundation.nodejs.org/pull/1) checking `site.css` into git so the next person won't have to manually start the stylus compilation after the first clone. That should solve the problem!"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'jbergstroem', 'comment_id': 199535133.0, 'datetime': '2016-03-21 23:28:45+00:00', 'masked_author': 'username_4', 'text': ""@username_8 wouldn't that mean that the site.css needs to be updated every time a change is made? Looking at the gulpfile I'm getting the impression that it should handle spawning `keystone.js` (and generate css)."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'mxstbr', 'comment_id': 199538453.0, 'datetime': '2016-03-21 23:40:09+00:00', 'masked_author': 'username_8', 'text': ""Yes the gulpfile handles all of that, but you need to change and save one of the `.styl` files for it to compile the CSS. When you first run `$ gulp` in your terminal, it doesn't compile.\r\n\r\nI checked the `site.css` into git so new developers can start immediately without having to save one of the files to get the CSS, the other option would be to run the `stylus` task once when `$ gulp` is started."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'TheAlphaNerd', 'comment_id': 199538857.0, 'datetime': '2016-03-21 23:42:28+00:00', 'masked_author': 'username_9', 'text': ""that seems wrong to me. I've done work on the website, without touching styles, and never needed to manually run stylus."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'mxstbr', 'comment_id': 199547398.0, 'datetime': '2016-03-22 00:02:00+00:00', 'masked_author': 'username_8', 'text': ""You don't need to manually run stylus, it runs automatically when you change styles in `.styl` files! Because no styles had been changed before, the stylus compilation had never happened and the `site.css` file didn't exist."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'TheAlphaNerd', 'comment_id': 199552722.0, 'datetime': '2016-03-22 00:15:48+00:00', 'masked_author': 'username_9', 'text': '@username_8 MY BAD... I thought you were talking about nodejs.org', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'jbergstroem', 'comment_id': 199554147.0, 'datetime': '2016-03-22 00:19:43+00:00', 'masked_author': 'username_4', 'text': ""How about adding a check in whatever runner that just calls compile if style.css doesn't exist then? I don't think checking a file that will get out of date quickly is the way here."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'mxstbr', 'comment_id': 199555339.0, 'datetime': '2016-03-22 00:24:12+00:00', 'masked_author': 'username_8', 'text': 'That sounds reasonable @username_4!', 'title': None, 'type': 'comment'}
 {'action': 'closed', 'author': 'phillipj', 'comment_id': None, 'datetime': '2016-03-23 17:07:51+00:00', 'masked_author': 'username_10', 'text': '', 'title': None, 'type': 'issue'}
 {'action': 'created', 'author': 'phillipj', 'comment_id': 200444969.0, 'datetime': '2016-03-23 17:07:51+00:00', 'masked_author': 'username_10', 'text': 'Looking forward to see the site live :+1: \r\n\r\nClosing this for now as the microsite announcement has been made, and further discussions should be held in the [nodejs/foundation.nodejs.org](https://github.com/nodejs/foundation.nodejs.org) repo.', 'title': None, 'type': 'comment'}]","<issue_start><issue_comment>Title: New Foundation Microsite
username_0: Heya,

It has been a bit problematic having some of the foundation content on the regular website because the contribution flow is a bit too developer specific for people from marketing and PR to edit the content. Examples of this content are:

* Press Releases (currently https://nodejs.org/en/foundation/announcements/)
* ""In the News"" articles (currently https://nodejs.org/en/foundation/in-the-news/ which is a JS load in from a spreadsheet to workaround this)
* Member List which needs to be updated in lock step with new member announcements (https://nodejs.org/en/foundation/members/)

There's also new content coming up like case studies that need a place to go.

I've spent a lot of time trying to find an editor or some kind of workflow that makes it usable to create and edit content on the regular website but there just isn't. There's a few good markdown editors but the yaml metadata at the top of pages is a pretty difficult hill to climb.

Ideally we would keep the contribution flow for design, structure and hosting to be friendly to the developer community but with an integrated content editor that is usable by non-programmers.

Enter KeystoneJS http://keystonejs.com/ , which is the best CMS I can find written in Node.js :)

The marketing and PR people have tested out the demo and find it suitable and it's also relatively simple for developers to edit structure and design.

@nodejs/build will need to verify that we can easily host and auto-deploy this.
<issue_comment>username_1: Is there no way to adapt prose.io? http://prose.io/#about https://github.com/prose/prose

The metadata looks pretty much like what jekyll uses and that's handled already by prose.
<issue_comment>username_0: @username_1 the problem isn't just editing the metadata, it's that there's a bunch of boilerplate metadata that you need to understand in order to add any content. I tried to get prose to work, I tried all of the markdown editors, and it just isn't a good flow, especially for editing content.
<issue_comment>username_2: @username_0 I'm concerned that putting the content in Mongo (via KeystoneJS or whatever) with a system that needs logins doesn't offer a place for the community to iterate/collaborate on the content before and after publishing.

...maybe, in this case, the Foundation content is solely owned and controlled by Marketing/PR..?
<issue_comment>username_3: I am curios how the Marketing and PR people at the Foundation fits in with the open and collaborative effort by the Evangelism and Website working groups? Will Marketing and PR take over all responsibilities for publishing content on the nodejs.org website in the future?
<issue_comment>username_0: @username_2 ya, this content is primarily, if not entirely, created and edited by marketing/PR, who currently can't collaborate in the existing website (to date I've had to do almost all the writing and edits myself).

@username_3 So, for the last 6 months both Evangelism and Marketing/PR have been working in an independent but complimentary way. Evangelism posts to the Node.js blog (they actually create more content than Marketing/PR) and routinely gives the @nodejs tweets to publish and promote. 

We've actually already separated the voices somewhat. The Project/Community has the main blog voice and Marketing/Industry voice is on a Medium blog. The place this gets mixed up is the Press Releases that end up in the main blog, and that's only because when we give that to press it needs to a nodejs.org address on it. I would like to clean this up because when the **project** tells people they need to install a security update it means more than the **marketing** voice telling them the same thing.

But, to be clear, nothing Evangelism is doing now will be taken on by Marketing/PR. These will remain parallel and complimentary efforts.

Also, the work here is separated but we've actually been working to bridge the communication between Evangelism and Marketing/PR. Julian was invited to participate in the Marketing Committee in order to bring in a perspective from Evangelism and i18n.
<issue_comment>username_4: @username_0 quick q: searched for a marketing team but couldn't find any members? https://github.com/orgs/nodejs/teams?utf8=‚úì&query=marketing. Is this separate from github?
<issue_comment>username_0: @username_4 A few of them have GitHub accounts but mostly aren't on GitHub :) These are people employed by the Linux Foundation to do this work for the Node.js Foundation in coordination with the Marketing Committee (which is a foundation member committee).
<issue_comment>username_5: /cc @jedwatson who is behind KeystoneJS.

I'm concerned that the Build team may not have the stomach to administer or be responsible for a Mongo deployment but reckon that we might be able to find a mutually beneficial arrangement with Jed & Keystone, either by their contributing to the Build team to help shoulder responsibility or perhaps even taking that load entirely. It'd be good for Keystone _(I have no problem with a ""powered by Keystone"" FWIW)_ and the usability is absolutely a problem for non-technical people that we need to fix.
<issue_comment>username_6: Thanks @username_0! Stoked to hear that.

:+1: Just had a quick chat with the team at Thinkmill, would love to take this on. We're happy to support the deployment and help make sure things go smoothly. Also on board for design / development if that helps.

FWIW we're also embarking on a project to implement database adapters in Keystone (to remove the hard dependency on MongoDB) and are looking initially at Postgres and RethingDB. No promises on timing but we can look at the Mongo deployment as a short-term thing. We also have production systems replicating to Postgres by tailing the oplog, in place for analytics, which has been quite successful and means anything we do don't be locked into the Mongo platform.
<issue_comment>username_0: The whole setup will end up behind Cloudflare so we could use a remotely hosted MongoDB if there is a reasonable hosting service. Any performance issues we might be worried about are probably negligible given it'll be behind a cache.
<issue_comment>username_6: We generally use https://mlab.com for hosting with servers at AWS
<issue_comment>username_2: +1 on [mlab](https://mlab.com) (prev known as MongoLab). I've had great success with them... even with their FREE version. They been handling a ton of Tinder's load.
<issue_comment>username_7: mlab will work if it's def going to be mongo. What about the host? I using Digital Ocean for some smaller (and budget conscious) projects/ They do have nice API's to work with.
<issue_comment>username_0: @username_7 the build group has donated compute resources across several providers, including digitalocean.
<issue_comment>username_0: Created a new repo https://github.com/nodejs/foundation.nodejs.org

I signed up for mlab for the foundation, I can share the credentials with the build team.

@username_6 the site.css doesn't seem to be loading, wondering what the deal is there.
<issue_comment>username_8: I [submitted a PR](https://github.com/nodejs/foundation.nodejs.org/pull/1) checking `site.css` into git so the next person won't have to manually start the stylus compilation after the first clone. That should solve the problem!
<issue_comment>username_4: @username_8 wouldn't that mean that the site.css needs to be updated every time a change is made? Looking at the gulpfile I'm getting the impression that it should handle spawning `keystone.js` (and generate css).
<issue_comment>username_8: Yes the gulpfile handles all of that, but you need to change and save one of the `.styl` files for it to compile the CSS. When you first run `$ gulp` in your terminal, it doesn't compile.

I checked the `site.css` into git so new developers can start immediately without having to save one of the files to get the CSS, the other option would be to run the `stylus` task once when `$ gulp` is started.
<issue_comment>username_9: that seems wrong to me. I've done work on the website, without touching styles, and never needed to manually run stylus.
<issue_comment>username_8: You don't need to manually run stylus, it runs automatically when you change styles in `.styl` files! Because no styles had been changed before, the stylus compilation had never happened and the `site.css` file didn't exist.
<issue_comment>username_9: @username_8 MY BAD... I thought you were talking about nodejs.org
<issue_comment>username_4: How about adding a check in whatever runner that just calls compile if style.css doesn't exist then? I don't think checking a file that will get out of date quickly is the way here.
<issue_comment>username_8: That sounds reasonable @username_4!<issue_closed>
<issue_comment>username_10: Looking forward to see the site live :+1: 

Closing this for now as the microsite announcement has been made, and further discussions should be held in the [nodejs/foundation.nodejs.org](https://github.com/nodejs/foundation.nodejs.org) repo."
