MediaCrush/MediaCrush,54498461,666,,"[{'action': 'opened', 'author': 'wodim', 'comment_id': None, 'datetime': '2015-01-15 20:17:04+00:00', 'masked_author': 'username_0', 'text': '', 'title': 'Microphone keeps recording after clicking the ""stop"" button', 'type': 'issue'}
 {'action': 'created', 'author': 'jleclanche', 'comment_id': 70154198.0, 'datetime': '2015-01-15 20:19:17+00:00', 'masked_author': 'username_1', 'text': 'Shit, they found the backdoor. Run!', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'wodim', 'comment_id': 70155204.0, 'datetime': '2015-01-15 20:25:15+00:00', 'masked_author': 'username_0', 'text': 'mfw #666', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'jleclanche', 'comment_id': 70155450.0, 'datetime': '2015-01-15 20:26:52+00:00', 'masked_author': 'username_1', 'text': 'Literally not a coincidence', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'SirCmpwn', 'comment_id': 70158547.0, 'datetime': '2015-01-15 20:47:10+00:00', 'masked_author': 'username_2', 'text': 'Yeah, but it doesn\'t keep ""recording"" into an upload. This isn\'t really the wrong behavior. Feel free to send a PR that changes this but I don\'t think anyone really cares.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'wodim', 'comment_id': 70197451.0, 'datetime': '2015-01-16 02:00:49+00:00', 'masked_author': 'username_0', 'text': 'I can understand you do not want to fix it, but this is the wrong behaviour, since 1) the webpage is still recording even if it is not going to upload that part, 2) Chrome shows a red dot in the tab list which will confuse users, 3) Chrome (via Windows, I guess) lowers the volume of anything that is playing while the webpage it is still recording.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'jleclanche', 'comment_id': 70214544.0, 'datetime': '2015-01-16 06:41:11+00:00', 'masked_author': 'username_1', 'text': ""@username_2 He's right, there's a lot of reason why this should be fixed. Battery usage as well for example."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'SirCmpwn', 'comment_id': 70214579.0, 'datetime': '2015-01-16 06:41:37+00:00', 'masked_author': 'username_2', 'text': ""What I'm saying is send a pull request cause I'm not doing it."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'wodim', 'comment_id': 70227561.0, 'datetime': '2015-01-16 09:21:47+00:00', 'masked_author': 'username_0', 'text': 'No. You said that it was not the wrong behaviour and that users do not care about it.', 'title': None, 'type': 'comment'}]","<issue_start><issue_comment>Title: Microphone keeps recording after clicking the ""stop"" button
username_0: 
<issue_comment>username_1: Shit, they found the backdoor. Run!
<issue_comment>username_0: mfw #666
<issue_comment>username_1: Literally not a coincidence
<issue_comment>username_2: Yeah, but it doesn't keep ""recording"" into an upload. This isn't really the wrong behavior. Feel free to send a PR that changes this but I don't think anyone really cares.
<issue_comment>username_0: I can understand you do not want to fix it, but this is the wrong behaviour, since 1) the webpage is still recording even if it is not going to upload that part, 2) Chrome shows a red dot in the tab list which will confuse users, 3) Chrome (via Windows, I guess) lowers the volume of anything that is playing while the webpage it is still recording.
<issue_comment>username_1: @username_2 He's right, there's a lot of reason why this should be fixed. Battery usage as well for example.
<issue_comment>username_2: What I'm saying is send a pull request cause I'm not doing it.
<issue_comment>username_0: No. You said that it was not the wrong behaviour and that users do not care about it."
datacommonsorg/website,718709654,546,,"[{'action': 'opened', 'author': 'rvguha', 'comment_id': None, 'datetime': '2020-10-10 21:50:59+00:00', 'masked_author': 'username_0', 'text': 'Reminder to make sure international rankings work', 'title': 'International rankings', 'type': 'issue'}
 {'action': 'created', 'author': 'beets', 'comment_id': 707863088.0, 'datetime': '2020-10-13 16:32:40+00:00', 'masked_author': 'username_1', 'text': 'some to check:\r\n- [ ] https://staging.datacommons.org/ranking/Amount_EconomicActivity_GrossNationalIncome_PurchasingPowerParity_PerCapita/Country/asia?h=country%2FMYS&unit=%24\r\n- [ ] https://staging.datacommons.org/ranking/LifeExpectancy_Person/Country?h=country%2FMYS\r\n- [ ] https://staging.datacommons.org/ranking/Amount_Emissions_CarbonDioxide_PerCapita/Country/asia?h=country%2FCHN\r\n- [ ] https://staging.datacommons.org/ranking/CumulativeCount_MedicalConditionIncident_COVID_19_PatientDeceased/Country?pc', 'title': None, 'type': 'comment'}
 {'action': 'closed', 'author': 'beets', 'comment_id': None, 'datetime': '2020-10-22 19:27:08+00:00', 'masked_author': 'username_1', 'text': '', 'title': None, 'type': 'issue'}
 {'action': 'created', 'author': 'beets', 'comment_id': 714711568.0, 'datetime': '2020-10-22 19:27:08+00:00', 'masked_author': 'username_1', 'text': 'those are all fixed!', 'title': None, 'type': 'comment'}]","<issue_start><issue_comment>Title: International rankings
username_0: Reminder to make sure international rankings work
<issue_comment>username_1: some to check:
- [ ] https://staging.datacommons.org/ranking/Amount_EconomicActivity_GrossNationalIncome_PurchasingPowerParity_PerCapita/Country/asia?h=country%2FMYS&unit=%24
- [ ] https://staging.datacommons.org/ranking/LifeExpectancy_Person/Country?h=country%2FMYS
- [ ] https://staging.datacommons.org/ranking/Amount_Emissions_CarbonDioxide_PerCapita/Country/asia?h=country%2FCHN
- [ ] https://staging.datacommons.org/ranking/CumulativeCount_MedicalConditionIncident_COVID_19_PatientDeceased/Country?pc<issue_closed>
<issue_comment>username_1: those are all fixed!"
corona-warn-app/cwa-website,742970768,573,"{'number': 573.0, 'repo': 'cwa-website', 'user_login': 'corona-warn-app'}","[{'action': 'opened', 'author': 'MikeMcC399', 'comment_id': None, 'datetime': '2020-11-14T09:48:43Z', 'masked_author': 'username_0', 'text': 'Closes #555 where draft texts were discussed with @username_1.\r\nMany thanks for your help and collaboration!\r\n\r\nPlease use as you see fit!\r\n\r\nThe previous texts for\r\nhttps://www.coronawarn.app/en/faq/#test_in_other_country\r\nhttps://www.coronawarn.app/de/faq/#test_in_other_country\r\nwere in place before the EU integration took place in V1.5 of the app. With the integration it is useful now to:\r\n- point to the list of apps from other countries, so that users have access to the download links of these other apps\r\nhttps://ec.europa.eu/info/live-work-travel-eu/health/coronavirus-response/travel-during-coronavirus-pandemic/mobile-contact-tracing-apps-eu-member-states_de\r\n- refer to the FAQ \r\nhttps://www.coronawarn.app/de/faq/#interoperability_countries\r\nwhere users can read for which countries keys are available in the German backend.', 'title': 'Change FAQ test_in_other_country for EU integration', 'type': 'issue'}
 {'action': 'created', 'author': 'heinezen', 'comment_id': 727594044.0, 'datetime': '2020-11-15 16:08:04+00:00', 'masked_author': 'username_1', 'text': 'Also: have you tested the website locally using npm?', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'MikeMcC399', 'comment_id': 727610719.0, 'datetime': '2020-11-15 18:01:17+00:00', 'masked_author': 'username_0', 'text': ""@username_1 \r\nThanks for the review, which I will follow up on tomorrow.\r\n\r\nI wouldn't know how to test the website locally using npm. Is that something I could do without previous experience?"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'heinezen', 'comment_id': 727612514.0, 'datetime': '2020-11-15 18:14:29+00:00', 'masked_author': 'username_1', 'text': '@username_0 The README mentions it here: https://github.com/corona-warn-app/cwa-website#getting-started\r\n\r\nYou would need to install nodejs and follow the instructions from the README in the terminal/Powershell. This will spawn a local server with the website that you can view to check if the formatting is correct. But it is not required, I can also do that for you.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'MikeMcC399', 'comment_id': 727841145.0, 'datetime': '2020-11-16 09:05:46+00:00', 'masked_author': 'username_0', 'text': ""@username_1 \r\nI have made the suggested text changes. Thank you again for your comments!\r\n\r\nI added  target='_blank' rel='noopener noreferrer' to the links. It is more convenient to open external pages in a separate tab (or window), and many of the other links in the FAQ page use this mechanism as well.\r\n\r\nThank you for your pointer to npm in the README. I was able to install and test with npm.\r\n\r\nI will complete the commits and put up for review again shortly."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'MikeMcC399', 'comment_id': 727894522.0, 'datetime': '2020-11-16 10:39:27+00:00', 'masked_author': 'username_0', 'text': '@username_1 \r\nI have made the text changes. \r\n\r\nI also made the local FAQ link relative so when it popped up during testing it opened http://localhost:8000/en/faq/#interoperability_countries\r\n\r\nHere are screen shots of the article in English and German, plus screen shots of the sites it is linked to:\r\n[573 test_in_other_country.zip](https://github.com/corona-warn-app/cwa-website/files/5545667/573.test_in_other_country.zip)\r\n\r\nI hope this is all OK. I am still feeling my way through the publishing process here (with your help!).', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'MikeMcC399', 'comment_id': 728207887.0, 'datetime': '2020-11-16 17:25:04+00:00', 'masked_author': 'username_0', 'text': 'For convenience in reviewing and approving, here are the screen shots from the zip file attached to the previous comment:\r\n\r\n---\r\n\r\n![EN test_in_other_country](https://user-images.githubusercontent.com/66998419/99286126-b97a1f00-2838-11eb-8b12-51229ee8e347.jpg)\r\n\r\n---\r\n\r\n![DE test_in_other_country](https://user-images.githubusercontent.com/66998419/99286151-bed76980-2838-11eb-8802-0d6204e7f71c.jpg)', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'MikeMcC399', 'comment_id': 728210481.0, 'datetime': '2020-11-16 17:29:11+00:00', 'masked_author': 'username_0', 'text': '@username_2 \r\nSince you commented in https://github.com/corona-warn-app/cwa-website/issues/447#issuecomment-710079161 about the continued validity of the FAQ entry i.e. positive tests only go into app of country where tested, you might like to review this PR?', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'MikeMcC399', 'comment_id': 728229723.0, 'datetime': '2020-11-16 18:03:53+00:00', 'masked_author': 'username_0', 'text': 'I have pushed a dummy change to add my correct github e-mail address. Unfortunately my git client was incorrectly configured for the previous two pushes. Hopefully the commits can be squashed during the final merge (assuming no further changes are requested).', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'loki-cui', 'comment_id': 728768274.0, 'datetime': '2020-11-17 08:22:47+00:00', 'masked_author': 'username_2', 'text': ""Hi all - we've just received the following text proposal from the RKI:\r\n\r\n### ALT\r\nKann ich positive Testergebnisse aus anderen Ländern eingeben?\r\nNein, das ist leider nicht möglich. Jedes positive Test-Ergebnis, das in die App geladen wird, muss zuvor von Laboren überprüft worden sein. Diese stellen sicher, dass kein Missbrauch stattfindet und keine falsche Ergebnisse eingetragen werden. Dazu sind zur Zeit nur Labore in Deutschland angeschlossen. Sie können also kein positives Testergebnis aus anderen Ländern, zum Beispiel aus den Niederlanden, eingeben.\r\n\r\n\r\n### NEU\r\n**Kann ich positive Testergebnisse aus anderen Ländern in die Corona-Warn-App eingeben?**\r\nWenn Sie sich im EU-Ausland oder in einem [dieser Staaten](https://www.rki.de/DE/Content/InfAZ/N/Neuartiges_Coronavirus/Tests.html) befinden und dort einen molekularbiologischen Test (PCR-Test) gemacht haben, der positiv ist, können Sie diesen in Ihrer Corona-Warn-App hochladen. Dafür müssen Sie sich unter der Hotline +49 800 7540002 verifizieren lassen. Sie erhalten eine 10-stellige TAN, mit der das Testergebnis in der App registriert werden kann. Achtung: Die TAN ist nur eine Stunde gültig!\r\n\r\n**Can I enter positive test results from other countries into the Corona-Warn-App?**\r\nIf you are in another EU country or in one of [these countries](https://www.rki.de/DE/Content/InfAZ/N/Neuartiges_Coronavirus/Tests.html) and have made a molecular biological test (PCR test) which is positive, you can upload it to the Corona-Warn-App. To do so, it is necessary to verify your identity by calling the hotline +49 800 7540002. You will receive a 10-digit TAN with which the test result can be registered in the app. Attention: The TAN is only valid for one hour!"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'loki-cui', 'comment_id': 728768872.0, 'datetime': '2020-11-17 08:24:07+00:00', 'masked_author': 'username_2', 'text': ""@username_0: Thank you nevertheless for your suggestion. I didn't know that the RKI was working on this as well..."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'svengabr', 'comment_id': 728779155.0, 'datetime': '2020-11-17 08:44:43+00:00', 'masked_author': 'username_3', 'text': 'Sorry, @username_0 but I need to decline this pull request as the RKI provided an alternate text.\r\n\r\nSee https://github.com/corona-warn-app/cwa-website/pull/573#issuecomment-728768274\r\n\r\nIf you want you can create a new pull request, if not, we will to this tomorrow.\r\n\r\nThanks for your understanding!', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'MikeMcC399', 'comment_id': 728782001.0, 'datetime': '2020-11-17 08:49:56+00:00', 'masked_author': 'username_0', 'text': ""@username_2 \r\nIt's good news that foreign PCR tests are allowed via the TAN hotline! \r\n\r\n@username_3 \r\nI will create a new PR today based on the text from @username_2 / RKI. Since I already started this and I now have just a little experience I may as well use it. 😀 No problem about rejecting this PR!"", 'title': None, 'type': 'comment'}]","<issue_start><issue_comment>Title: Change FAQ test_in_other_country for EU integration
username_0: Closes #555 where draft texts were discussed with @username_1.
Many thanks for your help and collaboration!

Please use as you see fit!

The previous texts for
https://www.coronawarn.app/en/faq/#test_in_other_country
https://www.coronawarn.app/de/faq/#test_in_other_country
were in place before the EU integration took place in V1.5 of the app. With the integration it is useful now to:
- point to the list of apps from other countries, so that users have access to the download links of these other apps
https://ec.europa.eu/info/live-work-travel-eu/health/coronavirus-response/travel-during-coronavirus-pandemic/mobile-contact-tracing-apps-eu-member-states_de
- refer to the FAQ 
https://www.coronawarn.app/de/faq/#interoperability_countries
where users can read for which countries keys are available in the German backend.
<issue_comment>username_1: Also: have you tested the website locally using npm?
<issue_comment>username_0: @username_1 
Thanks for the review, which I will follow up on tomorrow.

I wouldn't know how to test the website locally using npm. Is that something I could do without previous experience?
<issue_comment>username_1: @username_0 The README mentions it here: https://github.com/corona-warn-app/cwa-website#getting-started

You would need to install nodejs and follow the instructions from the README in the terminal/Powershell. This will spawn a local server with the website that you can view to check if the formatting is correct. But it is not required, I can also do that for you.
<issue_comment>username_0: @username_1 
I have made the suggested text changes. Thank you again for your comments!

I added  target='_blank' rel='noopener noreferrer' to the links. It is more convenient to open external pages in a separate tab (or window), and many of the other links in the FAQ page use this mechanism as well.

Thank you for your pointer to npm in the README. I was able to install and test with npm.

I will complete the commits and put up for review again shortly.
<issue_comment>username_0: @username_1 
I have made the text changes. 

I also made the local FAQ link relative so when it popped up during testing it opened http://localhost:8000/en/faq/#interoperability_countries

Here are screen shots of the article in English and German, plus screen shots of the sites it is linked to:
[573 test_in_other_country.zip](https://github.com/corona-warn-app/cwa-website/files/5545667/573.test_in_other_country.zip)

I hope this is all OK. I am still feeling my way through the publishing process here (with your help!).
<issue_comment>username_0: For convenience in reviewing and approving, here are the screen shots from the zip file attached to the previous comment:

---

![EN test_in_other_country](https://user-images.githubusercontent.com/66998419/99286126-b97a1f00-2838-11eb-8b12-51229ee8e347.jpg)

---

![DE test_in_other_country](https://user-images.githubusercontent.com/66998419/99286151-bed76980-2838-11eb-8802-0d6204e7f71c.jpg)
<issue_comment>username_0: @username_2 
Since you commented in https://github.com/corona-warn-app/cwa-website/issues/447#issuecomment-710079161 about the continued validity of the FAQ entry i.e. positive tests only go into app of country where tested, you might like to review this PR?
<issue_comment>username_0: I have pushed a dummy change to add my correct github e-mail address. Unfortunately my git client was incorrectly configured for the previous two pushes. Hopefully the commits can be squashed during the final merge (assuming no further changes are requested).
<issue_comment>username_2: Hi all - we've just received the following text proposal from the RKI:

### ALT
Kann ich positive Testergebnisse aus anderen Ländern eingeben?
Nein, das ist leider nicht möglich. Jedes positive Test-Ergebnis, das in die App geladen wird, muss zuvor von Laboren überprüft worden sein. Diese stellen sicher, dass kein Missbrauch stattfindet und keine falsche Ergebnisse eingetragen werden. Dazu sind zur Zeit nur Labore in Deutschland angeschlossen. Sie können also kein positives Testergebnis aus anderen Ländern, zum Beispiel aus den Niederlanden, eingeben.


### NEU
**Kann ich positive Testergebnisse aus anderen Ländern in die Corona-Warn-App eingeben?**
Wenn Sie sich im EU-Ausland oder in einem [dieser Staaten](https://www.rki.de/DE/Content/InfAZ/N/Neuartiges_Coronavirus/Tests.html) befinden und dort einen molekularbiologischen Test (PCR-Test) gemacht haben, der positiv ist, können Sie diesen in Ihrer Corona-Warn-App hochladen. Dafür müssen Sie sich unter der Hotline +49 800 7540002 verifizieren lassen. Sie erhalten eine 10-stellige TAN, mit der das Testergebnis in der App registriert werden kann. Achtung: Die TAN ist nur eine Stunde gültig!

**Can I enter positive test results from other countries into the Corona-Warn-App?**
If you are in another EU country or in one of [these countries](https://www.rki.de/DE/Content/InfAZ/N/Neuartiges_Coronavirus/Tests.html) and have made a molecular biological test (PCR test) which is positive, you can upload it to the Corona-Warn-App. To do so, it is necessary to verify your identity by calling the hotline +49 800 7540002. You will receive a 10-digit TAN with which the test result can be registered in the app. Attention: The TAN is only valid for one hour!
<issue_comment>username_2: @username_0: Thank you nevertheless for your suggestion. I didn't know that the RKI was working on this as well...
<issue_comment>username_3: Sorry, @username_0 but I need to decline this pull request as the RKI provided an alternate text.

See https://github.com/corona-warn-app/cwa-website/pull/573#issuecomment-728768274

If you want you can create a new pull request, if not, we will to this tomorrow.

Thanks for your understanding!
<issue_comment>username_0: @username_2 
It's good news that foreign PCR tests are allowed via the TAN hotline! 

@username_3 
I will create a new PR today based on the text from @username_2 / RKI. Since I already started this and I now have just a little experience I may as well use it. 😀 No problem about rejecting this PR!"
cake-build/website,646982519,931,"{'number': 931.0, 'repo': 'website', 'user_login': 'cake-build'}","[{'action': 'opened', 'author': 'pascalberger', 'comment_id': None, 'datetime': '2020-06-28T18:43:52Z', 'masked_author': 'username_0', 'text': 'Builds on top of #929. Once #929 is merged this PR needs to be rebased on `master`.\r\n\r\n- Add documentation how to obtain example bootstrapper for .NET Framework runner, previously available in the [Setting Up A New Project](https://cakebuild.net/docs/tutorials/setting-up-a-new-project) page.\r\n- Merge tutorial about possibility to extend bootstrapper, but get rid of concrete example, since it is quite specific and also out of date compared with current bootstrapping scripts.\r\n- Integrate tutorial about PowerShell security. \r\n\r\nPart of #878', 'title': 'Restructure documentation for bootstrappers', 'type': 'issue'}
 {'action': 'created', 'author': 'gep13', 'comment_id': 655691626.0, 'datetime': '2020-07-08 18:45:58+00:00', 'masked_author': 'username_1', 'text': '@username_0 are you in a position to rebase this PR?  Thanks', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'pascalberger', 'comment_id': 655697559.0, 'datetime': '2020-07-08 18:58:33+00:00', 'masked_author': 'username_0', 'text': '@username_1 Rebased and ready for review', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'gep13', 'comment_id': 655725828.0, 'datetime': '2020-07-08 19:59:59+00:00', 'masked_author': 'username_1', 'text': '@username_0 your changes have been merged, thanks for your contribution 👍', 'title': None, 'type': 'comment'}]","<issue_start><issue_comment>Title: Restructure documentation for bootstrappers
username_0: Builds on top of #929. Once #929 is merged this PR needs to be rebased on `master`.

- Add documentation how to obtain example bootstrapper for .NET Framework runner, previously available in the [Setting Up A New Project](https://cakebuild.net/docs/tutorials/setting-up-a-new-project) page.
- Merge tutorial about possibility to extend bootstrapper, but get rid of concrete example, since it is quite specific and also out of date compared with current bootstrapping scripts.
- Integrate tutorial about PowerShell security. 

Part of #878
<issue_comment>username_1: @username_0 are you in a position to rebase this PR?  Thanks
<issue_comment>username_0: @username_1 Rebased and ready for review
<issue_comment>username_1: @username_0 your changes have been merged, thanks for your contribution 👍"
AdoptOpenJDK/openjdk-website,850079096,966,"{'number': 966.0, 'repo': 'openjdk-website', 'user_login': 'AdoptOpenJDK'}","[{'action': 'opened', 'author': 'Apurwa96', 'comment_id': None, 'datetime': '2021-04-05T05:17:12Z', 'masked_author': 'username_0', 'text': 'The Windows installation instructions found at https://adoptopenjdk.net/installation.html#x64_win-jdk contains information to use unzip to extract the downloaded archive.\r\nUnfortunately, a standard installation of Windows does not contain the unzip tool, either need to go through PowerShell (Expand-Archive), Windows Explorer or a 3rd party option.\r\n\r\nThe problem with the above solution was:\r\nStep 1 says to start cmd\r\nStep 3 used PowerShell commands\r\nStep 4 uses cmd commands\r\n\r\nChanged step 3 to invoke powershell like:\r\n\r\nPrevious command: \r\nExpand-Archive -Path OpenJDK8U-jdk_x64_windows_hotspot_8u202b08.zip -DestinationPath .\r\n\r\nChanged to command:\r\npowershell -Command Expand-Archive -Path OpenJDK8U-jdk_x64_windows_hotspot_8u202b08.zip -DestinationPath .', 'title': 'Changed Step 3, added powershell -Command', 'type': 'issue'}]","<issue_start><issue_comment>Title: Changed Step 3, added powershell -Command
username_0: The Windows installation instructions found at https://adoptopenjdk.net/installation.html#x64_win-jdk contains information to use unzip to extract the downloaded archive.
Unfortunately, a standard installation of Windows does not contain the unzip tool, either need to go through PowerShell (Expand-Archive), Windows Explorer or a 3rd party option.

The problem with the above solution was:
Step 1 says to start cmd
Step 3 used PowerShell commands
Step 4 uses cmd commands

Changed step 3 to invoke powershell like:

Previous command: 
Expand-Archive -Path OpenJDK8U-jdk_x64_windows_hotspot_8u202b08.zip -DestinationPath .

Changed to command:
powershell -Command Expand-Archive -Path OpenJDK8U-jdk_x64_windows_hotspot_8u202b08.zip -DestinationPath ."
ethereum/ethereum-org-website,1086211941,4868,,"[{'action': 'opened', 'author': 'solarpunklabs', 'comment_id': None, 'datetime': '2021-12-21 20:35:54+00:00', 'masked_author': 'username_0', 'text': ""The history of the Ethereum white paper is not analogous to Nakamoto’s Bitcoin white paper. Bitcoin’s white paper is traditionally presented in Nakamoto’s original format: a[ PDF document](https://bitcoin.org/bitcoin.pdf) produced in [OpenOffice](https://tex.stackexchange.com/questions/306754/was-anything-in-satoshi-nakamotos-original-bitcoin-paper-compiled-in-latex) and self-hosted on bitcoin.org. This has ensured the document is understood to be “fixed.” In contrast, the Ethereum white paper has been treated as an evolving document.\r\n\r\nThis “evolving” white paper happens in two ways. \r\n\r\nFirst, Vitalik wrote and disseminated two white papers. Second, numerous (well-intentioned) contributors have fixed typos, altered syntax, improved explanations, updated technical changes, and so forth. This means it is not obvious what the “canonical” white paper is. This is not necessarily a problem in many contexts - e.g. the Ethereum beginner - but it is a problem in a historical and academic sense. The top result on Google Scholar for the Ethereum white paper is currently a [Polish translation](https://scholar.google.com/scholar?hl=en&as_sdt=0%2C5&q=ethereum+whitepaper&btnG=) and with no English-language result. The top result on a general Google search returns the website version, but also some unofficial PDF sources, e.g. [here](https://whitepaper.io/coin/ethereum). This also gets you, in a roundabout way, to Vitalik’s Google Scholar page and the [same PDF](https://scholar.google.co.kr/citations?view_op=view_citation&hl=en&user=DLP9gTAAAAAJ&citation_for_view=DLP9gTAAAAAJ:IjCSPb-OGe4C) from another source. \r\n\r\nLet’s first address the 'two papers' issue. The first is the version Vitalik wrote in November, 2013. Let’s call this the proto-white paper. In the Ethereum announcement email - sent to a small number of prospective collaborators - we find a link to the proto-white paper on Vitalik’s personal website, but [no archive](http://vbuterin.org/ethereum.html) of this page exists. The email is titled: ‘Introducing Ethereum: a generalized smart contract/DAC platform.’\r\n\r\nGiven the time that passes between this original email and the earliest archived version on the ethereum.org website we can assume there were no major changes, though probably some minor ones. The earliest archived version of the proto-white paper on the ethereum.org website is [January 26, 2014 ](https://web.archive.org/web/20140126001912/http://www.ethereum.org/ethereum.html)and bears the title ‘Ethereum: A Next-Generation Smart Contract and Decentralized Application Platform.’ \r\n\r\nThe proto-white paper opens with a brief discussion of the growing interest in new blockchain applications beyond Bitcoin’s. It then discusses the limitations of then current attempts to expand the blockchain application in detail, with reference to Colored Coins and Metacoins specifically, as mentioned in the announcement email. We know from [histories of Ethereum](https://www.harpercollins.com/products/the-infinite-machine-camila-russo?variant=32123333836834) that Buterin was working in and around these projects in the lead up to conceiving Ethereum. Another interesting feature of this proto-white paper is the inclusion of a section on Philosophy that outlines some design principles behind Ethereum. These design principles were used on the website and other documents from time to time and even made a brief return to the white paper itself in [2018](https://github.com/ethereum/wiki/wiki/White-Paper/75809d8b3a6ff85ac82b52418e2c10fe7d9b6f8c). Overall, this version is quite technical and it is not surprising it was simplified for a general audience. \r\n\r\nLet’s call the second version the canonical version. In this version, the opening of the white paper discusses potential blockchain applications beyond Bitcoin as well and prior attempts to accomplish these are mentioned. But the major discussions of Colored Coins and Metacoins are now replaced by one about Bitcoin and the former are moved to a section on ‘Alternative Blockchain Applications.’ This version is much more readable and gently guides the reader from a recognition of potential blockchain applications in the opening toward why Bitcoin and prior alternatives cannot achieve them. \r\n\r\nThe canonical white paper was [committed](https://web.archive.org/web/20170507230432/https://github.com/ethereum/wiki/wiki/[English]-White-Paper/_history) on February 16, 2014 by early contributor [Stephan Tual](https://stephantual.com/). This version is hosted on Github, rather than hosted directly on the website. The canonical version first appears on the ethereum.org website as a snapshot on [February 22, 2014](https://web.archive.org/web/20140222035254/http://www.ethereum.org/), though our earliest archived version is [June 3, 2014](https://web.archive.org/web/20140603225656/https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-White-Paper). There is a migration to a new Wiki in and around [September 1, 2014](https://github.com/ethereum/wiki/wiki/White-Paper/_history?page=6). Vitalik makes a couple more contributions, but then stops. Vitalik has expressed to the ethereum.org team that the version that best represents his “final” intervention is the [December 10, 2014](https://github.com/ethereum/wiki/wiki/White-Paper/502e0e01355a42c8e6f5463c49cce496ae423179) version. The canonical white paper is tilted: ‘A Next-Generation Smart Contract and Decentralized Application Platform.’ The words Ethereum or white paper are not included. \r\n\r\nWith the goal of establishing a canonical version on the Ethereum white paper I believe two issues must be addressed: website and PDF. \r\n\r\nFor the website, I think the options are:\r\n\r\n(1) Leave the white paper “as is” on [December 10, 2014](https://github.com/ethereum/wiki/wiki/White-Paper/502e0e01355a42c8e6f5463c49cce496ae423179), but the images are missing, so that does not look good.\r\n(2) Keep “as is” on December 10, 2014,  but restore the images. \r\n(3) Keep “as is” on December 10, 2014, but restore the images and update the title. See my proposal below which discusses the title with more context. \r\n\r\nOptions (2) and (3) will require one final update. But then the white paper should be locked down. \r\n\r\nNext, a PDF version. If we look at the PDF of the white paper in circulation [here](https://whitepaper.io/coin/ethereum) and [here](https://scholar.google.co.kr/citations?view_op=view_citation&hl=en&user=DLP9gTAAAAAJ&citation_for_view=DLP9gTAAAAAJ:IjCSPb-OGe4C) we can see it bears the ethereum.org name. This PDF did exist on the ethereum.org website. It first appeared on [July 23rd 2014](https://web.archive.org/web/20140723210954/https://www.ethereum.org/pdfs/EthereumWhitePaper.pdf). The PDF version bears the title: \r\n\r\nEthereum White Paper \r\nA NEXT GENERATION SMART CONTRACT & DECENTRALIZED APPLICATION PLATFORM \r\nBy Vitalik Buterin.\r\n\r\nThe choices here are a little unusual. Ideally we would have a colon after ‘Ethereum White Paper:’ and even more ideally everything would not be in caps lock. Also the ampersand ‘&’ instead of the use of ‘and’ gives us a slightly different title from the canonical version.\r\n\r\nThe last snapshot I can find is [February 14, 2015](https://web.archive.org/web/20150214235110/https://www.ethereum.org/pdfs/EthereumWhitePaper.pdf). After that, we get dead links, 404 errors, and redirects. I am not sure why the PDF was removed, but at least we know this is where the circulating PDFs came from and that they are official versions, rather than bootlegs! \r\n\r\nFor the PDF, I think the options are:\r\n(1) Make no changes to the PDF and present it as it was on [January 31, 2015](https://web.archive.org/web/20150131133825/https://www.ethereum.org/pdfs/EthereumWhitePaper.pdf) (closest snapshot to [December 10, 2014](https://github.com/ethereum/wiki/wiki/White-Paper/502e0e01355a42c8e6f5463c49cce496ae423179) Github version). \r\n(2) Make slight changes to the title to make it look more formal. Then repost the PDF. \r\n\r\nI think ideally the title for both - if we choose to update - would be:\r\n\r\nEthereum White Paper: A Next-Generation Smart Contract and Decentralized Application Platform.\r\nBy Vitalik Buterin (2014).\r\n\r\nThe 2014 helps because the proto-white paper is 2013 and people sometimes cite 2013 as the white paper date. But we should be citing the 2014 canonical version and it helps to put the year clearly in the title.\r\n\r\nWhy the reversion? \r\n\r\nThe decision to host the paper on Github has had consequences. The most important implications of this decision are (in ascending order of importance):\r\nThe Github document has no pagination. This makes it difficult to cite formally. The PDFs have pagination, but don’t come from an official source. \r\nNeither has the year (2014). \r\nThe document has no static home and can move. This has happened at least a number of times in the past. There is no official stable source.\r\nGithub encourages a mindset where source code or documentation can be updated and maintained. This has encouraged well-intentioned users to, on occasion, alter the white paper. While the changes are usually benign, it is unusual to have a document of such potential historical importance be “live.”"", 'title': 'Formalising the Ethereum White Paper', 'type': 'issue'}
 {'action': 'created', 'author': 'samajammin', 'comment_id': 1032123893.0, 'datetime': '2022-02-08 01:39:49+00:00', 'masked_author': 'username_1', 'text': ""Thanks for this thoughtful post @username_2! Appreciate the time & energy you've put into this 🙏 \r\n\r\nI agree with your overall assessment.\r\n\r\nFor the website, I think (3) makes sense (assuming Vitalik doesn't have an issue with tweaking the title). I support fixing the broken images, as well as keeping the new images given they provide dark mode support (#2030).\r\n\r\nFor the PDF, I think (2) makes sense (assuming Vitalik doesn't have an issue with tweaking the title).\r\n\r\nI also agree that once we act on these changes, we should lock both down.\r\n\r\nI welcome input on this!"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'polarpunklabs', 'comment_id': 1032644871.0, 'datetime': '2022-02-08 14:04:55+00:00', 'masked_author': 'username_2', 'text': 'Thanks @username_1 \r\nThose are my favoured options too.', 'title': None, 'type': 'comment'}
 {'action': 'closed', 'author': 'polarpunklabs', 'comment_id': None, 'datetime': '2022-02-13 19:46:30+00:00', 'masked_author': 'username_2', 'text': '', 'title': None, 'type': 'issue'}
 {'action': 'reopened', 'author': 'polarpunklabs', 'comment_id': None, 'datetime': '2022-02-13 19:47:03+00:00', 'masked_author': 'username_2', 'text': ""The history of the Ethereum white paper is not analogous to Nakamoto’s Bitcoin white paper. Bitcoin’s white paper is traditionally presented in Nakamoto’s original format: a[ PDF document](https://bitcoin.org/bitcoin.pdf) produced in [OpenOffice](https://tex.stackexchange.com/questions/306754/was-anything-in-satoshi-nakamotos-original-bitcoin-paper-compiled-in-latex) and self-hosted on bitcoin.org. This has ensured the document is understood to be “fixed.” In contrast, the Ethereum white paper has been treated as an evolving document.\r\n\r\nThis “evolving” white paper happens in two ways. \r\n\r\nFirst, Vitalik wrote and disseminated two white papers. Second, numerous (well-intentioned) contributors have fixed typos, altered syntax, improved explanations, updated technical changes, and so forth. This means it is not obvious what the “canonical” white paper is. This is not necessarily a problem in many contexts - e.g. the Ethereum beginner - but it is a problem in a historical and academic sense. The top result on Google Scholar for the Ethereum white paper is currently a [Polish translation](https://scholar.google.com/scholar?hl=en&as_sdt=0%2C5&q=ethereum+whitepaper&btnG=) and with no English-language result. The top result on a general Google search returns the website version, but also some unofficial PDF sources, e.g. [here](https://whitepaper.io/coin/ethereum). This also gets you, in a roundabout way, to Vitalik’s Google Scholar page and the [same PDF](https://scholar.google.co.kr/citations?view_op=view_citation&hl=en&user=DLP9gTAAAAAJ&citation_for_view=DLP9gTAAAAAJ:IjCSPb-OGe4C) from another source. \r\n\r\nLet’s first address the 'two papers' issue. The first is the version Vitalik wrote in November, 2013. Let’s call this the proto-white paper. In the Ethereum announcement email - sent to a small number of prospective collaborators - we find a link to the proto-white paper on Vitalik’s personal website, but [no archive](http://vbuterin.org/ethereum.html) of this page exists. The email is titled: ‘Introducing Ethereum: a generalized smart contract/DAC platform.’\r\n\r\nGiven the time that passes between this original email and the earliest archived version on the ethereum.org website we can assume there were no major changes, though probably some minor ones. The earliest archived version of the proto-white paper on the ethereum.org website is [January 26, 2014 ](https://web.archive.org/web/20140126001912/http://www.ethereum.org/ethereum.html)and bears the title ‘Ethereum: A Next-Generation Smart Contract and Decentralized Application Platform.’ \r\n\r\nThe proto-white paper opens with a brief discussion of the growing interest in new blockchain applications beyond Bitcoin’s. It then discusses the limitations of then current attempts to expand the blockchain application in detail, with reference to Colored Coins and Metacoins specifically, as mentioned in the announcement email. We know from [histories of Ethereum](https://www.harpercollins.com/products/the-infinite-machine-camila-russo?variant=32123333836834) that Buterin was working in and around these projects in the lead up to conceiving Ethereum. Another interesting feature of this proto-white paper is the inclusion of a section on Philosophy that outlines some design principles behind Ethereum. These design principles were used on the website and other documents from time to time and even made a brief return to the white paper itself in [2018](https://github.com/ethereum/wiki/wiki/White-Paper/75809d8b3a6ff85ac82b52418e2c10fe7d9b6f8c). Overall, this version is quite technical and it is not surprising it was simplified for a general audience. \r\n\r\nLet’s call the second version the canonical version. In this version, the opening of the white paper discusses potential blockchain applications beyond Bitcoin as well and prior attempts to accomplish these are mentioned. But the major discussions of Colored Coins and Metacoins are now replaced by one about Bitcoin and the former are moved to a section on ‘Alternative Blockchain Applications.’ This version is much more readable and gently guides the reader from a recognition of potential blockchain applications in the opening toward why Bitcoin and prior alternatives cannot achieve them. \r\n\r\nThe canonical white paper was [committed](https://web.archive.org/web/20170507230432/https://github.com/ethereum/wiki/wiki/[English]-White-Paper/_history) on February 16, 2014 by early contributor [Stephan Tual](https://stephantual.com/). This version is hosted on Github, rather than hosted directly on the website. The canonical version first appears on the ethereum.org website as a snapshot on [February 22, 2014](https://web.archive.org/web/20140222035254/http://www.ethereum.org/), though our earliest archived version is [June 3, 2014](https://web.archive.org/web/20140603225656/https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-White-Paper). There is a migration to a new Wiki in and around [September 1, 2014](https://github.com/ethereum/wiki/wiki/White-Paper/_history?page=6). Vitalik makes a couple more contributions, but then stops. Vitalik has expressed to the ethereum.org team that the version that best represents his “final” intervention is the [December 10, 2014](https://github.com/ethereum/wiki/wiki/White-Paper/502e0e01355a42c8e6f5463c49cce496ae423179) version. The canonical white paper is tilted: ‘A Next-Generation Smart Contract and Decentralized Application Platform.’ The words Ethereum or white paper are not included. \r\n\r\nWith the goal of establishing a canonical version on the Ethereum white paper I believe two issues must be addressed: website and PDF. \r\n\r\nFor the website, I think the options are:\r\n\r\n(1) Leave the white paper “as is” on [December 10, 2014](https://github.com/ethereum/wiki/wiki/White-Paper/502e0e01355a42c8e6f5463c49cce496ae423179), but the images are missing, so that does not look good.\r\n(2) Keep “as is” on December 10, 2014,  but restore the images. \r\n(3) Keep “as is” on December 10, 2014, but restore the images and update the title. See my proposal below which discusses the title with more context. \r\n\r\nOptions (2) and (3) will require one final update. But then the white paper should be locked down. \r\n\r\nNext, a PDF version. If we look at the PDF of the white paper in circulation [here](https://whitepaper.io/coin/ethereum) and [here](https://scholar.google.co.kr/citations?view_op=view_citation&hl=en&user=DLP9gTAAAAAJ&citation_for_view=DLP9gTAAAAAJ:IjCSPb-OGe4C) we can see it bears the ethereum.org name. This PDF did exist on the ethereum.org website. It first appeared on [July 23rd 2014](https://web.archive.org/web/20140723210954/https://www.ethereum.org/pdfs/EthereumWhitePaper.pdf). The PDF version bears the title: \r\n\r\nEthereum White Paper \r\nA NEXT GENERATION SMART CONTRACT & DECENTRALIZED APPLICATION PLATFORM \r\nBy Vitalik Buterin.\r\n\r\nThe choices here are a little unusual. Ideally we would have a colon after ‘Ethereum White Paper:’ and even more ideally everything would not be in caps lock. Also the ampersand ‘&’ instead of the use of ‘and’ gives us a slightly different title from the canonical version.\r\n\r\nThe last snapshot I can find is [February 14, 2015](https://web.archive.org/web/20150214235110/https://www.ethereum.org/pdfs/EthereumWhitePaper.pdf). After that, we get dead links, 404 errors, and redirects. I am not sure why the PDF was removed, but at least we know this is where the circulating PDFs came from and that they are official versions, rather than bootlegs! \r\n\r\nFor the PDF, I think the options are:\r\n(1) Make no changes to the PDF and present it as it was on [January 31, 2015](https://web.archive.org/web/20150131133825/https://www.ethereum.org/pdfs/EthereumWhitePaper.pdf) (closest snapshot to [December 10, 2014](https://github.com/ethereum/wiki/wiki/White-Paper/502e0e01355a42c8e6f5463c49cce496ae423179) Github version). \r\n(2) Make slight changes to the title to make it look more formal. Then repost the PDF. \r\n\r\nI think ideally the title for both - if we choose to update - would be:\r\n\r\nEthereum White Paper: A Next-Generation Smart Contract and Decentralized Application Platform.\r\nBy Vitalik Buterin (2014).\r\n\r\nThe 2014 helps because the proto-white paper is 2013 and people sometimes cite 2013 as the white paper date. But we should be citing the 2014 canonical version and it helps to put the year clearly in the title.\r\n\r\nWhy the reversion? \r\n\r\nThe decision to host the paper on Github has had consequences. The most important implications of this decision are (in ascending order of importance):\r\nThe Github document has no pagination. This makes it difficult to cite formally. The PDFs have pagination, but don’t come from an official source. \r\nNeither has the year (2014). \r\nThe document has no static home and can move. This has happened at least a number of times in the past. There is no official stable source.\r\nGithub encourages a mindset where source code or documentation can be updated and maintained. This has encouraged well-intentioned users to, on occasion, alter the white paper. While the changes are usually benign, it is unusual to have a document of such potential historical importance be “live.”"", 'title': 'Standardising the Ethereum White Paper', 'type': 'issue'}]","<issue_start><issue_comment>Title: Formalising the Ethereum White Paper
username_0: The history of the Ethereum white paper is not analogous to Nakamoto’s Bitcoin white paper. Bitcoin’s white paper is traditionally presented in Nakamoto’s original format: a[ PDF document](https://bitcoin.org/bitcoin.pdf) produced in [OpenOffice](https://tex.stackexchange.com/questions/306754/was-anything-in-satoshi-nakamotos-original-bitcoin-paper-compiled-in-latex) and self-hosted on bitcoin.org. This has ensured the document is understood to be “fixed.” In contrast, the Ethereum white paper has been treated as an evolving document.

This “evolving” white paper happens in two ways. 

First, Vitalik wrote and disseminated two white papers. Second, numerous (well-intentioned) contributors have fixed typos, altered syntax, improved explanations, updated technical changes, and so forth. This means it is not obvious what the “canonical” white paper is. This is not necessarily a problem in many contexts - e.g. the Ethereum beginner - but it is a problem in a historical and academic sense. The top result on Google Scholar for the Ethereum white paper is currently a [Polish translation](https://scholar.google.com/scholar?hl=en&as_sdt=0%2C5&q=ethereum+whitepaper&btnG=) and with no English-language result. The top result on a general Google search returns the website version, but also some unofficial PDF sources, e.g. [here](https://whitepaper.io/coin/ethereum). This also gets you, in a roundabout way, to Vitalik’s Google Scholar page and the [same PDF](https://scholar.google.co.kr/citations?view_op=view_citation&hl=en&user=DLP9gTAAAAAJ&citation_for_view=DLP9gTAAAAAJ:IjCSPb-OGe4C) from another source. 

Let’s first address the 'two papers' issue. The first is the version Vitalik wrote in November, 2013. Let’s call this the proto-white paper. In the Ethereum announcement email - sent to a small number of prospective collaborators - we find a link to the proto-white paper on Vitalik’s personal website, but [no archive](http://vbuterin.org/ethereum.html) of this page exists. The email is titled: ‘Introducing Ethereum: a generalized smart contract/DAC platform.’

Given the time that passes between this original email and the earliest archived version on the ethereum.org website we can assume there were no major changes, though probably some minor ones. The earliest archived version of the proto-white paper on the ethereum.org website is [January 26, 2014 ](https://web.archive.org/web/20140126001912/http://www.ethereum.org/ethereum.html)and bears the title ‘Ethereum: A Next-Generation Smart Contract and Decentralized Application Platform.’ 

The proto-white paper opens with a brief discussion of the growing interest in new blockchain applications beyond Bitcoin’s. It then discusses the limitations of then current attempts to expand the blockchain application in detail, with reference to Colored Coins and Metacoins specifically, as mentioned in the announcement email. We know from [histories of Ethereum](https://www.harpercollins.com/products/the-infinite-machine-camila-russo?variant=32123333836834) that Buterin was working in and around these projects in the lead up to conceiving Ethereum. Another interesting feature of this proto-white paper is the inclusion of a section on Philosophy that outlines some design principles behind Ethereum. These design principles were used on the website and other documents from time to time and even made a brief return to the white paper itself in [2018](https://github.com/ethereum/wiki/wiki/White-Paper/75809d8b3a6ff85ac82b52418e2c10fe7d9b6f8c). Overall, this version is quite technical and it is not surprising it was simplified for a general audience. 

Let’s call the second version the canonical version. In this version, the opening of the white paper discusses potential blockchain applications beyond Bitcoin as well and prior attempts to accomplish these are mentioned. But the major discussions of Colored Coins and Metacoins are now replaced by one about Bitcoin and the former are moved to a section on ‘Alternative Blockchain Applications.’ This version is much more readable and gently guides the reader from a recognition of potential blockchain applications in the opening toward why Bitcoin and prior alternatives cannot achieve them. 

The canonical white paper was [committed](https://web.archive.org/web/20170507230432/https://github.com/ethereum/wiki/wiki/[English]-White-Paper/_history) on February 16, 2014 by early contributor [Stephan Tual](https://stephantual.com/). This version is hosted on Github, rather than hosted directly on the website. The canonical version first appears on the ethereum.org website as a snapshot on [February 22, 2014](https://web.archive.org/web/20140222035254/http://www.ethereum.org/), though our earliest archived version is [June 3, 2014](https://web.archive.org/web/20140603225656/https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-White-Paper). There is a migration to a new Wiki in and around [September 1, 2014](https://github.com/ethereum/wiki/wiki/White-Paper/_history?page=6). Vitalik makes a couple more contributions, but then stops. Vitalik has expressed to the ethereum.org team that the version that best represents his “final” intervention is the [December 10, 2014](https://github.com/ethereum/wiki/wiki/White-Paper/502e0e01355a42c8e6f5463c49cce496ae423179) version. The canonical white paper is tilted: ‘A Next-Generation Smart Contract and Decentralized Application Platform.’ The words Ethereum or white paper are not included. 

With the goal of establishing a canonical version on the Ethereum white paper I believe two issues must be addressed: website and PDF. 

For the website, I think the options are:

(1) Leave the white paper “as is” on [December 10, 2014](https://github.com/ethereum/wiki/wiki/White-Paper/502e0e01355a42c8e6f5463c49cce496ae423179), but the images are missing, so that does not look good.
(2) Keep “as is” on December 10, 2014,  but restore the images. 
(3) Keep “as is” on December 10, 2014, but restore the images and update the title. See my proposal below which discusses the title with more context. 

Options (2) and (3) will require one final update. But then the white paper should be locked down. 

Next, a PDF version. If we look at the PDF of the white paper in circulation [here](https://whitepaper.io/coin/ethereum) and [here](https://scholar.google.co.kr/citations?view_op=view_citation&hl=en&user=DLP9gTAAAAAJ&citation_for_view=DLP9gTAAAAAJ:IjCSPb-OGe4C) we can see it bears the ethereum.org name. This PDF did exist on the ethereum.org website. It first appeared on [July 23rd 2014](https://web.archive.org/web/20140723210954/https://www.ethereum.org/pdfs/EthereumWhitePaper.pdf). The PDF version bears the title: 

Ethereum White Paper 
A NEXT GENERATION SMART CONTRACT & DECENTRALIZED APPLICATION PLATFORM 
By Vitalik Buterin.

The choices here are a little unusual. Ideally we would have a colon after ‘Ethereum White Paper:’ and even more ideally everything would not be in caps lock. Also the ampersand ‘&’ instead of the use of ‘and’ gives us a slightly different title from the canonical version.

The last snapshot I can find is [February 14, 2015](https://web.archive.org/web/20150214235110/https://www.ethereum.org/pdfs/EthereumWhitePaper.pdf). After that, we get dead links, 404 errors, and redirects. I am not sure why the PDF was removed, but at least we know this is where the circulating PDFs came from and that they are official versions, rather than bootlegs! 

For the PDF, I think the options are:
(1) Make no changes to the PDF and present it as it was on [January 31, 2015](https://web.archive.org/web/20150131133825/https://www.ethereum.org/pdfs/EthereumWhitePaper.pdf) (closest snapshot to [December 10, 2014](https://github.com/ethereum/wiki/wiki/White-Paper/502e0e01355a42c8e6f5463c49cce496ae423179) Github version). 
(2) Make slight changes to the title to make it look more formal. Then repost the PDF. 

I think ideally the title for both - if we choose to update - would be:

Ethereum White Paper: A Next-Generation Smart Contract and Decentralized Application Platform.
By Vitalik Buterin (2014).

The 2014 helps because the proto-white paper is 2013 and people sometimes cite 2013 as the white paper date. But we should be citing the 2014 canonical version and it helps to put the year clearly in the title.

Why the reversion? 

The decision to host the paper on Github has had consequences. The most important implications of this decision are (in ascending order of importance):
The Github document has no pagination. This makes it difficult to cite formally. The PDFs have pagination, but don’t come from an official source. 
Neither has the year (2014). 
The document has no static home and can move. This has happened at least a number of times in the past. There is no official stable source.
Github encourages a mindset where source code or documentation can be updated and maintained. This has encouraged well-intentioned users to, on occasion, alter the white paper. While the changes are usually benign, it is unusual to have a document of such potential historical importance be “live.”
<issue_comment>username_1: Thanks for this thoughtful post @username_2! Appreciate the time & energy you've put into this 🙏 

I agree with your overall assessment.

For the website, I think (3) makes sense (assuming Vitalik doesn't have an issue with tweaking the title). I support fixing the broken images, as well as keeping the new images given they provide dark mode support (#2030).

For the PDF, I think (2) makes sense (assuming Vitalik doesn't have an issue with tweaking the title).

I also agree that once we act on these changes, we should lock both down.

I welcome input on this!
<issue_comment>username_2: Thanks @username_1 
Those are my favoured options too.<issue_closed>
<issue_comment>username_2: The history of the Ethereum white paper is not analogous to Nakamoto’s Bitcoin white paper. Bitcoin’s white paper is traditionally presented in Nakamoto’s original format: a[ PDF document](https://bitcoin.org/bitcoin.pdf) produced in [OpenOffice](https://tex.stackexchange.com/questions/306754/was-anything-in-satoshi-nakamotos-original-bitcoin-paper-compiled-in-latex) and self-hosted on bitcoin.org. This has ensured the document is understood to be “fixed.” In contrast, the Ethereum white paper has been treated as an evolving document.

This “evolving” white paper happens in two ways. 

First, Vitalik wrote and disseminated two white papers. Second, numerous (well-intentioned) contributors have fixed typos, altered syntax, improved explanations, updated technical changes, and so forth. This means it is not obvious what the “canonical” white paper is. This is not necessarily a problem in many contexts - e.g. the Ethereum beginner - but it is a problem in a historical and academic sense. The top result on Google Scholar for the Ethereum white paper is currently a [Polish translation](https://scholar.google.com/scholar?hl=en&as_sdt=0%2C5&q=ethereum+whitepaper&btnG=) and with no English-language result. The top result on a general Google search returns the website version, but also some unofficial PDF sources, e.g. [here](https://whitepaper.io/coin/ethereum). This also gets you, in a roundabout way, to Vitalik’s Google Scholar page and the [same PDF](https://scholar.google.co.kr/citations?view_op=view_citation&hl=en&user=DLP9gTAAAAAJ&citation_for_view=DLP9gTAAAAAJ:IjCSPb-OGe4C) from another source. 

Let’s first address the 'two papers' issue. The first is the version Vitalik wrote in November, 2013. Let’s call this the proto-white paper. In the Ethereum announcement email - sent to a small number of prospective collaborators - we find a link to the proto-white paper on Vitalik’s personal website, but [no archive](http://vbuterin.org/ethereum.html) of this page exists. The email is titled: ‘Introducing Ethereum: a generalized smart contract/DAC platform.’

Given the time that passes between this original email and the earliest archived version on the ethereum.org website we can assume there were no major changes, though probably some minor ones. The earliest archived version of the proto-white paper on the ethereum.org website is [January 26, 2014 ](https://web.archive.org/web/20140126001912/http://www.ethereum.org/ethereum.html)and bears the title ‘Ethereum: A Next-Generation Smart Contract and Decentralized Application Platform.’ 

The proto-white paper opens with a brief discussion of the growing interest in new blockchain applications beyond Bitcoin’s. It then discusses the limitations of then current attempts to expand the blockchain application in detail, with reference to Colored Coins and Metacoins specifically, as mentioned in the announcement email. We know from [histories of Ethereum](https://www.harpercollins.com/products/the-infinite-machine-camila-russo?variant=32123333836834) that Buterin was working in and around these projects in the lead up to conceiving Ethereum. Another interesting feature of this proto-white paper is the inclusion of a section on Philosophy that outlines some design principles behind Ethereum. These design principles were used on the website and other documents from time to time and even made a brief return to the white paper itself in [2018](https://github.com/ethereum/wiki/wiki/White-Paper/75809d8b3a6ff85ac82b52418e2c10fe7d9b6f8c). Overall, this version is quite technical and it is not surprising it was simplified for a general audience. 

Let’s call the second version the canonical version. In this version, the opening of the white paper discusses potential blockchain applications beyond Bitcoin as well and prior attempts to accomplish these are mentioned. But the major discussions of Colored Coins and Metacoins are now replaced by one about Bitcoin and the former are moved to a section on ‘Alternative Blockchain Applications.’ This version is much more readable and gently guides the reader from a recognition of potential blockchain applications in the opening toward why Bitcoin and prior alternatives cannot achieve them. 

The canonical white paper was [committed](https://web.archive.org/web/20170507230432/https://github.com/ethereum/wiki/wiki/[English]-White-Paper/_history) on February 16, 2014 by early contributor [Stephan Tual](https://stephantual.com/). This version is hosted on Github, rather than hosted directly on the website. The canonical version first appears on the ethereum.org website as a snapshot on [February 22, 2014](https://web.archive.org/web/20140222035254/http://www.ethereum.org/), though our earliest archived version is [June 3, 2014](https://web.archive.org/web/20140603225656/https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-White-Paper). There is a migration to a new Wiki in and around [September 1, 2014](https://github.com/ethereum/wiki/wiki/White-Paper/_history?page=6). Vitalik makes a couple more contributions, but then stops. Vitalik has expressed to the ethereum.org team that the version that best represents his “final” intervention is the [December 10, 2014](https://github.com/ethereum/wiki/wiki/White-Paper/502e0e01355a42c8e6f5463c49cce496ae423179) version. The canonical white paper is tilted: ‘A Next-Generation Smart Contract and Decentralized Application Platform.’ The words Ethereum or white paper are not included. 

With the goal of establishing a canonical version on the Ethereum white paper I believe two issues must be addressed: website and PDF. 

For the website, I think the options are:

(1) Leave the white paper “as is” on [December 10, 2014](https://github.com/ethereum/wiki/wiki/White-Paper/502e0e01355a42c8e6f5463c49cce496ae423179), but the images are missing, so that does not look good.
(2) Keep “as is” on December 10, 2014,  but restore the images. 
(3) Keep “as is” on December 10, 2014, but restore the images and update the title. See my proposal below which discusses the title with more context. 

Options (2) and (3) will require one final update. But then the white paper should be locked down. 

Next, a PDF version. If we look at the PDF of the white paper in circulation [here](https://whitepaper.io/coin/ethereum) and [here](https://scholar.google.co.kr/citations?view_op=view_citation&hl=en&user=DLP9gTAAAAAJ&citation_for_view=DLP9gTAAAAAJ:IjCSPb-OGe4C) we can see it bears the ethereum.org name. This PDF did exist on the ethereum.org website. It first appeared on [July 23rd 2014](https://web.archive.org/web/20140723210954/https://www.ethereum.org/pdfs/EthereumWhitePaper.pdf). The PDF version bears the title: 

Ethereum White Paper 
A NEXT GENERATION SMART CONTRACT & DECENTRALIZED APPLICATION PLATFORM 
By Vitalik Buterin.

The choices here are a little unusual. Ideally we would have a colon after ‘Ethereum White Paper:’ and even more ideally everything would not be in caps lock. Also the ampersand ‘&’ instead of the use of ‘and’ gives us a slightly different title from the canonical version.

The last snapshot I can find is [February 14, 2015](https://web.archive.org/web/20150214235110/https://www.ethereum.org/pdfs/EthereumWhitePaper.pdf). After that, we get dead links, 404 errors, and redirects. I am not sure why the PDF was removed, but at least we know this is where the circulating PDFs came from and that they are official versions, rather than bootlegs! 

For the PDF, I think the options are:
(1) Make no changes to the PDF and present it as it was on [January 31, 2015](https://web.archive.org/web/20150131133825/https://www.ethereum.org/pdfs/EthereumWhitePaper.pdf) (closest snapshot to [December 10, 2014](https://github.com/ethereum/wiki/wiki/White-Paper/502e0e01355a42c8e6f5463c49cce496ae423179) Github version). 
(2) Make slight changes to the title to make it look more formal. Then repost the PDF. 

I think ideally the title for both - if we choose to update - would be:

Ethereum White Paper: A Next-Generation Smart Contract and Decentralized Application Platform.
By Vitalik Buterin (2014).

The 2014 helps because the proto-white paper is 2013 and people sometimes cite 2013 as the white paper date. But we should be citing the 2014 canonical version and it helps to put the year clearly in the title.

Why the reversion? 

The decision to host the paper on Github has had consequences. The most important implications of this decision are (in ascending order of importance):
The Github document has no pagination. This makes it difficult to cite formally. The PDFs have pagination, but don’t come from an official source. 
Neither has the year (2014). 
The document has no static home and can move. This has happened at least a number of times in the past. There is no official stable source.
Github encourages a mindset where source code or documentation can be updated and maintained. This has encouraged well-intentioned users to, on occasion, alter the white paper. While the changes are usually benign, it is unusual to have a document of such potential historical importance be “live.”"
ethereum/ethereum-org-website,1079862409,4776,"{'number': 4776.0, 'repo': 'ethereum-org-website', 'user_login': 'ethereum'}","[{'action': 'opened', 'author': 'minimalsm', 'comment_id': None, 'datetime': '2021-12-14T14:59:16Z', 'masked_author': 'username_0', 'text': '## Description\r\nPatch update to energy consumption page to:\r\n- Add nav/footer links\r\n- Add breadcrumbs string\r\n- Change URL to be consistent (use dash spaces instead of underscores)\r\n- Fix a typo (use of PoS instead of proof-of-stake)\r\n\r\n## Related Issue\r\n[This comment](https://github.com/ethereum/ethereum-org-website/pull/3650#pullrequestreview-826936558)', 'title': 'Update energy consumption page', 'type': 'issue'}]","<issue_start><issue_comment>Title: Update energy consumption page
username_0: ## Description
Patch update to energy consumption page to:
- Add nav/footer links
- Add breadcrumbs string
- Change URL to be consistent (use dash spaces instead of underscores)
- Fix a typo (use of PoS instead of proof-of-stake)

## Related Issue
[This comment](https://github.com/ethereum/ethereum-org-website/pull/3650#pullrequestreview-826936558)"
kubernetes/website,699041938,23809,,"[{'action': 'opened', 'author': 'feloy', 'comment_id': None, 'datetime': '2020-09-11 08:49:37+00:00', 'masked_author': 'username_0', 'text': 'This issue helps following my Google Season of Docs project: https://developers.google.com/season-of-docs/docs/participants/project-cncf-username_0 and resumes the first discussions in https://github.com/kubernetes/website/pull/23294 and [this doc](https://docs.google.com/document/d/17T1GGtBWFLh0FbbS_fp483V8h_mUJOAbdZc8AUmF3nE).\r\n\r\n## Introduction \r\n\r\nCurrently, the Kubernetes API references are large HTML documents generated from Swagger specs by scripts hosted outside the website repository, then added into this website repository.\r\n\r\nOn another side, the Kubernetes documentation website is built with Hugo from documentation written in Markdown format in the website repository, using the Docsy Hugo theme.\r\n\r\nThe goal of this project is to integrate the generation of the Kubernetes API references into the process that builds the documentation website.\r\n\r\n## swaggerui\r\n\r\nSpecifically, we will focus on the swaggerui shortcode, wrapper around swagger-ui, provided by the Docsy Hugo theme and on specific tooling, enabling the insertion of parts of the API specification in the flow of the Kubernetes documentation.\r\n\r\nThe actual generation of the [API Reference](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/) has some drawbacks:\r\n\r\n- a single huge HTML page containing all the API reference\r\n- its format is not adapted to mobile reading\r\n- its design is not integrated with the kubernetes.io/docs website\r\n- its content cannot be referenced by search engines\r\n\r\nWith this project, we will try to address some of these drawbacks:\r\n\r\n- the single page would be addressed by splitting the API reference into several pages,\r\n- mobile format and integration to kubernetes.io/docs website would be addressed by using a specific theme with the swaggerui shortcode.\r\n\r\nSome drawbacks won\'t be addressed by the proposed solution:\r\n\r\n- as the swaggerui generates HTML dynamically, the content of these pages won\'t be indexed by search engines.\r\n\r\n## Splitting the API Specs\r\nSpecific tooling will be needed as swagger-ui is able to output the complete specification described in a swagger file, but not parts of it. The Kubernetes API is too big to be displayed in one part only.\r\n\r\nWe will use or create a tool that gets as input the complete swagger file of the Kubernetes API [found here](https://github.com/kubernetes/kubernetes/tree/master/api/openapi-spec) and that outputs a new swagger file for a specific endpoint or a limited number of endpoints, and its associated resources and definitions, then use these swagger files as input of swaggerui shortcodes at specific places in the Kubernetes documentation website.\r\n\r\n## Interactivity\r\n\r\nThere are ""Authorize""/""Try it out"" features that come default with most Swagger renderings. Kubernetes is usually deployed ""on prem"", i.e. by and for a specific team, rather than being an API available to anyone with auth access. Maintaining a k8s deployment for people to \'try it out\' on could also pose security risks.\r\n\r\nWe will first disable these features, and consider to make a version distribuable to end-users to install locally and to use interactively on their own cluster.\r\n\r\n## Classification\r\n\r\nThe Kubernetes API contains several dozens of Resources and several hundreds of endpoints.\r\n\r\nWe want to first classify the endpoints grouped by Kubernetes Resources (Pods, Deployments, etc), and also classify the Resources. Two classifications come to mind for the Resources:\r\n\r\n- either by API Group and Version (core/v1, batch/v1, etc)\r\n- or by following the classification of the `concepts` section (Container, Workloads, Services, Storage, Configuration, Security, Policies, Scheduling, Cluster, Extending)\r\n\r\nIn the first case, the whole set of reference pages would be regrouped in a specific section (the `reference` section itself).\r\n\r\nIn the second case, the reference pages would be placed at the end of each corresponding sub-section in the `concepts` section.\r\n\r\n## Landing Page\r\n\r\nWe will work on a landing page that points to all the reference pages of the specification. Also, this page will make clear if translations exist for some pages.\r\n\r\n## Generation\r\n\r\nAs [the sources of the specifications](https://github.com/kubernetes/kubernetes/tree/master/api/openapi-spec) reside in other repositories than the sources of the documentation, we will need to find a way to automatically update them in the documentation repository when they change.\r\n\r\n## I18n\r\n\r\nAs the Kubernetes documentation is available in different languages, we will pay special attention to the possibility of publishing translations for the Kubernetes API reference.', 'title': ""[GSoD'20] Update how the Kubernetes website serves API references"", 'type': 'issue'}
 {'action': 'created', 'author': 'sftim', 'comment_id': 691939258.0, 'datetime': '2020-09-14 09:33:41+00:00', 'masked_author': 'username_1', 'text': 'Great to see this work starting @username_0!', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'sftim', 'comment_id': 691939396.0, 'datetime': '2020-09-14 09:33:58+00:00', 'masked_author': 'username_1', 'text': 'Another site that might be useful for inspiration: https://k8syaml.com/', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'sftim', 'comment_id': 691939487.0, 'datetime': '2020-09-14 09:34:09+00:00', 'masked_author': 'username_1', 'text': ""That's a reference for _manifests_, not the API."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'feloy', 'comment_id': 692252654.0, 'datetime': '2020-09-14 19:05:16+00:00', 'masked_author': 'username_0', 'text': 'I have created this generic `swagger-filter` CLI that is able to filter a swagger definition by endpoints (complete path, prefix or regexp).\r\n\r\nAs an example, a script using this CLI filters the complete Kubernetes API definition to output new swagger definitions for each K8s API Group:\r\n\r\nhttps://github.com/username_0/swagger-filter', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'kbhawkey', 'comment_id': 694454034.0, 'datetime': '2020-09-17 19:33:08+00:00', 'masked_author': 'username_2', 'text': 'Thanks @username_0 for opening this issue. I will review the swagger-filter code.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'kbhawkey', 'comment_id': 694477734.0, 'datetime': '2020-09-17 20:20:43+00:00', 'masked_author': 'username_2', 'text': 'Hi @username_0 . I quickly looked at the filter code. Will review in detail. Some initial questions:\r\n-  Could you use the apiserver to create the individual files (add new flags)?\r\n- Instead of a using a static list of API groups could you parse the OpenAPI spec to derive this list?', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'feloy', 'comment_id': 694683830.0, 'datetime': '2020-09-18 06:32:34+00:00', 'masked_author': 'username_0', 'text': 'You are right, the `x-kubernetes-group-version-kind` swagger extension is added to Operations and Definitions on the swagger spec, to materialize the corresponding Kubernetes Actions and Kubernetes Resources. Thanks to these extensions, we can extract the operations belonging to specific GVKs. ([more on `x-kubernetes-*` extensions](https://github.com/username_0/kubernetes-resources-reference#kubernetes-extensions))\r\n\r\nI wanted to make a generic filter, reusable for any OpenAPI spec, not coupled to the Kubernetes API spec. If we use such a method, it will become a dedicated tool for the API spec.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'kbhawkey', 'comment_id': 696803652.0, 'datetime': '2020-09-22 15:40:54+00:00', 'masked_author': 'username_2', 'text': 'OK. Seems reasonable. You have created a new command line tool based off the spf13/cobra code to parse the complete spec and generate individual or groups of openAPI files (or snippets?).', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'sftim', 'comment_id': 705286369.0, 'datetime': '2020-10-08 02:04:13+00:00', 'masked_author': 'username_1', 'text': ""@username_0, how do you think the Swagger approach is working out?\r\nLooking at issue #23889, that made me wonder what kind of API documentation readers would most value? I'm sure you will have some thoughts on this.\r\n\r\nFor example: details of everything that can go in YAML manifests vs. the JSON or protobuf on-the-wire representation vs. Golang source code."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'feloy', 'comment_id': 706514472.0, 'datetime': '2020-10-10 08:51:38+00:00', 'masked_author': 'username_0', 'text': ""@username_1 I think the documentation reader first needs an help to write YAMLs manifests for the moment. In a more or less near future, when the writing of Operators and Cloud Native apps is democratized, an help for writing the Go structures rpresenting the K8s resources would be helpful.\r\n\r\nI'm not very satisfied with the actual presentation of the swagger-ui documentation for the following reasons:\r\n\r\n- the endpoints are the most visible, but this information is not relevant for most users, as they are not calling the APIs endpoints themselves, but are using kubectl, client-go or other library to make the calls.\r\n\r\n- The relevant information for the reader is the structure of the Resource they want to work with (Deployment, Service, etc). This specific Resource is not easy to find in this list of all Definitions displayed on the page.\r\n\r\n- swagger-ui is building the page dynamically, into the browser, each time a user is opening a swagger page. I think it is a waste of time (and energy) to build this page every time, as the data to display does not change between users, or over the time (between 2 releases). I think it would be more efficient to build the page in the Markdown format and let Hugo build the HTML page once and for all at release time."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'sftim', 'comment_id': 706570404.0, 'datetime': '2020-10-10 15:58:44+00:00', 'masked_author': 'username_1', 'text': 'Building the page as Markdown sounds more viable. Are you thinking of proposing a change to https://github.com/kubernetes-sigs/reference-docs ?', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'feloy', 'comment_id': 706575478.0, 'datetime': '2020-10-10 16:31:40+00:00', 'masked_author': 'username_0', 'text': 'Yes, as this generator uses an interface for the writer, it would be interesting to try and implement a writer for Markdown pages', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'feloy', 'comment_id': 706700668.0, 'datetime': '2020-10-11 12:54:00+00:00', 'masked_author': 'username_0', 'text': 'More on Markdown output at https://github.com/kubernetes-sigs/reference-docs/issues/173', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'sftim', 'comment_id': 730539098.0, 'datetime': '2020-11-19 17:54:34+00:00', 'masked_author': 'username_1', 'text': ""/kind feature\r\n/triage accepted\r\n/priority backlog\r\n(but it's a very valuable backlog item!)"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'sftim', 'comment_id': 741184414.0, 'datetime': '2020-12-08 23:01:30+00:00', 'masked_author': 'username_1', 'text': ""I've logged https://github.com/kubernetes/website/issues/25505 specifically to track the work to do with _migrating_ from the existing generator (and the pages in generates) to the new one."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'sftim', 'comment_id': 741184815.0, 'datetime': '2020-12-08 23:01:45+00:00', 'masked_author': 'username_1', 'text': '@username_0 are you happy to close _this_ issue?', 'title': None, 'type': 'comment'}
 {'action': 'closed', 'author': 'feloy', 'comment_id': None, 'datetime': '2020-12-09 05:33:45+00:00', 'masked_author': 'username_0', 'text': '', 'title': None, 'type': 'issue'}
 {'action': 'created', 'author': 'sftim', 'comment_id': 763238531.0, 'datetime': '2021-01-20 00:25:20+00:00', 'masked_author': 'username_1', 'text': '/close\r\n\r\nRemaining work is in #25505', 'title': None, 'type': 'comment'}]","<issue_start><issue_comment>Title: [GSoD'20] Update how the Kubernetes website serves API references
username_0: This issue helps following my Google Season of Docs project: https://developers.google.com/season-of-docs/docs/participants/project-cncf-username_0 and resumes the first discussions in https://github.com/kubernetes/website/pull/23294 and [this doc](https://docs.google.com/document/d/17T1GGtBWFLh0FbbS_fp483V8h_mUJOAbdZc8AUmF3nE).

## Introduction 

Currently, the Kubernetes API references are large HTML documents generated from Swagger specs by scripts hosted outside the website repository, then added into this website repository.

On another side, the Kubernetes documentation website is built with Hugo from documentation written in Markdown format in the website repository, using the Docsy Hugo theme.

The goal of this project is to integrate the generation of the Kubernetes API references into the process that builds the documentation website.

## swaggerui

Specifically, we will focus on the swaggerui shortcode, wrapper around swagger-ui, provided by the Docsy Hugo theme and on specific tooling, enabling the insertion of parts of the API specification in the flow of the Kubernetes documentation.

The actual generation of the [API Reference](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/) has some drawbacks:

- a single huge HTML page containing all the API reference
- its format is not adapted to mobile reading
- its design is not integrated with the kubernetes.io/docs website
- its content cannot be referenced by search engines

With this project, we will try to address some of these drawbacks:

- the single page would be addressed by splitting the API reference into several pages,
- mobile format and integration to kubernetes.io/docs website would be addressed by using a specific theme with the swaggerui shortcode.

Some drawbacks won't be addressed by the proposed solution:

- as the swaggerui generates HTML dynamically, the content of these pages won't be indexed by search engines.

## Splitting the API Specs
Specific tooling will be needed as swagger-ui is able to output the complete specification described in a swagger file, but not parts of it. The Kubernetes API is too big to be displayed in one part only.

We will use or create a tool that gets as input the complete swagger file of the Kubernetes API [found here](https://github.com/kubernetes/kubernetes/tree/master/api/openapi-spec) and that outputs a new swagger file for a specific endpoint or a limited number of endpoints, and its associated resources and definitions, then use these swagger files as input of swaggerui shortcodes at specific places in the Kubernetes documentation website.

## Interactivity

There are ""Authorize""/""Try it out"" features that come default with most Swagger renderings. Kubernetes is usually deployed ""on prem"", i.e. by and for a specific team, rather than being an API available to anyone with auth access. Maintaining a k8s deployment for people to 'try it out' on could also pose security risks.

We will first disable these features, and consider to make a version distribuable to end-users to install locally and to use interactively on their own cluster.

## Classification

The Kubernetes API contains several dozens of Resources and several hundreds of endpoints.

We want to first classify the endpoints grouped by Kubernetes Resources (Pods, Deployments, etc), and also classify the Resources. Two classifications come to mind for the Resources:

- either by API Group and Version (core/v1, batch/v1, etc)
- or by following the classification of the `concepts` section (Container, Workloads, Services, Storage, Configuration, Security, Policies, Scheduling, Cluster, Extending)

In the first case, the whole set of reference pages would be regrouped in a specific section (the `reference` section itself).

In the second case, the reference pages would be placed at the end of each corresponding sub-section in the `concepts` section.

## Landing Page

We will work on a landing page that points to all the reference pages of the specification. Also, this page will make clear if translations exist for some pages.

## Generation

As [the sources of the specifications](https://github.com/kubernetes/kubernetes/tree/master/api/openapi-spec) reside in other repositories than the sources of the documentation, we will need to find a way to automatically update them in the documentation repository when they change.

## I18n

As the Kubernetes documentation is available in different languages, we will pay special attention to the possibility of publishing translations for the Kubernetes API reference.
<issue_comment>username_1: Great to see this work starting @username_0!
<issue_comment>username_1: Another site that might be useful for inspiration: https://k8syaml.com/
<issue_comment>username_1: That's a reference for _manifests_, not the API.
<issue_comment>username_0: I have created this generic `swagger-filter` CLI that is able to filter a swagger definition by endpoints (complete path, prefix or regexp).

As an example, a script using this CLI filters the complete Kubernetes API definition to output new swagger definitions for each K8s API Group:

https://github.com/username_0/swagger-filter
<issue_comment>username_2: Thanks @username_0 for opening this issue. I will review the swagger-filter code.
<issue_comment>username_2: Hi @username_0 . I quickly looked at the filter code. Will review in detail. Some initial questions:
-  Could you use the apiserver to create the individual files (add new flags)?
- Instead of a using a static list of API groups could you parse the OpenAPI spec to derive this list?
<issue_comment>username_0: You are right, the `x-kubernetes-group-version-kind` swagger extension is added to Operations and Definitions on the swagger spec, to materialize the corresponding Kubernetes Actions and Kubernetes Resources. Thanks to these extensions, we can extract the operations belonging to specific GVKs. ([more on `x-kubernetes-*` extensions](https://github.com/username_0/kubernetes-resources-reference#kubernetes-extensions))

I wanted to make a generic filter, reusable for any OpenAPI spec, not coupled to the Kubernetes API spec. If we use such a method, it will become a dedicated tool for the API spec.
<issue_comment>username_2: OK. Seems reasonable. You have created a new command line tool based off the spf13/cobra code to parse the complete spec and generate individual or groups of openAPI files (or snippets?).
<issue_comment>username_1: @username_0, how do you think the Swagger approach is working out?
Looking at issue #23889, that made me wonder what kind of API documentation readers would most value? I'm sure you will have some thoughts on this.

For example: details of everything that can go in YAML manifests vs. the JSON or protobuf on-the-wire representation vs. Golang source code.
<issue_comment>username_0: @username_1 I think the documentation reader first needs an help to write YAMLs manifests for the moment. In a more or less near future, when the writing of Operators and Cloud Native apps is democratized, an help for writing the Go structures rpresenting the K8s resources would be helpful.

I'm not very satisfied with the actual presentation of the swagger-ui documentation for the following reasons:

- the endpoints are the most visible, but this information is not relevant for most users, as they are not calling the APIs endpoints themselves, but are using kubectl, client-go or other library to make the calls.

- The relevant information for the reader is the structure of the Resource they want to work with (Deployment, Service, etc). This specific Resource is not easy to find in this list of all Definitions displayed on the page.

- swagger-ui is building the page dynamically, into the browser, each time a user is opening a swagger page. I think it is a waste of time (and energy) to build this page every time, as the data to display does not change between users, or over the time (between 2 releases). I think it would be more efficient to build the page in the Markdown format and let Hugo build the HTML page once and for all at release time.
<issue_comment>username_1: Building the page as Markdown sounds more viable. Are you thinking of proposing a change to https://github.com/kubernetes-sigs/reference-docs ?
<issue_comment>username_0: Yes, as this generator uses an interface for the writer, it would be interesting to try and implement a writer for Markdown pages
<issue_comment>username_0: More on Markdown output at https://github.com/kubernetes-sigs/reference-docs/issues/173
<issue_comment>username_1: /kind feature
/triage accepted
/priority backlog
(but it's a very valuable backlog item!)
<issue_comment>username_1: I've logged https://github.com/kubernetes/website/issues/25505 specifically to track the work to do with _migrating_ from the existing generator (and the pages in generates) to the new one.
<issue_comment>username_1: @username_0 are you happy to close _this_ issue?<issue_closed>
<issue_comment>username_1: /close

Remaining work is in #25505"
opensearch-project/documentation-website,1060665611,289,"{'number': 289.0, 'repo': 'documentation-website', 'user_login': 'opensearch-project'}","[{'action': 'opened', 'author': 'abbashus', 'comment_id': None, 'datetime': '2021-11-22T22:49:15Z', 'masked_author': 'username_0', 'text': '### Description\r\nAdds changes to UI to support search powered by opensearch cluster.\r\n \r\n### Issues Resolved\r\n\r\n \r\n### Check List\r\n- [x] Commits are signed per the DCO using --signoff \r\n\r\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.\r\nFor more information on following Developer Certificate of Origin and signing off your commits, please check [here](https://github.com/opensearch-project/OpenSearch/blob/main/CONTRIBUTING.md#developer-certificate-of-origin).', 'title': 'Custom search UI for doc search', 'type': 'issue'}
 {'action': 'created', 'author': 'abbashus', 'comment_id': 987148021.0, 'datetime': '2021-12-06 20:06:36+00:00', 'masked_author': 'username_0', 'text': 'Closing this in lieu for #303', 'title': None, 'type': 'comment'}]","<issue_start><issue_comment>Title: Custom search UI for doc search
username_0: ### Description
Adds changes to UI to support search powered by opensearch cluster.
 
### Issues Resolved

 
### Check List
- [x] Commits are signed per the DCO using --signoff 

By submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.
For more information on following Developer Certificate of Origin and signing off your commits, please check [here](https://github.com/opensearch-project/OpenSearch/blob/main/CONTRIBUTING.md#developer-certificate-of-origin).
<issue_comment>username_0: Closing this in lieu for #303"
cake-build/website,253025229,398,"{'number': 398.0, 'repo': 'website', 'user_login': 'cake-build'}","[{'action': 'opened', 'author': 'gep13', 'comment_id': None, 'datetime': '2017-08-25T21:44:15Z', 'masked_author': 'username_0', 'text': '@cake-build/cake-team can you all have a look at this, and let me know if you have any comments?', 'title': '(blog) HTTPS Blog Post', 'type': 'issue'}
 {'action': 'created', 'author': 'matkoch', 'comment_id': 325134731.0, 'datetime': '2017-08-26 14:49:33+00:00', 'masked_author': 'username_1', 'text': ""That's contradictory to what I see. Looking at the [search results](https://github.com/search?q=%22http%3A%2F%2Fcakebuild.net%2Fdownload%2Fbootstrapper%2Fpackages%22&type=Code&utf8=%E2%9C%93) I've seen at least 5 repositories within the first 20, that don't have a packages.config file committed.\r\n\r\nAbout the _minimal risk situation_, I'm not sure, so please take this as a question: Looking at how [ToolResolutionStrategy](https://github.com/cake-build/cake/blob/develop/src/Cake.Core/Tooling/ToolResolutionStrategy.cs#L82-L92) is implemented, every call to a tool that should be contained in `%PATH%` can potentially call a malicious executable. Or am I wrong?"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'devlead', 'comment_id': 325135079.0, 'datetime': '2017-08-26 14:53:42+00:00', 'masked_author': 'username_2', 'text': 'Looking in path is how any OS works to find binaries.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'matkoch', 'comment_id': 325135159.0, 'datetime': '2017-08-26 14:54:29+00:00', 'masked_author': 'username_1', 'text': ""@username_2 I'm not following?"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'devlead', 'comment_id': 325135308.0, 'datetime': '2017-08-26 14:56:22+00:00', 'masked_author': 'username_2', 'text': 'Agree', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'gep13', 'comment_id': 325137123.0, 'datetime': '2017-08-26 15:16:14+00:00', 'masked_author': 'username_0', 'text': 'Looking at how ToolResolutionStrategy is implemented, every call to a tool that should be contained in %PATH% can potentially call a malicious executable. Or am I wrong?\r\n\r\nCan you elaborate on what you mean here?', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'agc93', 'comment_id': 325137584.0, 'datetime': '2017-08-26 15:21:25+00:00', 'masked_author': 'username_3', 'text': 'Chiming in on the ""insecure executable search"" part: \r\n\r\nThere is no way for us (a developer-focussed build tool) to pre-empt the possibility of a malicious executable already locally installed on a machine. If we take the hypothetical scenario of a backdoored `dotnet.exe` already installed and available on PATH, our behaviour is identical to that of a user putting `dotnet` into PowerShell or Bash.\r\n\r\nCompromised local workstations are well and truly outside the scope of a tool like Cake. We\'ve (now) partially pre-empted the risk of a backdoored `cake.exe` (which could do things like deliberately resolve compromised versions of tools), but it\'s still up to the developer to secure their own workstation.\r\n\r\nThere\'s no practical change we could make to cover that sort of a case, and we should be relying on the tools provided by more fully-fledged systems (in this case the OS) then trying to half-bake our own solution and potentially introducing more risk (for an example of this, see any home-grown crypto algorithm).\r\n\r\nHappy to discuss this as security is *really* my thing :)', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'agc93', 'comment_id': 325138288.0, 'datetime': '2017-08-26 15:28:44+00:00', 'masked_author': 'username_3', 'text': ""It's also worth noting on the `packages.config` question that there's no easy change we can make to cover cases like people not checking those files in (despite explicit documentation) that wouldn't break behaviour of existing users.\r\n\r\nGiven we have no evidence of in-the-wild vectors, vulns, payloads or end-to-end attacks focussed on our tool (or any other .NET build tool outside of VS), there's no impetus at this stage for making the sort of drastic changes that would require.\r\n\r\nAlso, to be fair, for developer tool guidance, 75%+ takeup of checking in the `packages.config` is actually a very promising sign. We've covered the guidance of this enough in the past and are still (to this day) recommending it explicitly when the topic of `.config` handling comes up (for example in Gitter), so the responsibility is now with developers.\r\n\r\nIf there is/was an actionable, practical solution to this that wouldn't be either a) over-extending our guidance and approach or b) impractical for new and existing users, we're all for it; at this time, there simply isn't much more we can do that would present a meaningful improvement."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'matkoch', 'comment_id': 325138348.0, 'datetime': '2017-08-26 15:29:25+00:00', 'masked_author': 'username_1', 'text': ""Great, here too :) So first, I'm not talking about compromised executables in the PATH directory. That's of course users fault. What I'm talking about is the previous situation, where it was possible (via man-in-the-middle) to download malicious executables into the `tools` directory. So that is a fact we can agree on, I guess.\r\n\r\nThe second thing: I've linked the code from [ToolResolutionStrategy](https://github.com/cake-build/cake/blob/develop/src/Cake.Core/Tooling/ToolResolutionStrategy.cs#L82-L92) where file paths are resolved. Like I said, it was rather a question, but from what I see, it resolves paths like this:\r\n\r\n1. Look in registrations (I'm not aware, what is actually registered)\r\n2. Look in `tools` directory (via globbing) <-- that being the issue\r\n3. Look in PATH\r\n\r\nSo given the fact, that packages could be downloaded without the user being aware, any call to a executable the user expects to be in PATH, could potentially be loaded from `tools`... Again: I'm asking."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'matkoch', 'comment_id': 325138471.0, 'datetime': '2017-08-26 15:30:47+00:00', 'masked_author': 'username_1', 'text': '@username_3 \r\n\r\nAt least there is one thing I can think of. You could modify `cake.exe` to look for `build.ps1` and `build.sh` in the root directory, and look if it still accesses `http` instead of `https`. If so, you could intentionally fail the build. (A suggestion)', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'matkoch', 'comment_id': 325138687.0, 'datetime': '2017-08-26 15:33:06+00:00', 'masked_author': 'username_1', 'text': ""I can't agree. The guidance was mostly about having reproducible builds, not having security. And security is not a feature. It should be ensured in whatever way the users is using a tool."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'matkoch', 'comment_id': 325144378.0, 'datetime': '2017-08-26 16:32:49+00:00', 'masked_author': 'username_1', 'text': ""@username_3 @username_0 \r\n\r\nI did the following:\r\n\r\n1. Download cake-build/cake\r\n2. Create a folder inside `tools` with `dotnet.exe`; _I guess we agree this was possible due to the http issue_)\r\n3. Execute build\r\n\r\nThis will fall back to the newly created `dotnet.exe`. I'm not sure though if this is the same issue as I described, or whether or not it relates to specifics of the dotnet build.ps1."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'gep13', 'comment_id': 325145824.0, 'datetime': '2017-08-26 16:48:16+00:00', 'masked_author': 'username_0', 'text': '@username_1 just so I am 100% clear on this situation, the compromised exe is coming from where? As a malicious package that has been pushed to, say, nuget.org?', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'matkoch', 'comment_id': 325145932.0, 'datetime': '2017-08-26 16:49:27+00:00', 'masked_author': 'username_1', 'text': '@username_0 yes.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'agc93', 'comment_id': 325146333.0, 'datetime': '2017-08-26 16:54:04+00:00', 'masked_author': 'username_3', 'text': ""---\r\n\r\n#### General security posture\r\n\r\nI fully agree that security is not a feature, it's a requirement (security is _literally_ my job). But we also have to remember that our users must assess their own security posture and respond accordingly. This is especially true given we have always recommended users customise their bootstrappers to their environment. High-risk users should rely on checksums and local trusted mirrors for example. We can provide security for a reasonable environment, while allowing for users to tailor to the risk to their specific use case.\r\n\r\nAs before, I'm happy to discuss this further, but I don't think there's much more to be gained or discussed on this specific front. As with our team's earlier communication with you, I believe any further development in this space is probably best redirected to a new issue, or a Gitter room or similar as we have long since left this PRs topic behind us."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'agc93', 'comment_id': 325146441.0, 'datetime': '2017-08-26 16:55:09+00:00', 'masked_author': 'username_3', 'text': ""I will also add the final note that it's 3am here, so I won't be responding to anything more tonight. See my last paragraph above: happy to discuss further, but maybe in another context and (preferably) another time 😄"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'matkoch', 'comment_id': 325146567.0, 'datetime': '2017-08-26 16:56:20+00:00', 'masked_author': 'username_1', 'text': 'How is it their call, if cake provided the bootstrappers without http in the first place?', 'title': None, 'type': 'comment'}]","<issue_start><issue_comment>Title: (blog) HTTPS Blog Post
username_0: @cake-build/cake-team can you all have a look at this, and let me know if you have any comments?
<issue_comment>username_1: That's contradictory to what I see. Looking at the [search results](https://github.com/search?q=%22http%3A%2F%2Fcakebuild.net%2Fdownload%2Fbootstrapper%2Fpackages%22&type=Code&utf8=%E2%9C%93) I've seen at least 5 repositories within the first 20, that don't have a packages.config file committed.

About the _minimal risk situation_, I'm not sure, so please take this as a question: Looking at how [ToolResolutionStrategy](https://github.com/cake-build/cake/blob/develop/src/Cake.Core/Tooling/ToolResolutionStrategy.cs#L82-L92) is implemented, every call to a tool that should be contained in `%PATH%` can potentially call a malicious executable. Or am I wrong?
<issue_comment>username_2: Looking in path is how any OS works to find binaries.
<issue_comment>username_1: @username_2 I'm not following?
<issue_comment>username_2: Agree
<issue_comment>username_0: Looking at how ToolResolutionStrategy is implemented, every call to a tool that should be contained in %PATH% can potentially call a malicious executable. Or am I wrong?

Can you elaborate on what you mean here?
<issue_comment>username_3: Chiming in on the ""insecure executable search"" part: 

There is no way for us (a developer-focussed build tool) to pre-empt the possibility of a malicious executable already locally installed on a machine. If we take the hypothetical scenario of a backdoored `dotnet.exe` already installed and available on PATH, our behaviour is identical to that of a user putting `dotnet` into PowerShell or Bash.

Compromised local workstations are well and truly outside the scope of a tool like Cake. We've (now) partially pre-empted the risk of a backdoored `cake.exe` (which could do things like deliberately resolve compromised versions of tools), but it's still up to the developer to secure their own workstation.

There's no practical change we could make to cover that sort of a case, and we should be relying on the tools provided by more fully-fledged systems (in this case the OS) then trying to half-bake our own solution and potentially introducing more risk (for an example of this, see any home-grown crypto algorithm).

Happy to discuss this as security is *really* my thing :)
<issue_comment>username_3: It's also worth noting on the `packages.config` question that there's no easy change we can make to cover cases like people not checking those files in (despite explicit documentation) that wouldn't break behaviour of existing users.

Given we have no evidence of in-the-wild vectors, vulns, payloads or end-to-end attacks focussed on our tool (or any other .NET build tool outside of VS), there's no impetus at this stage for making the sort of drastic changes that would require.

Also, to be fair, for developer tool guidance, 75%+ takeup of checking in the `packages.config` is actually a very promising sign. We've covered the guidance of this enough in the past and are still (to this day) recommending it explicitly when the topic of `.config` handling comes up (for example in Gitter), so the responsibility is now with developers.

If there is/was an actionable, practical solution to this that wouldn't be either a) over-extending our guidance and approach or b) impractical for new and existing users, we're all for it; at this time, there simply isn't much more we can do that would present a meaningful improvement.
<issue_comment>username_1: Great, here too :) So first, I'm not talking about compromised executables in the PATH directory. That's of course users fault. What I'm talking about is the previous situation, where it was possible (via man-in-the-middle) to download malicious executables into the `tools` directory. So that is a fact we can agree on, I guess.

The second thing: I've linked the code from [ToolResolutionStrategy](https://github.com/cake-build/cake/blob/develop/src/Cake.Core/Tooling/ToolResolutionStrategy.cs#L82-L92) where file paths are resolved. Like I said, it was rather a question, but from what I see, it resolves paths like this:

1. Look in registrations (I'm not aware, what is actually registered)
2. Look in `tools` directory (via globbing) <-- that being the issue
3. Look in PATH

So given the fact, that packages could be downloaded without the user being aware, any call to a executable the user expects to be in PATH, could potentially be loaded from `tools`... Again: I'm asking.
<issue_comment>username_1: @username_3 

At least there is one thing I can think of. You could modify `cake.exe` to look for `build.ps1` and `build.sh` in the root directory, and look if it still accesses `http` instead of `https`. If so, you could intentionally fail the build. (A suggestion)
<issue_comment>username_1: I can't agree. The guidance was mostly about having reproducible builds, not having security. And security is not a feature. It should be ensured in whatever way the users is using a tool.
<issue_comment>username_1: @username_3 @username_0 

I did the following:

1. Download cake-build/cake
2. Create a folder inside `tools` with `dotnet.exe`; _I guess we agree this was possible due to the http issue_)
3. Execute build

This will fall back to the newly created `dotnet.exe`. I'm not sure though if this is the same issue as I described, or whether or not it relates to specifics of the dotnet build.ps1.
<issue_comment>username_0: @username_1 just so I am 100% clear on this situation, the compromised exe is coming from where? As a malicious package that has been pushed to, say, nuget.org?
<issue_comment>username_1: @username_0 yes.
<issue_comment>username_3: ---

#### General security posture

I fully agree that security is not a feature, it's a requirement (security is _literally_ my job). But we also have to remember that our users must assess their own security posture and respond accordingly. This is especially true given we have always recommended users customise their bootstrappers to their environment. High-risk users should rely on checksums and local trusted mirrors for example. We can provide security for a reasonable environment, while allowing for users to tailor to the risk to their specific use case.

As before, I'm happy to discuss this further, but I don't think there's much more to be gained or discussed on this specific front. As with our team's earlier communication with you, I believe any further development in this space is probably best redirected to a new issue, or a Gitter room or similar as we have long since left this PRs topic behind us.
<issue_comment>username_3: I will also add the final note that it's 3am here, so I won't be responding to anything more tonight. See my last paragraph above: happy to discuss further, but maybe in another context and (preferably) another time 😄
<issue_comment>username_1: How is it their call, if cake provided the bootstrappers without http in the first place?"
eduardoboucas/staticman,391417063,245,,"[{'action': 'opened', 'author': 'mildred', 'comment_id': None, 'datetime': '2018-12-15T22:28:44Z', 'masked_author': 'username_0', 'text': ""If moderation is disabled, Staticman should be able to support any kind of git repository just by having a ssh private key and the repository address. Just clone the repository, make a commit and push. It would be great to allow that so it doesn't depends on GitHub any more."", 'title': 'Support any git repository server', 'type': 'issue'}
 {'action': 'created', 'author': 'VincentTam', 'comment_id': 447815420.0, 'datetime': '2018-12-17 11:37:49+00:00', 'masked_author': 'username_1', 'text': ""I like the idea of distangling Staticman from GitHub.  However, an SSH key would give too much power (e.g. write to protected branch/rebase commit history) in case of most Git service providers.  The current model of authentication via OAuth Tokens addresses this problem by limiting the holder's authorities to specific necessary operations (create PR & issues)."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'alexwaibel', 'comment_id': 551441645.0, 'datetime': '2019-11-08 08:52:19+00:00', 'masked_author': 'username_2', 'text': ""I too like this idea but think it's infeasible to implement securely so I'm going to mark this wont fix. If anyone has ideas for how to go about this in a secure way, then we can reopen."", 'title': None, 'type': 'comment'}
 {'action': 'closed', 'author': 'alexwaibel', 'comment_id': None, 'datetime': '2019-11-08 08:52:19+00:00', 'masked_author': 'username_2', 'text': '', 'title': None, 'type': 'issue'}]","<issue_start><issue_comment>Title: Support any git repository server
username_0: If moderation is disabled, Staticman should be able to support any kind of git repository just by having a ssh private key and the repository address. Just clone the repository, make a commit and push. It would be great to allow that so it doesn't depends on GitHub any more.
<issue_comment>username_1: I like the idea of distangling Staticman from GitHub.  However, an SSH key would give too much power (e.g. write to protected branch/rebase commit history) in case of most Git service providers.  The current model of authentication via OAuth Tokens addresses this problem by limiting the holder's authorities to specific necessary operations (create PR & issues).
<issue_comment>username_2: I too like this idea but think it's infeasible to implement securely so I'm going to mark this wont fix. If anyone has ideas for how to go about this in a secure way, then we can reopen.<issue_closed>"
flutter/website,413930439,2444,,"[{'action': 'opened', 'author': 'jonzhou45', 'comment_id': None, 'datetime': '2019-02-25 04:42:18+00:00', 'masked_author': 'username_0', 'text': 'Page URL: https://flutter.dev/docs/get-started/install/windows.html\r\nPage source: https://github.com/flutter/website/tree/master/src/docs/get-started/install/windows.md\r\n\r\nFound a typo? You can fix it yourself by going to the page source and clicking the pencil icon. Or finish creating this issue.\r\n\r\nDescription of issue:\r\n![image](https://user-images.githubusercontent.com/27979427/53314692-b2092a00-388d-11e9-9788-46d724b30fc1.png)\r\n\r\nI have Git installed as well as Windows Powershell my computer is Windows 10.', 'title': ""'Windows install' page issue"", 'type': 'issue'}
 {'action': 'closed', 'author': 'sfshaza2', 'comment_id': None, 'datetime': '2019-03-06 05:21:51+00:00', 'masked_author': 'username_1', 'text': '', 'title': None, 'type': 'issue'}
 {'action': 'created', 'author': 'sfshaza2', 'comment_id': 469972732.0, 'datetime': '2019-03-06 05:21:51+00:00', 'masked_author': 'username_1', 'text': 'Duplicate of https://github.com/flutter/website/issues/2460\r\n\r\nClosing', 'title': None, 'type': 'comment'}]","<issue_start><issue_comment>Title: 'Windows install' page issue
username_0: Page URL: https://flutter.dev/docs/get-started/install/windows.html
Page source: https://github.com/flutter/website/tree/master/src/docs/get-started/install/windows.md

Found a typo? You can fix it yourself by going to the page source and clicking the pencil icon. Or finish creating this issue.

Description of issue:
![image](https://user-images.githubusercontent.com/27979427/53314692-b2092a00-388d-11e9-9788-46d724b30fc1.png)

I have Git installed as well as Windows Powershell my computer is Windows 10.<issue_closed>
<issue_comment>username_1: Duplicate of https://github.com/flutter/website/issues/2460

Closing"
