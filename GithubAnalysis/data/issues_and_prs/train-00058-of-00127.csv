files-community/Website,1112444822,125,"{'number': 125.0, 'repo': 'Website', 'user_login': 'files-community'}","[{'action': 'opened', 'author': 'Stig124', 'comment_id': None, 'datetime': '2022-01-24T10:22:37Z', 'masked_author': 'username_0', 'text': ""## Description\r\n\r\nAdd ConEmu sample terminal profile\r\n\r\n## Motivation and Context\r\n\r\n[ConEmu](https://conemu.github.io/) is a well-known and widely used open-source terminal replacement that supports all sorts of different terminal apps.  \r\nDue to Files' open-source nature, I think it would be a good thing if a non-UWP open-source is \r\n\r\n## Screenshots (if appropriate):\r\nN/A"", 'title': 'Add ConEmu sample terminal profile', 'type': 'issue'}
 {'action': 'created', 'author': 'TheOnlyTails', 'comment_id': 1019941959.0, 'datetime': '2022-01-24 10:24:36+00:00', 'masked_author': 'username_1', 'text': ""This is just the documentation for Files. Adding things to the docs won't change the actual app.\nIf you want this to be added, please open a PR in the Files *app* repo, not the website repo."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'Stig124', 'comment_id': 1019944870.0, 'datetime': '2022-01-24 10:27:41+00:00', 'masked_author': 'username_0', 'text': ""I don't know how to code for UWP apps, the goal here is to have that on the docs, like for `CMD` and `Powershell`"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'TheOnlyTails', 'comment_id': 1020002603.0, 'datetime': '2022-01-24 11:32:25+00:00', 'masked_author': 'username_1', 'text': ""The purpose of the docs is to document the existing features of Files. Adding things which do not exist is misleading and defeats the purpose of having docs at all.\n\nIf you want to let users know how to add said profile to Files, that should be included in that terminal's docs, not ours.\n\nThis is not a discussion, we're not adding this."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'yaichenbaum', 'comment_id': 1020460626.0, 'datetime': '2022-01-24 19:24:42+00:00', 'masked_author': 'username_2', 'text': '@username_0 thank you for taking the time to open this pull request, we usually expect developers to open an issue before a pull request so that we can sort out issues like this before any work is done. That being said, would you be interested in adding this profile to the documentation for ConEmu?', 'title': None, 'type': 'comment'}]","<issue_start><issue_comment>Title: Add ConEmu sample terminal profile
username_0: ## Description

Add ConEmu sample terminal profile

## Motivation and Context

[ConEmu](https://conemu.github.io/) is a well-known and widely used open-source terminal replacement that supports all sorts of different terminal apps.  
Due to Files' open-source nature, I think it would be a good thing if a non-UWP open-source is 

## Screenshots (if appropriate):
N/A
<issue_comment>username_1: This is just the documentation for Files. Adding things to the docs won't change the actual app.
If you want this to be added, please open a PR in the Files *app* repo, not the website repo.
<issue_comment>username_0: I don't know how to code for UWP apps, the goal here is to have that on the docs, like for `CMD` and `Powershell`
<issue_comment>username_1: The purpose of the docs is to document the existing features of Files. Adding things which do not exist is misleading and defeats the purpose of having docs at all.

If you want to let users know how to add said profile to Files, that should be included in that terminal's docs, not ours.

This is not a discussion, we're not adding this.
<issue_comment>username_2: @username_0 thank you for taking the time to open this pull request, we usually expect developers to open an issue before a pull request so that we can sort out issues like this before any work is done. That being said, would you be interested in adding this profile to the documentation for ConEmu?"
gohugoio/hugo,101419392,1359,,"[{'action': 'opened', 'author': 'bzerangue', 'comment_id': None, 'datetime': '2015-08-17T13:20:10Z', 'masked_author': 'username_0', 'text': 'I would like to request that the Pongo2 Template Language be added as one of the templating languages that are available with Hugo. \n\nPongo2 is a Django-syntax like template-engine for Go.\n\nhttps://github.com/flosch/pongo2\n\nThis would be helpful for those switching from a Twig/Django/Liquid environment. Syntax very familiar. Also, it includes the very powerful `extends` template inheritance functionality.', 'title': 'Add Pongo2 Template engine or another Django-syntax like template-engine for Go', 'type': 'issue'}
 {'action': 'created', 'author': 'bep', 'comment_id': 312417495.0, 'datetime': '2017-07-01 07:49:57+00:00', 'masked_author': 'username_1', 'text': 'This issue has been automatically marked as stale because it has not been commented on for at least six months.\n\nThe resources of the Hugo team are limited, and so we are asking for your help.\n\nIf this is a **bug** and you can still reproduce this error on the <code>master</code> branch, please reply with all of the information you have about it in order to keep the issue open.\n\nIf this is a **feature request**, and you feel that it is still relevant and valuable, please tell us why.\n\nThis issue will automatically be closed in the near future if no further activity occurs. Thank you for all your contributions.', 'title': None, 'type': 'comment'}
 {'action': 'closed', 'author': 'bep', 'comment_id': None, 'datetime': '2017-07-01 07:58:27+00:00', 'masked_author': 'username_1', 'text': '', 'title': None, 'type': 'issue'}
 {'action': 'created', 'author': 'binyamin', 'comment_id': 1009544636.0, 'datetime': '2022-01-11 02:32:29+00:00', 'masked_author': 'username_2', 'text': ""@username_1 Since Hugo no longer supports Ace or Amber, can this issue be reopened?\r\n\r\nAs a static-site builder, I find it odd that the only templating language Hugo supports is the one provided by Go. This essentially locks you into the Go ecosystem, which is less than ideal. Go templates can be confusing, since they're not similar to popular alternatives (eg. pug, jinja/nunjucks, django/liquid, mustache, handlebars)."", 'title': None, 'type': 'comment'}]","<issue_start><issue_comment>Title: Add Pongo2 Template engine or another Django-syntax like template-engine for Go
username_0: I would like to request that the Pongo2 Template Language be added as one of the templating languages that are available with Hugo. 

Pongo2 is a Django-syntax like template-engine for Go.

https://github.com/flosch/pongo2

This would be helpful for those switching from a Twig/Django/Liquid environment. Syntax very familiar. Also, it includes the very powerful `extends` template inheritance functionality.
<issue_comment>username_1: This issue has been automatically marked as stale because it has not been commented on for at least six months.

The resources of the Hugo team are limited, and so we are asking for your help.

If this is a **bug** and you can still reproduce this error on the <code>master</code> branch, please reply with all of the information you have about it in order to keep the issue open.

If this is a **feature request**, and you feel that it is still relevant and valuable, please tell us why.

This issue will automatically be closed in the near future if no further activity occurs. Thank you for all your contributions.<issue_closed>
<issue_comment>username_2: @username_1 Since Hugo no longer supports Ace or Amber, can this issue be reopened?

As a static-site builder, I find it odd that the only templating language Hugo supports is the one provided by Go. This essentially locks you into the Go ecosystem, which is less than ideal. Go templates can be confusing, since they're not similar to popular alternatives (eg. pug, jinja/nunjucks, django/liquid, mustache, handlebars)."
processing/p5.js-website,219351614,88,,"[{'action': 'opened', 'author': 'sharethewisdom', 'comment_id': None, 'datetime': '2017-04-04 19:06:22+00:00', 'masked_author': 'username_0', 'text': ""I'm using Chromium v. 57.0.2987.133 (64-bit) on GNU-Linux (8.4.13-1-ARCH) to navigate through the p5 reference pages. Every so often (in intervals ranging from about .5 < 4 seconds) the browser falls behind. \r\n\r\nSometimes I can't move the pointer for up to two seconds! And if I play sound or video in a background tab, it seems to seek back?! Using devtools, I observed the timeline and call stack. Here are some of the violations I get in the console. Note that I had disabled my extensions, and had only two tabs open.\r\n\r\n```\r\n[Violation] 'setTimeout' handler took 54ms\r\n[Violation] 'requestAnimationFrame' handler took 1555ms\r\np5.min.js:6 [Violation] Handling of 'wheel' input event was delayed for 1868 ms due to main thread being busy. Consider marking event handler as 'passive' to make the page more responsive.\r\n[Violation] 'requestAnimationFrame' handler took 1816ms\r\n[Violation] 'mousemove' handler took 965ms\r\n[Violation] Forced reflow while executing JavaScript took 965ms\r\n[Violation] 'requestAnimationFrame' handler took 1781ms\r\n[Violation] 'requestAnimationFrame' handler took 1289ms\r\netc ...\r\n```\r\n\r\nIs the wildcard animation really necessary? I think most users would agree that this experience makes the reference pages completely unusable. In an issue in the p5 repo, offline documentation is proposed. That did not really work for me (it depends on some php page?). I'd personally rather have it presented in one big happy plain text file or a pdf version anyway. I'm willing to contribute to that."", 'title': ""[Violation] 'requestAnimationFrame' handler took 1816ms"", 'type': 'issue'}
 {'action': 'created', 'author': 'limzykenneth', 'comment_id': 291764899.0, 'datetime': '2017-04-05 06:16:55+00:00', 'masked_author': 'username_1', 'text': ""@username_0 If it is correct to assume there isn't much difference between Chromium and Chrome in regards to this issue then it actually isn't a problem. The `Violation` messages are warnings not errors, everything still works as expected. The reason they appear is because the app is not optimised perfectly but the cause of slow down probably the message themselves. You can turn the `Violation` message off and you should hopefully see the performance is at least acceptable. See this stackoverflow [question](http://stackoverflow.com/questions/41218507/violation-long-running-javascript-task-took-xx-ms/41218580) too.\r\n\r\nAs for the offline reference the issue you looked at was a bit outdated. It no longer depends on a PHP script to build and is built along with the website itself simultaneously. The jQuery version of the site was recently updated which was not reflected on the reference page, I'll be fixing that in an upcoming PR. Any other format for documentation you may need to consult @username_3"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'cruznik', 'comment_id': 406017008.0, 'datetime': '2018-07-18 17:47:11+00:00', 'masked_author': 'username_2', 'text': 'i\'m facing this issue but i can confirm this is not browser related. it is happening on a single computer, i mean the app works perfectly on other laptops same Chrome version, (not showing the violation error), also I\'ve discarded network issues (another laptop connected to same network). I keep reading that those ""Violation"" messages are warning not errors (which makes sense) but it the laptop i\'m facing the error, the application indeed stop working after this ""[Violation] ... handler ... "" message appear, also i can confirm the app is not the issue here because others apps are facing the same issue also in that laptop, also tried other browser and issue persists so the only clue i have is that may be something regarding OS configuration. (maybe a security config?) Windows 10 - Version 1803 (os build 17134.165)', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'limzykenneth', 'comment_id': 406153743.0, 'datetime': '2018-07-19 04:49:35+00:00', 'masked_author': 'username_1', 'text': ""@username_2 What is the version of Chrome you are using? Most of the time when we say browser related it meant that it is happening in a specific browser only (ie only in Chrome and not in Firefox, Safari, etc). It differs between computers are probably because the processing power of the computers are different so this performance related warning may not show up for all computers (I'm guessing the one that is not showing the violation error is newer/have more powerful processor/has less processes running in the background?).\r\n\r\nAs far as I can find, unless you are using Canary build of Chrome there are no reports of this warning stopping code execution. Can you take a screen shot of the console messages and post it here? Thanks."", 'title': None, 'type': 'comment'}
 {'action': 'closed', 'author': 'lmccart', 'comment_id': None, 'datetime': '2019-03-16 20:38:44+00:00', 'masked_author': 'username_3', 'text': '', 'title': None, 'type': 'issue'}
 {'action': 'created', 'author': 'lmccart', 'comment_id': 473591043.0, 'datetime': '2019-03-16 20:38:44+00:00', 'masked_author': 'username_3', 'text': ""closing this because we can't reproduce. please comment here if there's more info and we can reopen. thanks!"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'sharethewisdom', 'comment_id': 473713387.0, 'datetime': '2019-03-17 20:49:54+00:00', 'masked_author': 'username_0', 'text': ""thanks, at this time I can't reproduce it either (using Firefox 65.0.2 on linux 4.20.0-arch1-1-ARCH)\r\n\r\nI also tried the offline reference in Firefox and the only issue was [a NetworkError when attempting to fetch resource](https://developer.mozilla.org/en-US/docs/Tools/Debugger/Source_map_errors?utm_source=mozilla&utm_medium=firefox-console-errors&utm_campaign=default#NetworkError_when_attempting_to_fetch_resource) for underscore-min.js and backbone-min.js. On that MDN page, it is suggested *to manually change the map URL to a public one (http://localhost:1234/file.map.js) and start a local webserver at this port.* I'll try that, because I want to keep documentation available offline in the LAN at a CoderDojo."", 'title': None, 'type': 'comment'}]","<issue_start><issue_comment>Title: [Violation] 'requestAnimationFrame' handler took 1816ms
username_0: I'm using Chromium v. 57.0.2987.133 (64-bit) on GNU-Linux (8.4.13-1-ARCH) to navigate through the p5 reference pages. Every so often (in intervals ranging from about .5 < 4 seconds) the browser falls behind. 

Sometimes I can't move the pointer for up to two seconds! And if I play sound or video in a background tab, it seems to seek back?! Using devtools, I observed the timeline and call stack. Here are some of the violations I get in the console. Note that I had disabled my extensions, and had only two tabs open.

```
[Violation] 'setTimeout' handler took 54ms
[Violation] 'requestAnimationFrame' handler took 1555ms
p5.min.js:6 [Violation] Handling of 'wheel' input event was delayed for 1868 ms due to main thread being busy. Consider marking event handler as 'passive' to make the page more responsive.
[Violation] 'requestAnimationFrame' handler took 1816ms
[Violation] 'mousemove' handler took 965ms
[Violation] Forced reflow while executing JavaScript took 965ms
[Violation] 'requestAnimationFrame' handler took 1781ms
[Violation] 'requestAnimationFrame' handler took 1289ms
etc ...
```

Is the wildcard animation really necessary? I think most users would agree that this experience makes the reference pages completely unusable. In an issue in the p5 repo, offline documentation is proposed. That did not really work for me (it depends on some php page?). I'd personally rather have it presented in one big happy plain text file or a pdf version anyway. I'm willing to contribute to that.
<issue_comment>username_1: @username_0 If it is correct to assume there isn't much difference between Chromium and Chrome in regards to this issue then it actually isn't a problem. The `Violation` messages are warnings not errors, everything still works as expected. The reason they appear is because the app is not optimised perfectly but the cause of slow down probably the message themselves. You can turn the `Violation` message off and you should hopefully see the performance is at least acceptable. See this stackoverflow [question](http://stackoverflow.com/questions/41218507/violation-long-running-javascript-task-took-xx-ms/41218580) too.

As for the offline reference the issue you looked at was a bit outdated. It no longer depends on a PHP script to build and is built along with the website itself simultaneously. The jQuery version of the site was recently updated which was not reflected on the reference page, I'll be fixing that in an upcoming PR. Any other format for documentation you may need to consult @username_3
<issue_comment>username_2: i'm facing this issue but i can confirm this is not browser related. it is happening on a single computer, i mean the app works perfectly on other laptops same Chrome version, (not showing the violation error), also I've discarded network issues (another laptop connected to same network). I keep reading that those ""Violation"" messages are warning not errors (which makes sense) but it the laptop i'm facing the error, the application indeed stop working after this ""[Violation] ... handler ... "" message appear, also i can confirm the app is not the issue here because others apps are facing the same issue also in that laptop, also tried other browser and issue persists so the only clue i have is that may be something regarding OS configuration. (maybe a security config?) Windows 10 - Version 1803 (os build 17134.165)
<issue_comment>username_1: @username_2 What is the version of Chrome you are using? Most of the time when we say browser related it meant that it is happening in a specific browser only (ie only in Chrome and not in Firefox, Safari, etc). It differs between computers are probably because the processing power of the computers are different so this performance related warning may not show up for all computers (I'm guessing the one that is not showing the violation error is newer/have more powerful processor/has less processes running in the background?).

As far as I can find, unless you are using Canary build of Chrome there are no reports of this warning stopping code execution. Can you take a screen shot of the console messages and post it here? Thanks.<issue_closed>
<issue_comment>username_3: closing this because we can't reproduce. please comment here if there's more info and we can reopen. thanks!
<issue_comment>username_0: thanks, at this time I can't reproduce it either (using Firefox 65.0.2 on linux 4.20.0-arch1-1-ARCH)

I also tried the offline reference in Firefox and the only issue was [a NetworkError when attempting to fetch resource](https://developer.mozilla.org/en-US/docs/Tools/Debugger/Source_map_errors?utm_source=mozilla&utm_medium=firefox-console-errors&utm_campaign=default#NetworkError_when_attempting_to_fetch_resource) for underscore-min.js and backbone-min.js. On that MDN page, it is suggested *to manually change the map URL to a public one (http://localhost:1234/file.map.js) and start a local webserver at this port.* I'll try that, because I want to keep documentation available offline in the LAN at a CoderDojo."
flutter/website,838976339,5533,"{'number': 5533.0, 'repo': 'website', 'user_login': 'flutter'}","[{'action': 'opened', 'author': 'nt4f04uNd', 'comment_id': None, 'datetime': '2021-03-23T17:53:44Z', 'masked_author': 'username_0', 'text': 'fixes https://github.com/flutter/website/issues/4193', 'title': 'added windows where command note', 'type': 'issue'}
 {'action': 'created', 'author': 'domesticmouse', 'comment_id': 807936826.0, 'datetime': '2021-03-26 05:03:14+00:00', 'masked_author': 'username_1', 'text': ""For Windows knowledge, I'd be tempted to ask @timsneath and @username_3 as they know more about Windows than I ever will =)"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'sfshaza2', 'comment_id': 807949728.0, 'datetime': '2021-03-26 05:33:26+00:00', 'masked_author': 'username_2', 'text': 'Yeah, I know that they are experts, but I am concerned about how slammed they are.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'csells', 'comment_id': 808305099.0, 'datetime': '2021-03-26 15:23:58+00:00', 'masked_author': 'username_3', 'text': ""where.exe on Windows will find the patterns you give it on the path, including partial patterns, e.g. 'where.exe flutter dart' will show flutter and dart folders and .exe and .bat commands. Assuming that we're asking people to put flutter.bat and dart.bat on their path, then we should ask them to call 'where flutter.bat dart.bat' on Windows (or 'where.exe flutter.bat dart.bat' in PowerShell)."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'nt4f04uNd', 'comment_id': 808315360.0, 'datetime': '2021-03-26 15:34:37+00:00', 'masked_author': 'username_0', 'text': ""i am not sure what you mean by that\r\nhttps://github.com/flutter/website/blob/31e56b0db795906f1376591d3abaf39f1809f5a9/src/docs/get-started/install/_get-sdk-win.md#update-your-path\r\n\r\nwe are adding just a `bin` folder to access all the scripts from it, it contains both bat and file without extensions\r\n\r\n![image](https://user-images.githubusercontent.com/39104740/112655768-cbf90a80-8e61-11eb-9450-76970ba194cd.png)\r\n\r\nother than that i don't see how adding `.bat` at the end would work, because it outputs\r\n\r\n```\r\nc:\\>where flutter.bat dart.bat\r\nc:\\dev\\src\\flutter\\bin\\flutter.bat\r\nc:\\dev\\src\\flutter\\bin\\dart.bat\r\n```\r\n\r\nvs\r\n\r\n```\r\nc:\\dev\\src\\flutter\\bin\\flutter\r\nc:\\dev\\src\\flutter\\bin\\flutter.bat\r\nc:\\dev\\src\\flutter\\bin\\dart\r\nc:\\dev\\src\\flutter\\bin\\dart.bat\r\nc:\\dev\\src\\dart-sdk\\bin\\dart.exe\r\n```\r\n\r\nthis is because `dart-sdk/bin` contains `dart.exe`, not `dart.bin`"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'nt4f04uNd', 'comment_id': 808318734.0, 'datetime': '2021-03-26 15:39:52+00:00', 'masked_author': 'username_0', 'text': 'does most of the google really use unix-like systems 🙂?', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'sfshaza2', 'comment_id': 808331885.0, 'datetime': '2021-03-26 16:00:15+00:00', 'masked_author': 'username_2', 'text': ""@username_0, I can't speak for all of Google, but, on my team, yes. I've been using Unix since I entered college in 1977, probably before you were born.  ;) I attended UC Berkeley and got a degree in computer science. They will have to pry Unix from my cold, dead hands.  :D"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'sfshaza2', 'comment_id': 808333328.0, 'datetime': '2021-03-26 16:02:17+00:00', 'masked_author': 'username_2', 'text': 'And thanks for your feedback, @username_3!', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'sfshaza2', 'comment_id': 810529870.0, 'datetime': '2021-03-30 19:43:58+00:00', 'masked_author': 'username_2', 'text': '@username_0, can you address the feedback left by @username_3?', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'nt4f04uNd', 'comment_id': 810532465.0, 'datetime': '2021-03-30 19:48:24+00:00', 'masked_author': 'username_0', 'text': ""the feedback left in https://github.com/flutter/website/pull/5533#discussion_r602378230 was addressed with https://github.com/flutter/website/pull/5533/commits/31e56b0db795906f1376591d3abaf39f1809f5a9, hence i marked the conversation as resolved\r\n\r\nhttps://github.com/flutter/website/pull/5533#issuecomment-808315360 was left unanswered\r\n\r\nso i'm not sure about what feedback you are talking about, can you elaborate?"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'sfshaza2', 'comment_id': 810534257.0, 'datetime': '2021-03-30 19:51:33+00:00', 'masked_author': 'username_2', 'text': ""Sorry, I missed that, @username_0! In the unresolved issue, you make a good point that your answer is correct, so I'm going to merge. Thx!"", 'title': None, 'type': 'comment'}]","<issue_start><issue_comment>Title: added windows where command note
username_0: fixes https://github.com/flutter/website/issues/4193
<issue_comment>username_1: For Windows knowledge, I'd be tempted to ask @timsneath and @username_3 as they know more about Windows than I ever will =)
<issue_comment>username_2: Yeah, I know that they are experts, but I am concerned about how slammed they are.
<issue_comment>username_3: where.exe on Windows will find the patterns you give it on the path, including partial patterns, e.g. 'where.exe flutter dart' will show flutter and dart folders and .exe and .bat commands. Assuming that we're asking people to put flutter.bat and dart.bat on their path, then we should ask them to call 'where flutter.bat dart.bat' on Windows (or 'where.exe flutter.bat dart.bat' in PowerShell).
<issue_comment>username_0: i am not sure what you mean by that
https://github.com/flutter/website/blob/31e56b0db795906f1376591d3abaf39f1809f5a9/src/docs/get-started/install/_get-sdk-win.md#update-your-path

we are adding just a `bin` folder to access all the scripts from it, it contains both bat and file without extensions

![image](https://user-images.githubusercontent.com/39104740/112655768-cbf90a80-8e61-11eb-9450-76970ba194cd.png)

other than that i don't see how adding `.bat` at the end would work, because it outputs

```
c:\>where flutter.bat dart.bat
c:\dev\src\flutter\bin\flutter.bat
c:\dev\src\flutter\bin\dart.bat
```

vs

```
c:\dev\src\flutter\bin\flutter
c:\dev\src\flutter\bin\flutter.bat
c:\dev\src\flutter\bin\dart
c:\dev\src\flutter\bin\dart.bat
c:\dev\src\dart-sdk\bin\dart.exe
```

this is because `dart-sdk/bin` contains `dart.exe`, not `dart.bin`
<issue_comment>username_0: does most of the google really use unix-like systems 🙂?
<issue_comment>username_2: @username_0, I can't speak for all of Google, but, on my team, yes. I've been using Unix since I entered college in 1977, probably before you were born.  ;) I attended UC Berkeley and got a degree in computer science. They will have to pry Unix from my cold, dead hands.  :D
<issue_comment>username_2: And thanks for your feedback, @username_3!
<issue_comment>username_2: @username_0, can you address the feedback left by @username_3?
<issue_comment>username_0: the feedback left in https://github.com/flutter/website/pull/5533#discussion_r602378230 was addressed with https://github.com/flutter/website/pull/5533/commits/31e56b0db795906f1376591d3abaf39f1809f5a9, hence i marked the conversation as resolved

https://github.com/flutter/website/pull/5533#issuecomment-808315360 was left unanswered

so i'm not sure about what feedback you are talking about, can you elaborate?
<issue_comment>username_2: Sorry, I missed that, @username_0! In the unresolved issue, you make a good point that your answer is correct, so I'm going to merge. Thx!"
gohugoio/hugo,314306472,4616,,"[{'action': 'opened', 'author': 'onedrawingperday', 'comment_id': None, 'datetime': '2018-04-14 07:12:26+00:00', 'masked_author': 'username_0', 'text': ""Basically what the GDPR does is to limit Data Collection to the bare minimum. A setup as the one I propose above would make the Hugo GA internal template GDPR compliant but at the expense of GA reporting.\r\n\r\nIt's up to the community to decide how to go about this."", 'title': 'Hugo Internal templates GDPR compliant', 'type': 'issue'}
 {'action': 'created', 'author': 'onedrawingperday', 'comment_id': 381310469.0, 'datetime': '2018-04-14 07:32:02+00:00', 'masked_author': 'username_0', 'text': 'YouTube\r\n---\r\nIn the run up to GDPR enforcement Google has began offering video embedding under the domain youtube-no-cookie.com so that cookies are not set on a user\'s device when a video is embedded in website that he/she visits.\r\n\r\nHugo\'s [current internal YouTube template](https://github.com/gohugoio/hugo/blob/2e95ec6844bf65a25485bdc8e2638e45788f2dcf/tpl/tplimpl/template_embedded.go#L40-L48) needs to change  to the following:\r\n\r\n```\r\nt.addInternalShortcode(""youtube.html"", `{{ if .IsNamedParams }}\r\n<div {{ if .Get ""class"" }}class=""{{ .Get ""class"" }}""{{ else }}style=""position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;""{{ end }}>\r\n  <iframe src=""//www.youtube-nocookie.com/embed/{{ .Get ""id"" }}?{{ with .Get ""autoplay"" }}{{ if eq . ""true"" }}autoplay=1{{ end }}{{ end }}""\r\n  {{ if not (.Get ""class"") }}style=""position: absolute; top: 0; left: 0; width: 100%; height: 100%;"" {{ end }}allowfullscreen frameborder=""0"" title=""YouTube Video""></iframe>\r\n</div>{{ else }}\r\n<div {{ if len .Params | eq 2 }}class=""{{ .Get 1 }}""{{ else }}style=""position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;""{{ end }}>\r\n  <iframe src=""//www.youtube-nocookie.com/embed/{{ .Get 0 }}"" {{ if len .Params | eq 1 }}style=""position: absolute; top: 0; left: 0; width: 100%; height: 100%;"" {{ end }}allowfullscreen frameborder=""0"" title=""YouTube Video""></iframe>\r\n </div>\r\n{{ end }}`)\r\n```\r\n\r\nBasically the change is from `www.youtube.com` to `www.youtube-nocookie.com`', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'onedrawingperday', 'comment_id': 381359157.0, 'datetime': '2018-04-14 20:42:42+00:00', 'masked_author': 'username_0', 'text': 'A clarification about the YouTube-no cookie above.\r\n\r\nTouTube offers this privacy enhanced option since 2009 and it will not set cookies until a user clicks to play a video, or so it claims. \r\n\r\nI discovered that there’s been some controversy about it in the past.\r\n\r\nBut unless Google decides to offer a better privacy embed solution it’s all we got.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'onedrawingperday', 'comment_id': 381555942.0, 'datetime': '2018-04-16 10:36:07+00:00', 'masked_author': 'username_0', 'text': ""Modified Google Analytics. snippet. Version 2.\r\n---\r\n\r\nThe snippet I posted above checks whether Session Storage is available in the client's browser and if it's not it creates the Google Analytics cookies the old way.\r\n\r\nThat's not allowed under the GDPR without opt-in. So I have modified the snippet to use Session Storage only. Of course this will only work on browsers that support Session Storage see: https://caniuse.com/#search=sessionstorage\r\n\r\nBut then again I don't think Hugo should support non modern browsers.\r\n\r\nHere is the final GDPR compliant snippet tested and working.\r\n```\r\n    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\r\n    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\r\n    m=s.getElementsByTagName(o)\r\n    [0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\r\n    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');\r\n\r\nvar GA_SESSION_STORAGE_KEY = 'ga:clientId';\r\n\r\n  ga('create', 'UA-XXXXX-Y', {\r\n    'storage': 'none',\r\n    'clientId': sessionStorage.getItem(GA_SESSION_STORAGE_KEY)\r\n  });\r\n  ga(function(tracker) {\r\n    sessionStorage.setItem(GA_SESSION_STORAGE_KEY, tracker.get('clientId'));\r\n  });\r\nga('send', 'pageview');\r\n```\r\nOf course Google might come up with a better GDPR compliant offering by the 25th of May but this the best solution I've come up with and it's compliant because it doesn't set persistent cookies or Local Storage on a visitor's device."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'it-gro', 'comment_id': 381688631.0, 'datetime': '2018-04-16 17:40:57+00:00', 'masked_author': 'username_1', 'text': 'This is about Disqus.com and the internal disqus template\r\n`hugo/tpl/tplimpl/template_embedded.go`\r\n\r\nI\'m not a layer - but browsing to\r\nhttps://disqus.com/admin/\r\nI see user comments (of the site I\'m the admin) including  the users nickname, the email address the user used for registration and the IP-address.\r\nQuestion is, if this is GDPR relevant? *Processing personal data*.\r\nhttps://help.disqus.com/moderation/moderating-101\r\n\r\nAnyway - here\'s a proposal - Please comment.\r\n\r\n```\r\n{{ if .Site.DisqusShortname }}<div id=""disqus_thread""></div>\r\n<script>\r\n    var disqus_config = function () {\r\n    {{with .GetParam ""disqus_identifier"" }}this.page.identifier = \'{{ . }}\';{{end}}\r\n    {{with .GetParam ""disqus_title"" }}this.page.title = \'{{ . }}\';{{end}}\r\n    {{with .GetParam ""disqus_url"" }}this.page.url = \'{{ . | html  }}\';{{end}}\r\n    };\r\n    function disqusAgree(){\r\n      localStorage.setItem(""agreed_to_disqus_thread"", ""YES"");\r\n      localStorage.setItem(""agreed_to_disqus_thread_date"", (new Date()).toLocaleString() );\r\n      location.reload();\r\n    };\r\n    (function() {\r\n        if ([""localhost"", ""127.0.0.1""].indexOf(window.location.hostname) != -1) {\r\n            document.getElementById(\'disqus_thread\').innerHTML = \'Disqus comments not available by default when the website is previewed locally.\';\r\n            return;\r\n        }\r\n      {{- if ne ($.Param ""disqusSkipAgree"") true }}\r\n        if ((localStorage.getItem(""agreed_to_disqus_thread"") != ""YES"") ) {\r\n          document.getElementById(\'disqus_thread\').innerHTML = \'{{ (default `Show comments powered by [disqus.com](https://disqus.com)` (i18n `disqusTxtAgree`) ) | markdownify }} <button id=""agree-to-disqus"" type=""button"" onclick=""disqusAgree()"">{{default `Show me` (i18n `disqusBtnAgree`)}}</button>\';\r\n          return;\r\n        }\r\n      {{- end }}\r\n        var d = document, s = d.createElement(\'script\'); s.async = true;\r\n        s.src = \'//\' + {{ .Site.DisqusShortname }} + \'.disqus.com/embed.js\';\r\n        s.setAttribute(\'data-timestamp\', +new Date());\r\n        (d.head || d.body).appendChild(s);\r\n    })();\r\n</script>\r\n<noscript>Please enable JavaScript to view the <a href=""https://disqus.com/?ref_noscript"">comments powered by Disqus.</a></noscript>\r\n{{end}}\r\n```\r\n\r\nThe part\'s I added:\r\n```\r\n      {{- if ne ($.Param ""disqusSkipAgree"") true }}\r\n        if ((localStorage.getItem(""agreed_to_disqus_thread"") != ""YES"") ) {\r\n          document.getElementById(\'disqus_thread\').innerHTML = \'{{ (default `Show comments powered by [disqus.com](https://disqus.com)` (i18n `disqusTxtAgree`) ) | markdownify }} <button id=""agree-to-disqus"" type=""button"" onclick=""disqusAgree()"">{{default `Show me` (i18n `disqusBtnAgree`)}}</button>\';\r\n          return;\r\n        }\r\n      {{- end }}\r\n```\r\n\r\nBy setting \r\n```toml\r\n[params]\r\n  disqusSkipAgree = true\r\n```\r\nThe new behaviour is turned off.\r\n\r\nIf not set or <> true\r\nA visitor first has to press a button in order to see the comments.\r\nThe browsers local storage is used to remember his ""agreement"".\r\n\r\nI think the text should be changeable.\r\n=>\r\nText besides the button:\r\n```\r\n(default `Show comments powered by [disqus.com](https://disqus.com)` (i18n `disqusTxtAgree`) ) | markdownify\r\n```\r\nThe button itself\r\n```\r\ndefault `Show me` (i18n `disqusBtnAgree`)\r\n```\r\n\r\nThis way (if `i18n` is accessible inside a internal template?) users can modify the text:\r\n\r\n`i18n/en.yaml`\r\n[Truncated]\n  translation: ""Show comments powered by [disqus.com](https://disqus.com). Agree to the [Terms](/terms)""\r\n\r\n- id: ""disqusBtnAgree""\r\n  translation: ""Yes, I Agree""\r\n```\r\n(/terms would be the reference to the site terms, needed by GDPR)\r\n\r\n\r\n```js\r\n    function disqusAgree(){\r\n      localStorage.setItem(""agreed_to_disqus_thread"", ""YES"");\r\n      localStorage.setItem(""agreed_to_disqus_thread_date"", (new Date()).toLocaleString() );\r\n      location.reload();\r\n    };\r\n```\r\n\r\nThis is the function called by clicking the button. It stores a YES and a readable time stamp. \r\nIf once pressed, the button will not show again (until the local storage is cleared).\r\n\r\nWhat do you think?', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'onedrawingperday', 'comment_id': 382084785.0, 'datetime': '2018-04-17 17:55:58+00:00', 'masked_author': 'username_0', 'text': '@username_2 I don’t use Google Tag Manager for Google Analytics but see this post for all the tweaks that someone suggests: https://www.humix.be/en/blog/configure-google-analytics-for-gdpr/\r\n\r\nUnder the GDPR whenever an identifier is stored in a user’s device in the form persistent cookies or local storage or the recording of an IP address etc a website is required by the new regulation to offer user opt-in. This means that tracking needs to be disabled by default and enabled only if a user agrees to it. \r\n\r\nIn my above proposal I have tried to make Google Analytics fall outside the scope of the GDPR by not storing anything persistent on a user’s device and moving the GA client ID to session storage.\r\n\r\nIf you can come up with something similar for Google Tag Manager (that is now the default Analytics tracking code), YouTube or any other of Hugo’s internal templates for third party services that would help a lot.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'brunoamaral', 'comment_id': 382089659.0, 'datetime': '2018-04-17 18:11:21+00:00', 'masked_author': 'username_2', 'text': ""Alright, then just to sum up what I know and share with others:\r\n\r\nThe default install of google tag manager (GTM) will only fire events to Google Analytics or one of it's other tracking apps. It does not store information, and if the Google Analytics implementation is done in the way you describe above, the admin of the site can rest assured.\r\n\r\nThe problem comes up when you use google tagmanager itself to fire the Google Analytics tag, in this way:\r\n![image](https://user-images.githubusercontent.com/543344/38888004-454fbc1a-4272-11e8-9b57-ccf8219d8e78.png)\r\n\r\nThat {{Universal Analytics ID}} is a variable that sets options for the GA script. Here is the implementation I use at username_2.eu:\r\n\r\n![image](https://user-images.githubusercontent.com/543344/38888078-857c938a-4272-11e8-8fdd-e60bed2abf01.png)\r\n\r\nI'm using the same anonymizeIp option you suggested, but so far have not found an equivalent to the other options you set.\r\n\r\n**In short**, if the admin is using GTM as a one-stop-shop for events and setup of the Universal Analytics Code, the compliance with GDPR falls on his shoulders. He needs to configure it on the GTM workspace. The default code for GTM does not break GDRP, as far as I know.\r\n\r\nI will keep looking into this and report back if I find anything relevant."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'gedw99', 'comment_id': 382356418.0, 'datetime': '2018-04-18 11:34:17+00:00', 'masked_author': 'username_3', 'text': 'This is really useful. \r\nMy partner is going to a conference on the new directives this week.\r\n\r\nIf there is a hugo sample template repo being setup to show how Hugo should be done I will be happy to contribute all the aspects we learn and code that is relevant.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'onedrawingperday', 'comment_id': 382363133.0, 'datetime': '2018-04-18 12:02:49+00:00', 'masked_author': 'username_0', 'text': ""@username_3 You can view the source of Hugo's internal templates at: https://github.com/gohugoio/hugo/blob/master/tpl/tplimpl/template_embedded.go"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'gedw99', 'comment_id': 382426401.0, 'datetime': '2018-04-18 15:24:58+00:00', 'masked_author': 'username_3', 'text': '@username_0 \r\ni never knew hugo has a default template that it uses. So if you dont give it any theme to use is uses this ?', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'brunoamaral', 'comment_id': 382456494.0, 'datetime': '2018-04-18 16:57:17+00:00', 'masked_author': 'username_2', 'text': ""@username_3 these internal templates need to explicit on the theme in order to be used.\r\n\r\n@username_0 I have been doing some research and am wondering about the approach of using LocalStorage. It's still identifiable information, and may still be in the scope of GDPR. Question is if we should wait for the user to agree to cookies before activating google analytics or not."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'onedrawingperday', 'comment_id': 382456646.0, 'datetime': '2018-04-18 16:57:51+00:00', 'masked_author': 'username_0', 'text': ""@username_5 asked me to open this issue to make the Hugo internal templates GDPR compliant. When the regulation is enforced come May the 25th, Hugo site admins will have to seek user consent as legal basis for the data collection of the 3rd party services that are enabled by these internal Hugo templates. Otherwise they will be breaking the new regulation and might face heavy fines. However this does not apply only to EU and EEA based websites but also to every web platform that has a European audience.\r\n\r\nIt's up to the Hugo community to decide what they want to do. Make Hugo GDPR compliant and break some eggs or leave things as they stand now and leave Hugo users fend for themselves."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'onedrawingperday', 'comment_id': 382460530.0, 'datetime': '2018-04-18 17:10:47+00:00', 'masked_author': 'username_0', 'text': ""@username_2 \r\nLocal Storage is persistent Session Storage is not. In the GA snippet I posted above I have moved everything into Session Storage, so that once the browser tab is shut there will be no GA identifier in a user's device. Also the IP address of a visitor will be masked and no personal information is transmitted.\r\n\r\nI also think that it would be prudent to have a  notice asking users to agree to a website's privacy policy. See the new GDPR notice of https://www.nike.com\r\n\r\nMaybe Google will start offering a GDPR compliant tracking code for Google Analytics (but I very much doubt it)."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'jhabdas', 'comment_id': 382981123.0, 'datetime': '2018-04-20 05:26:10+00:00', 'masked_author': 'username_4', 'text': ""Regarding YouTube No Cookies, they're using a script loader and injecting a minified script on the page now. Here's an example and a crumb trail to more info on what that script does on SO: https://www.reddit.com/r/privacy/comments/8clrzn/google_your_backdoor_to_the_internet/"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'bep', 'comment_id': 382982294.0, 'datetime': '2018-04-20 05:32:51+00:00', 'masked_author': 'username_5', 'text': 'Just want to chime and say that I have not forgotten about this, just have been ... kind of busy on other fronts.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'it-gro', 'comment_id': 382993377.0, 'datetime': '2018-04-20 06:29:21+00:00', 'masked_author': 'username_1', 'text': '@username_0 \r\n*avoid making consent to processing a precondition of a service.*\r\nIt is my understanding that the the ""service"" is the static page build using hugo.\r\nNot agreeing to the hugo site ""discus terms"" does not stop this service (showing pages and posts on the site) for the visitor. But it affects the ability to see or make any comments (using discus.com) which is not a service of the hugo site (but from discus.com). \r\nGDPR compliant agreement for the site is needed since the site-admin can see / process visitors personal data on the discus.com admin site (see [discourse.gohugo.io](https://discourse.gohugo.io/t/hugo-vs-the-general-data-protection-regulations-gdpr-in-eu-eea/11526/22)).', 'title': None, 'type': 'comment'}
 {'action': 'closed', 'author': 'onedrawingperday', 'comment_id': None, 'datetime': '2018-04-20 07:28:51+00:00', 'masked_author': 'username_0', 'text': '', 'title': None, 'type': 'issue'}
 {'action': 'created', 'author': 'onedrawingperday', 'comment_id': 383007758.0, 'datetime': '2018-04-20 07:28:51+00:00', 'masked_author': 'username_0', 'text': '@it', 'title': None, 'type': 'comment'}
 {'action': 'reopened', 'author': 'onedrawingperday', 'comment_id': None, 'datetime': '2018-04-20 07:29:03+00:00', 'masked_author': 'username_0', 'text': ""Basically what the GDPR does is to limit Data Collection to the bare minimum. A setup as the one I propose above would make the Hugo GA internal template GDPR compliant but at the expense of GA reporting.\r\n\r\nIt's up to the community to decide how to go about this."", 'title': 'Hugo Internal templates GDPR compliant', 'type': 'issue'}
 {'action': 'created', 'author': 'onedrawingperday', 'comment_id': 383008198.0, 'datetime': '2018-04-20 07:30:33+00:00', 'masked_author': 'username_0', 'text': 'Ah! I accidentally closed the issue and reopened... presses wrong button on the phone. Apologies.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'onedrawingperday', 'comment_id': 383018550.0, 'datetime': '2018-04-20 08:08:37+00:00', 'masked_author': 'username_0', 'text': ""@username_4 \r\nThanks for the heads up. I've made a few tests but I cannot see this script being loaded on my end with the `youtube-nookie` iframe.\r\n\r\nCan you please tell me what you see on your end? Where is the script loaded? In the parent DOM or within the iframe? (checked both and the console and I couldn't find it). Also does it load before or after video playback?\r\n\r\nThanks"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'TotallyInformation', 'comment_id': 383026716.0, 'datetime': '2018-04-20 08:37:12+00:00', 'masked_author': 'username_6', 'text': 'I have received an update from Google regarding GDPR compliance and the use of GA. I can post here if required.\r\n\r\nThey have added granular data retention controls and user deletion. They have also updated their user consent policy.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'it-gro', 'comment_id': 383026896.0, 'datetime': '2018-04-20 08:37:52+00:00', 'masked_author': 'username_1', 'text': 'Which may be done via this: \r\n\r\n`i18n/en.yaml`\r\n```yaml\r\n- id: ""disqusTxtAgree""\r\n  translation: ""Show comments powered by [disqus.com](https://disqus.com). Agree to the [Terms](/terms)""\r\n```\r\n(see [Example](https://username_1.github.io/hugo-theme-w3css-basic.github.io/blog/2017/11/10/hugo-dolor/))', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'gedw99', 'comment_id': 383044856.0, 'datetime': '2018-04-20 09:45:01+00:00', 'masked_author': 'username_3', 'text': 'Nice. Could you post the message from google. Curious to learn for other\nproject.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'onedrawingperday', 'comment_id': 383384560.0, 'datetime': '2018-04-22 14:14:16+00:00', 'masked_author': 'username_0', 'text': 'Instagram\r\n---\r\n**Summary**\r\nThe default Instagram oEmbed endpoint -as used in the current Hugo internal shortcode- injects persistent cookies and local storage that cannot be blocked through the Instagram embeds.js JavaScript library.\r\n\r\nTo make the shortcode GDPR compliant -and by that I mean disable Instagram\'s user tracking- I propose to re-construct the HTML structure of the Instagram embed through the shortcode.\r\n\r\nThere are a number of caveats with this approach:\r\n\r\n1.  The oEmbed endpoint JSON as seen for example [here](https://api.instagram.com/oembed/?url=https://www.instagram.com/p/BWNjjyYFxVx/&amp;maxwidth=1080&amp;omitscript=true) does not contain user data keys. That means that the hover card with user posts, number of followers, the photo likes and the user avatar are simply out of reach.\r\n\r\n2. The Instagram API [is going to be deprecated completely by 2020](https://www.instagram.com/developer/) and will be replace by the Instagram (Facebook) Graph API that currently is open only for business. I am not currently aware whether they\'re going to eliminate the oEmbed endpoint.\r\n\r\n---\r\n**Proposal**\r\nThe input of the internal Instagram shortcode will be kept as is: `{{< instagram BWNjjyYFxVx hidecaption >}}`\r\n\r\nBut everything within it will be completely different: [See Gist here](https://gist.github.com/username_0/72aee54932c46f51e310f1e2335c5c64).\r\n\r\nBasically I am ranging through the JSON keys that are available through the Instagram oEmbed endpoint.\r\n\r\nTo get the user avatar I am proposing the following: `{{ $.Page.Params.inst_avatar | default $.Site.Params.inst_avatar }}` this means that users who wish the internal shortcode will need to declare the address of the User Avatar either on their site\'s config or in the frontmatter of a page. (Obviously this is for embed from one Instagram user per page).\r\n\r\nTo get the Instagram embed styling I have modified their external stylesheet because it is meant for an iframe and it contains generic CSS rules that will conflict with any Hugo theme out there. [See the Gist](https://gist.github.com/username_0/f813181b74e6bdf63be01f41ad39b623) with the modified stylesheet.\r\n\r\nI am proposing to load this custom stylesheet conditionally in the `<head>` tag like so:\r\n`{{ with .HasShortcode ""instagram"" }}<link rel=""stylesheet"" href=""/inst.css"" />{{ end }}`\r\n\r\nNote that within the CSS I am calling the Instagram controls sprite that lives in this address: [https://www.instagram.com/static/bundles/base/sprite_embed.png/6bbbe175e361.png](https://www.instagram.com/static/bundles/base/sprite_embed.png/6bbbe175e361.png) as sprite.png and I am proposing it to server it from `/static/`.\r\n\r\nI have eliminated the likes count from the proposed interna shortcode because as I said above there is not way to get them through the oEmbed endpoint.\r\n\r\nWhen constructing the Instagram embed URL I have appended the following: `""/&amp;maxwidth=640&amp;omitscript=true""` because 640 pixels is the maximum thumbnail width available and also I want to omit Instagram\'s Javascript Libraries.\r\n\r\nTo extract the Instagram photo timestamp from Instagram\'s `html` JSON key I had to resort to some RegEx. See the Gist [here](https://gist.github.com/username_0/72aee54932c46f51e310f1e2335c5c64#file-gistfile1-txt-L59).\r\n\r\nIn order to render the time difference since an Instagram photo post was created -in the form of the default Instagram embed- I am proposing the use of [timeago.js](http://timeago.org/) a tiny 2kb library.\r\n\r\nWithin the shortcode I\'ve created the following structure: `<span class=""ago"" datetime=""{{ $date }}""></span>`\r\n\r\nAnd then in the `<footer>` tag of a page I am conditionally loading timeago.js and rendering the timestamp like this:\r\n\r\n`{{ with .HasShortcode ""instagram"" }}<script src=""/timeago.min.js"" type=""text/javascript""><script>timeago().render(document.querySelectorAll(\'.ago\'));</script>{{ end }}`\r\n\r\n----\r\n**Notes**\r\nThe above offers a GDPR compliant privacy enhanced Instagram embed. But this technique can be applied in the Hugo internal shortcodes and templates of other 3rd party services  like Disqus and Twitter.\r\n\r\nThe downside is that this is a time consuming approach and also that Hugo users will need to specify additional parameters, CSS and JS for the internal shortcodes and templates to function.\r\n\r\nCC / @username_5 @username_1', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'bep', 'comment_id': 386543251.0, 'datetime': '2018-05-04 09:01:12+00:00', 'masked_author': 'username_5', 'text': '@username_0 I have added you as a collaborator to this repo, if you don\'t see an invite, let me know.\r\n\r\nI have created a branch we can work on:\r\n\r\nhttps://github.com/gohugoio/hugo/tree/GDPR\r\n\r\nOnce we\'re happy with the content of that, we merge it into master and make a release.\r\n\r\nThis is a working branch, so amend as you please, but I suggest that we -- to illustrate that we have put some sweat and hard work into this -- merge the commits as they are (not so much squashing...), so write some sensible commit messages ... with imperative mood ...\r\n\r\nMy first commit in that branch is how I see the configuration.\r\n\r\n```toml\r\nbaseURL = ""https://example.com\r\n\r\n[privacy]\r\n[privacy.youtube]\r\nnoCookie = true\r\n`\r\nThe above can be done per language, and the idea is to add new sections/flags as needed where the default when not set is off.\r\n\r\nWe should add a ""GPPR table"" in the docs somewhere (probably its own page) where we list all of these.\r\n\r\nNote, that I have not used the above setting anywhere, but in a template:\r\n\r\n```\r\n{{ if .Site.PrivacyConfig.YouTube.NoCookie }}\r\n\r\n{{ end }}\r\n```\r\n\r\nWill work. And as the above setting will be available to end users, we should take a little care about naming etc. As it will be set in stone, more or less.\r\n\r\nSounds like a plan?', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'onedrawingperday', 'comment_id': 386551284.0, 'datetime': '2018-05-04 09:38:12+00:00', 'masked_author': 'username_0', 'text': ""Yup! Pretty much. So that whenever `.Site.PrivacyConfig.<service>` is set the GDPR versions of the internal templates and shortcodes will be enabled.\r\n\r\nThat's very cool and backwards compatible.\r\n\r\nI need some feedback though regarding my proposal for the [Instagram](https://github.com/gohugoio/hugo/issues/4616#issuecomment-383384560) shortcode. I have a stylesheet that needs to be included and also proposed the use of `timeago.js`. \r\n\r\nMy idea is to rebuild the HTML of the embeds (Instagram, Twitter) without the tracking. There are features missing from the public oEmbed API most notably the likes count. \r\n\r\nI very much doubt that a user with an Access Token for the official APIs would have their app approved for bypassing the official embeds that have the tracking.\r\n\r\nIs this is a sensible approach? Do you agree with it? If yes what would be the most efficient way to include the stylesheet and timeago.js \r\n\r\nAlso as I said above the Instagram API is in a transition period and we might need to revisit this in the future."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'bep', 'comment_id': 386552626.0, 'datetime': '2018-05-04 09:44:24+00:00', 'masked_author': 'username_5', 'text': 'On an added note: The internal templates are all ""hardcoded"", i.e. inline, which makes them harder to edit than needed.\r\n\r\nI can pull them out into files? (I even think there is an issue for that)', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'kaushalmodi', 'comment_id': 386586245.0, 'datetime': '2018-05-04 12:29:01+00:00', 'masked_author': 'username_7', 'text': '[Yes][1] 😃 \r\n\r\n[1]: https://github.com/gohugoio/hugo/issues/4457', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'bep', 'comment_id': 386590966.0, 'datetime': '2018-05-04 12:48:41+00:00', 'masked_author': 'username_5', 'text': ""... and now figure out how to embed files in a Go binary ... So much I don't know."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'onedrawingperday', 'comment_id': 386658076.0, 'datetime': '2018-05-04 16:37:45+00:00', 'masked_author': 'username_0', 'text': ""Yes I've noticed. Also #4700 will perhaps make it possible to include the assets that will be needed for the new templates."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'bep', 'comment_id': 386671914.0, 'datetime': '2018-05-04 17:30:28+00:00', 'masked_author': 'username_5', 'text': 'What kind of assets is that? Note that my PR is all about simpler management/administration/editing, it does not add any ""asset bundling"".', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'onedrawingperday', 'comment_id': 386676248.0, 'datetime': '2018-05-04 17:46:16+00:00', 'masked_author': 'username_0', 'text': 'Ok.\r\n\r\n@username_5 Whenever you have the time please review my work for the Instagram shortcode. See my comment [above](https://github.com/gohugoio/hugo/issues/4616#issuecomment-386551284) and the Instagram proposal [here](https://github.com/gohugoio/hugo/issues/4616#issuecomment-383384560).\r\n\r\nI really need to know what you think. \r\n\r\nAnd by assets I meant the CSS and JS that need to go into the Instagram & Twitter shortcodes and if you want to implement a consent for the YouTube shortcode like this [one](https://discourse-cdn-sjc2.com/standard12/uploads/gohugo/optimized/2X/9/927ca9fff35e5de0cbbc3ca4433950fb8b620fe7_1_668x500.png) that will also need some CSS and JS.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'bep', 'comment_id': 386689017.0, 'datetime': '2018-05-04 18:13:17+00:00', 'masked_author': 'username_5', 'text': ""I think our ambitions are a little misaligned and I will have to think hard about it. In general, I expect the services that we use to have privacy options in their APIs to turn stuff off. And I also expect them to have the consent forms etc. I spend enough hours on this project as is, and I'm not too keen on adding forms and user interface to the simple shortcodes. That will also lure us into a territory where we must take special care about the implementation, browser testing etc. All in all something that we are not manpowered to do."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'bep', 'comment_id': 386743964.0, 'datetime': '2018-05-04 21:48:35+00:00', 'masked_author': 'username_5', 'text': ""I will look into this in detail during the weekend. But we are a static provider.  I don't see how we possibly can have a consent screen on behalf of Google. That does not make sense on any level. Esp. since that concent is only stored in local storage (where is the tracking/documentation of that?) \r\n\r\nSo the trick up the sleave for the services that do not provide an API for this is, as I currently see it, this:\r\n\r\n```\r\n{ { not .Site.Privacy.YouTube.Disabled }}\r\nShow youtube\r\n\r\n{{ end }}\r\n```\r\n\r\nThat would effectively block any youtube shortcode. Which would be GDPR compliant."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'bep', 'comment_id': 386744762.0, 'datetime': '2018-05-04 21:53:03+00:00', 'masked_author': 'username_5', 'text': ""@spf13 what is Google's take on this?"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'jhabdas', 'comment_id': 386776189.0, 'datetime': '2018-05-05 03:39:44+00:00', 'masked_author': 'username_4', 'text': 'Perhaps the intentions are good but, as it stands, it simply robs Peter to pay Paul. And it will have consequences such as the ""we use cookies"" banners you see everywhere nowadays. They\'re terrible. Everyone knows data collection occurs online. What they don\'t know is cookies are only the tip of the iceberg. And that\'s where the answer lies.\r\n\r\nRather than overreaching to try and protect people (leaving them essentially stupid) it would be better IMHO to give them the tools and knowledge necessary to make their own choices. In the context of GDPR that means stripping out anything related to Google, or YouTube, or whatever, and leaving a cookbook along with some caveats for those who want to take the plunge.\r\n\r\nIf it weren\'t for these terrible companies (e.g. Google) we wouldn\'t be blessed with things like DuckDuckGo or browsers like Firefox Focus or Brave. Nevertheless I applaud all of you for your work. I hope you\'re not overthinking it too much.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'jhabdas', 'comment_id': 386776676.0, 'datetime': '2018-05-05 03:50:56+00:00', 'masked_author': 'username_4', 'text': ""Here's the example and it may be dependent on the fact I stopped using Google Analytics on my site a few months ago: https://hackcabin.com/mine/build/3-coin-8-gpu-gtx1060-mining-rig/\r\n\r\nThat page is using a shortcode I created called PrivacyTube which, as it turns out, replaces Google's DART cookie (which I had blocked at the `hosts` file level anyway) with a script loader they started co cajole into the page anyway—likely reducing my privacy more than when I had the blocked DART cookie."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'onedrawingperday', 'comment_id': 386782590.0, 'datetime': '2018-05-05 06:07:14+00:00', 'masked_author': 'username_0', 'text': ""The cookbook seems unlikely. It wouldn't be proper to include a resource for GDPR compliant privacy practices in the Hugo Docs."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'jhabdas', 'comment_id': 386785257.0, 'datetime': '2018-05-05 07:04:44+00:00', 'masked_author': 'username_4', 'text': 'Agreed. Was thinking the other way around. The cookbook would explain how to add stuff to become not GDPR compliant with caveat to do so at your own peril. Then again, you guys are the experts and have been braining on this I just wanted to add my two pennies regarding how I see it all shaking out.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'bep', 'comment_id': 386787954.0, 'datetime': '2018-05-05 07:54:54+00:00', 'masked_author': 'username_5', 'text': 'There are lots of stuff here, so let us take the most important part:\r\n\r\n**Is a consent form that shows some text with a yes/no that stores that flag into local storage good enough according to GDPR?**\r\n\r\nIf yes, we should _consider_ \r\n\r\n* making a `consent` shortcode that only shows the inner content if the user has pushed the OK button for that particular shortcode.\r\n* we should also somehow ""decorate"" the current relevant internal templates with this in respect to their privacy setting\r\n\r\nBut we cannot build something like this per template/shortcode. That will not be way too much work.\r\n\r\nBut first someone must dig into the `consent` part and figure out if a warning of this type is good enough.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'bep', 'comment_id': 386790192.0, 'datetime': '2018-05-05 08:39:53+00:00', 'masked_author': 'username_5', 'text': ""Which doesn't work with what I read above."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'onedrawingperday', 'comment_id': 386790870.0, 'datetime': '2018-05-05 08:53:09+00:00', 'masked_author': 'username_0', 'text': ""Also see the UK Information Commisioner's Office [page](https://ico.org.uk/for-organisations/guide-to-the-general-data-protection-regulation-gdpr/lawful-basis-for-processing/consent/)\r\n\r\nThat is why my friend I have tried to make the embeds NOT to require consent by:\r\nPutting the Google Analytics Client ID cookie to session storage.\r\nRebuild the HTML of the Instagram embed from scratch with no tracking.\r\nChanged the YouTube embed to nocookie so that Google does not set its goodies on a user's device before she clicks play. (a minimal notice will be needed or make the shortcode play the video directly on YouTube's site, that is turn it into a fancy link with the video thumb and a play button that opens in a new window)\r\n\r\nIf you decide to go down the CONSENT shortcode shortcode road we need to provide some kind of form so that a Hugo site admin can collect the user consent for their records.\r\n\r\nAlso we might need another WITHDRAW CONSENT shortcode that clear all Local Storage from a Hugo site. So that if a visitor wants to withdraw consent they can do it. \r\n\r\nBoth these shortcodes CONSENT and WITHDRAW require JS.\r\n\r\nObviously the GDPR is no fun.\r\n\r\nBut if you prefer to go with the simplest solution and that is to offer Hugo site admins the privacy option to disable all 3rd party services then what you've already posted will be GDPR compliant\r\n\r\n```\r\n{{ if not .Site.Privacy.YouTube.Disabled }}\r\nShow youtube\r\n\r\n{{ end }}\r\n\r\nBut then again people will either use this and turn off content they need from these 3rd party services or fend for themselves and try to work it out on their own.\r\n\r\nThe decision is yours.\r\n```"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'it-gro', 'comment_id': 386791688.0, 'datetime': '2018-05-05 09:09:05+00:00', 'masked_author': 'username_1', 'text': 'But I read this this way:\r\nAfter withdrawing no **new** personal data shall be processed.\r\nSo no need to remove the personal data history since for this history the consent was given.\r\nFor Disqus:\r\n* There could be a withdraw button setting agreed_to_disqus_thread to ""NO""\r\n* This would end the storing of new personal data\r\n\r\nBut I see no way how to remove the personal data (IP, email) on the disqus site as an admin of a hugo site using disqus - except removing the comments of the withdrawing visitor. But as a hugo site admin - I will have no knowledge of his withdrawing...', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'onedrawingperday', 'comment_id': 386791784.0, 'datetime': '2018-05-05 09:11:11+00:00', 'masked_author': 'username_0', 'text': '@username_1\r\nTime to migrate from Disqus.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'bep', 'comment_id': 386798823.0, 'datetime': '2018-05-05 11:28:18+00:00', 'masked_author': 'username_5', 'text': 'I think we need to take this in steps.\r\n\r\nCould someone, in table form, list the services and their related config options? When listing those, think that it should be flags that should be ""turned on"" (default = false). And the default should be the most useful value (not the most private value).\r\n\r\nIf Disqus is the only one that requires a consent form to be somewhat useful, I\'m tempted to wait with that (because it is a lot of work to get right), and add this setting to all services:\r\n\r\n```\r\n[disqus]\r\ndisabled = true\r\n```\r\nDisqus should really step up to the plate and ... fix this.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'onedrawingperday', 'comment_id': 386809760.0, 'datetime': '2018-05-05 14:33:03+00:00', 'masked_author': 'username_0', 'text': '@username_5 \r\nHere is a tentative table.\r\n\r\n```\r\n[privacy]\r\n[privacy.googleAnalytics]\r\ndisabled = false\r\n\r\n[privacy.disqus]\r\ndisabled = true\r\n\r\n[privacy.youtube]\r\ndisabled = false \r\nnoCookie = true\r\n\r\n[privacy.vimeo]\r\ndisabled = false\r\n\r\n[privacy.twitter]\r\ndisabled = false\r\navatar = """" # URL string\r\n\r\n[privacy.instagram]\r\ndisabled = false\r\navatar = """" # URL string\r\n\r\n[privacy.speakerdeck]\r\ndisabled = false\r\n```\r\nNow what each of these settings does depends upon what you have in mind.\r\n\r\nI\'m not familiar with SpeakerDeck. They set 1 cookie that expires about 30 minutes after a user visit and another Session Cookie. \r\n\r\nTwitter and Vimeo both have oEmbed APIs\r\n\r\nIf want to see live DEMOS of what I\'ve done with Instagram and YouTube just ask and I\'ll put them online.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'bep', 'comment_id': 386836104.0, 'datetime': '2018-05-05 21:26:06+00:00', 'masked_author': 'username_5', 'text': '@username_1 note that I will think really hard about what to do about Disqus and consent etc. Your code looks clean and good, but I think we need to think really hard about what we want to maintain as a project. Any UI code is ""only if we really have to"". \r\n\r\n@username_0 thanks for the overview. I will follow up on this tomorrow.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'it-gro', 'comment_id': 386842372.0, 'datetime': '2018-05-05 23:34:49+00:00', 'masked_author': 'username_1', 'text': 'Yes, I  agree.\r\n\r\nOne (extreme?) option could be to remove things like Disqus  from the hugo core.\r\nA repo with templates, partials, shortcodes could be better. There the theme or project authors could ""steal"" from. They would be in charge for any improvements - and they could share them. Kind of templates / partials / shortcodes gallery.\r\n\r\nBut of course since currently there are such internal templates / shortcodes we just can\'t drop them. A freeze (=doing and breaking nothing) and later on a ""deprecated"" message on stdout could be done. So ""pushing"" the users to the new and fancy versions in a separate repo.\r\n\r\nI found 64 themes (in https://github.com/gohugoio/hugoThemes) currently using `_internal/disqus.html` - but of course there are many more in the ""wild"".\r\n\r\nIn a user ""templates / partials / shortcodes gallery"" we probably would see some toolkit specific stuff (css classes, ...) (=> tagging, categorising, ... would be very important). There\'s a risk that we will end up in ""tons of variations"" of the same thing (e.g. disqus).\r\n\r\nSuch a repo is not a new idea:\r\n[discourse shoud-we-add-internal-shortcodes-for-popular-services](https://discourse.gohugo.io/t/shoud-we-add-internal-shortcodes-for-popular-services/2085/7)\r\n[discourse creating-new-internal-short-codes](https://discourse.gohugo.io/t/creating-new-internal-short-codes/2716/6)\r\n\r\nI\'m perfectly fine if we don\'t use anything of my proposal. It may be a starting point - at least for some discussions...', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'onedrawingperday', 'comment_id': 386856950.0, 'datetime': '2018-05-06 06:14:30+00:00', 'masked_author': 'username_0', 'text': ""@username_5 \r\nI forgot to say that in the above table I haven't included options for the Gist internal shortcode because I see no tracking from GitHub's part in pages with embedded gists.\r\n\r\nGitHub is pretty cool!👍"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'onedrawingperday', 'comment_id': 386889414.0, 'datetime': '2018-05-06 15:55:22+00:00', 'masked_author': 'username_0', 'text': ""I've looked a bit more into the Speaker Deck embed. (Didn't know that it's owned by GitHub).\r\n\r\nThe bad news is that I cannot find an official API for it. \r\nThe embed contains the old Google Analytics tracking code ga.js\r\nAlso it contains jQuery and all sorts of stuff from other CDNs.\r\n\r\nI don't think there is much to do about it. It's either building a consent form for Speaker Deck's data collection or spend hours trying to rebuild the embed without the tracking.\r\n\r\nI don't use Speaker Deck so I will not look into it further."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'onedrawingperday', 'comment_id': 386893912.0, 'datetime': '2018-05-06 17:05:41+00:00', 'masked_author': 'username_0', 'text': ""@username_2  Hm... you're talking about this type of screen:\r\n\r\n![medium](https://user-images.githubusercontent.com/7918298/39675694-a092782a-5167-11e8-8100-61975d0ccf76.png)\r\n\r\nWe've already discussed this above with DuckDuckGo's similar approach to YouTube videos.\r\n\r\nIt's doable in Hugo -at least I know how to do it-.\r\n\r\nBut at this stage it's @username_5 's call on whether he wants to go down this road.\r\n\r\nMaybe what @username_1 said above about making a separate repo for GPDR/privacy enhanced shortcodes and taking them out of Hugo core is the way forward.\r\n\r\nThis is a FOSS project after all. Not a multi-million hedge funded start-up."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'onedrawingperday', 'comment_id': 386909226.0, 'datetime': '2018-05-06 20:05:12+00:00', 'masked_author': 'username_0', 'text': 'Google Analytics Version 3\r\n---\r\nAfter @username_2 \'s comment here is a modified proposal for the Hugo GA internal shortcode that respects Do-Not-Track and conditionally loads Google Analytics, along with the other Privacy settings I\'ve outlined above.\r\n\r\n```\r\nvar dnt = navigator.doNotTrack || window.doNotTrack || navigator.msDoNotTrack;\r\n  if (dnt != ""1"" && dnt != ""yes"") {\r\n(function(i,s,o,g,r,a,m){i[\'GoogleAnalyticsObject\']=r;i[r]=i[r]||function(){\r\n    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\r\n    m=s.getElementsByTagName(o)\r\n    [0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\r\n    })(window,document,\'script\',\'//www.google-analytics.com/analytics.js\',\'ga\');\r\nvar GA_SESSION_STORAGE_KEY = \'ga:clientId\';\r\n  ga(\'create\', \'UA-XXXXX-Y\', {\r\n    \'storage\': \'none\',\r\n    \'clientId\': sessionStorage.getItem(GA_SESSION_STORAGE_KEY)\r\n  });\r\n  ga(function(tracker) {\r\n    sessionStorage.setItem(GA_SESSION_STORAGE_KEY, tracker.get(\'clientId\'));\r\n  });\r\nga(\'set\', \'anonymizeIp\', true);\r\nga(\'send\', \'pageview\');\r\n} else {\r\n    console.debug(""Respecting Do-Not-Track, not loading analytics."");\r\n  }\r\n```\r\nNOTE\r\nwindow.doNotTrack is for Safari/IE11/Edge\r\nnavigator.msDoNotTrack is for IE9/10\r\nFirefox <32 uses ""yes"" not 1\r\n\r\nCREDIT \r\n[https://gist.github.com/paulfurley/bb900465c21b8570d8763af9a07fcfc7#file-google-analytics-html](https://gist.github.com/paulfurley/bb900465c21b8570d8763af9a07fcfc7#file-google-analytics-html)', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'onedrawingperday', 'comment_id': 386997470.0, 'datetime': '2018-05-07 08:34:28+00:00', 'masked_author': 'username_0', 'text': ""As things are now it seems unlikely they will, unless they have to. \r\n\r\nFor example have a look into this very informative issue about [Google Fonts and GDPR compliance](https://github.com/google/fonts/issues/1495).\r\n\r\nGoogle's silence is deafening."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'onedrawingperday', 'comment_id': 388328334.0, 'datetime': '2018-05-11 10:40:19+00:00', 'masked_author': 'username_0', 'text': ""Currently I am refactoring my proposal for the Instagram shortcode.\r\n\r\n- Removed  the `timeago.js` dependency and managed to output the elapsed time value with Hugo's math functions. The value is static and gets updated whenever a Hugo site is published.\r\n- Added optional parameters to enter the URL of a user's Instagram avatar directly from the shortcode input, while taking into account the existing `hidecaption` parameter.\r\n- Simplified the CSS and HTML.\r\n- Now designing some SVG icons, so that the embed controls look good at any screen resolution.\r\n\r\nAnyway I just wanted to let you know that I'm still looking into improving this.\r\n\r\nBTW the GDPR is 14 days away."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'bep', 'comment_id': 389691878.0, 'datetime': '2018-05-16 22:57:30+00:00', 'masked_author': 'username_5', 'text': 'Note to self:\r\n\r\nPut all the remote services (getJSON etc.) in the privacy policy config.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'erkinalp', 'comment_id': 390187871.0, 'datetime': '2018-05-18 12:13:29+00:00', 'masked_author': 'username_8', 'text': 'BTW the GDPR is 7 days away.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'onedrawingperday', 'comment_id': 390517909.0, 'datetime': '2018-05-20 22:31:36+00:00', 'masked_author': 'username_0', 'text': ""@username_5 I haven't finished working on this. So there is no branch with committed changes I'm afraid.\r\n\r\nBut you can see some WIP at this [repo](https://github.com/username_0/hugo-test/tree/master)\r\n\r\nYou want to have a look at the YouTube and Instagram shortcodes and the file under` /content/drawing/tilos-dream/`.\r\n\r\nI'm not done with Instagram yet (I haven't finished prefixing and optimizing the CSS, this shortcode has taken ages because of all the limitation with the oEmbed API like expiring image URLs for Carousel posts, no availability of Video thumbnails etc.).\r\n\r\nAnyway my work here will give you a good idea of what I've been trying to do.\r\n\r\nPlease note that there is a need for CSS in these proposals. Maybe you can think of a better more global way to include these styles in Hugo?\r\n\r\nAlso there is more useful information in Open Graph tags than in oEmbed APIs. \r\n\r\nMaking GDPR compliant shortcodes would be much easier if a `getOpenGraph` Hugo function is ever developed. See the Feature Request at the [forum](https://discourse.gohugo.io/t/feature-request-getopengraph-func/12022/12) (in case you haven't)."", 'title': None, 'type': 'comment'}
 {'action': 'closed', 'author': 'bep', 'comment_id': None, 'datetime': '2018-05-25 15:50:23+00:00', 'masked_author': 'username_5', 'text': '', 'title': None, 'type': 'issue'}
 {'action': 'created', 'author': 'bep', 'comment_id': 392101110.0, 'datetime': '2018-05-25 15:50:23+00:00', 'masked_author': 'username_5', 'text': 'I will close this for now. There are still work to do here, but we need to continue that in a shorter thread... Thanks to all for the input!', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'rwieruch', 'comment_id': 392221992.0, 'datetime': '2018-05-26 00:46:56+00:00', 'masked_author': 'username_9', 'text': '@username_5 I think lots of people where following this thread for GDPR. Where can people follow this issue now? Really looking forward to the anonymized IP address for GA 👍', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'gerrywastaken', 'comment_id': 639442176.0, 'datetime': '2020-06-05 12:07:58+00:00', 'masked_author': 'username_10', 'text': ""@username_5 @username_9  I'm a bit confused by the summary of this issue. I read thought this:\r\nhttps://gohugo.io/about/hugo-and-gdpr/\r\n\r\nIt seems like the summary is just... if you want to enable privacy you need to disable all services. But shouldn't it instead be that the third party services are disabled if the user doesn't give consent?\r\n\r\nI guess I'm just not clear on the advantage of setting `disabled = true` over just not including the shortcode.\r\n\r\nFurther to this I see that https://github.com/gohugoio/hugo/pull/4776 was suggested as a solution for Google Analytics, but it still stores an identifier in a temporary session. Does this negate the need for consent?\r\n\r\nI understand that this is an extremely complex topic. I don't believe legislators understood just how technically infeasible some of these restrictions where, especially in the case of Hugo were we actually don't want to store user data, but do wish to embed things like Youtube videos or maybe know how many visitors we have had in a way that doesn't infringe on privacy.\r\n\r\nAs a user the current situation is infuriating as I'm now constantly bombarded with notices on every single site I open all for something that was already easily addressed by a browser extension.\r\n\r\nSo I get that there are no simple answers, but the top of the Hugo and GDPR page makes it sound like the issue is already solved when really it's not. I think adding an acknowledgement of this and the challenges would be much more helpful and a link to this topic to show how the work already put in. I think we should mention that we don't really have a solution to this issue as doing so would require immense effort and ironically would require us to store more data about users and turn the project into something that is working around the lack of compliance by major service providers such as Youtube, Disqus etc.\r\n\r\nJust my thoughts. I had to read through this whole thread before I realised that there wasn't really a resolution to this, only improvements."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'brunoamaral', 'comment_id': 639464409.0, 'datetime': '2020-06-05 12:58:31+00:00', 'masked_author': 'username_2', 'text': 'If I recall correctly, yes. The regulation is explicit in mentioning cookies, so Google suggests this method instead. Cookies are also cleared less often than temporary session data.\r\n\r\nIt respects the letter of the regulation, but not the spirit of it.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'gerrywastaken', 'comment_id': 640070847.0, 'datetime': '2020-06-06 14:35:24+00:00', 'masked_author': 'username_10', 'text': '@username_2 The only reference to cookies I could find is this:\r\nhttps://gdpr-info.eu/?s=cookie\r\n\r\nWhich also says:\r\n""or other identifiers""\r\n\r\nIf anything based on what I read it seems that the spirit of it is to protect user privacy and enable them not to be tracked if they don\'t wish to be and if they do wish to be it should be informed consent. I think the changes here go a long way to that goal by anonymising personal data and making it difficult for visitors to be tracked by limiting things to the session. There has clearly been tremendous effort put into this and honorable intentions, I\'m just wondering if it goes far enough in terms of the ""letter of the regulation"" as you put it.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'brunoamaral', 'comment_id': 640100558.0, 'datetime': '2020-06-06 18:31:51+00:00', 'masked_author': 'username_2', 'text': 'That excerpt is not a part of any of the articles put forth here: https://eur-lex.europa.eu/legal-content/EN/TXT/HTML/?uri=CELEX:32016R0679&from=EN . It actually comes as a soft of introduction.\r\n\r\nEverything else you are saying is correct, the point is that with the information collected we should not be able to identify a single individual. Parts of the GDPR mention privacy by design and protecting Personal Identifiable Information as key elements of the regulation.\r\n\r\nThat being said, it is possible to save session information and making it impossible to identify the user in question.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'bep', 'comment_id': 640121832.0, 'datetime': '2020-06-06 21:42:05+00:00', 'masked_author': 'username_5', 'text': 'This issue is closed. Open a new one if you think there is work to be done here.', 'title': None, 'type': 'comment'}]","<issue_start><issue_comment>Title: Hugo Internal templates GDPR compliant
username_0: Basically what the GDPR does is to limit Data Collection to the bare minimum. A setup as the one I propose above would make the Hugo GA internal template GDPR compliant but at the expense of GA reporting.

It's up to the community to decide how to go about this.
<issue_comment>username_0: YouTube
---
In the run up to GDPR enforcement Google has began offering video embedding under the domain youtube-no-cookie.com so that cookies are not set on a user's device when a video is embedded in website that he/she visits.

Hugo's [current internal YouTube template](https://github.com/gohugoio/hugo/blob/2e95ec6844bf65a25485bdc8e2638e45788f2dcf/tpl/tplimpl/template_embedded.go#L40-L48) needs to change  to the following:

```
t.addInternalShortcode(""youtube.html"", `{{ if .IsNamedParams }}
<div {{ if .Get ""class"" }}class=""{{ .Get ""class"" }}""{{ else }}style=""position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;""{{ end }}>
  <iframe src=""//www.youtube-nocookie.com/embed/{{ .Get ""id"" }}?{{ with .Get ""autoplay"" }}{{ if eq . ""true"" }}autoplay=1{{ end }}{{ end }}""
  {{ if not (.Get ""class"") }}style=""position: absolute; top: 0; left: 0; width: 100%; height: 100%;"" {{ end }}allowfullscreen frameborder=""0"" title=""YouTube Video""></iframe>
</div>{{ else }}
<div {{ if len .Params | eq 2 }}class=""{{ .Get 1 }}""{{ else }}style=""position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;""{{ end }}>
  <iframe src=""//www.youtube-nocookie.com/embed/{{ .Get 0 }}"" {{ if len .Params | eq 1 }}style=""position: absolute; top: 0; left: 0; width: 100%; height: 100%;"" {{ end }}allowfullscreen frameborder=""0"" title=""YouTube Video""></iframe>
 </div>
{{ end }}`)
```

Basically the change is from `www.youtube.com` to `www.youtube-nocookie.com`
<issue_comment>username_0: A clarification about the YouTube-no cookie above.

TouTube offers this privacy enhanced option since 2009 and it will not set cookies until a user clicks to play a video, or so it claims. 

I discovered that there’s been some controversy about it in the past.

But unless Google decides to offer a better privacy embed solution it’s all we got.
<issue_comment>username_0: Modified Google Analytics. snippet. Version 2.
---

The snippet I posted above checks whether Session Storage is available in the client's browser and if it's not it creates the Google Analytics cookies the old way.

That's not allowed under the GDPR without opt-in. So I have modified the snippet to use Session Storage only. Of course this will only work on browsers that support Session Storage see: https://caniuse.com/#search=sessionstorage

But then again I don't think Hugo should support non modern browsers.

Here is the final GDPR compliant snippet tested and working.
```
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)
    [0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

var GA_SESSION_STORAGE_KEY = 'ga:clientId';

  ga('create', 'UA-XXXXX-Y', {
    'storage': 'none',
    'clientId': sessionStorage.getItem(GA_SESSION_STORAGE_KEY)
  });
  ga(function(tracker) {
    sessionStorage.setItem(GA_SESSION_STORAGE_KEY, tracker.get('clientId'));
  });
ga('send', 'pageview');
```
Of course Google might come up with a better GDPR compliant offering by the 25th of May but this the best solution I've come up with and it's compliant because it doesn't set persistent cookies or Local Storage on a visitor's device.
<issue_comment>username_1: This is about Disqus.com and the internal disqus template
`hugo/tpl/tplimpl/template_embedded.go`

I'm not a layer - but browsing to
https://disqus.com/admin/
I see user comments (of the site I'm the admin) including  the users nickname, the email address the user used for registration and the IP-address.
Question is, if this is GDPR relevant? *Processing personal data*.
https://help.disqus.com/moderation/moderating-101

Anyway - here's a proposal - Please comment.

```
{{ if .Site.DisqusShortname }}<div id=""disqus_thread""></div>
<script>
    var disqus_config = function () {
    {{with .GetParam ""disqus_identifier"" }}this.page.identifier = '{{ . }}';{{end}}
    {{with .GetParam ""disqus_title"" }}this.page.title = '{{ . }}';{{end}}
    {{with .GetParam ""disqus_url"" }}this.page.url = '{{ . | html  }}';{{end}}
    };
    function disqusAgree(){
      localStorage.setItem(""agreed_to_disqus_thread"", ""YES"");
      localStorage.setItem(""agreed_to_disqus_thread_date"", (new Date()).toLocaleString() );
      location.reload();
    };
    (function() {
        if ([""localhost"", ""127.0.0.1""].indexOf(window.location.hostname) != -1) {
            document.getElementById('disqus_thread').innerHTML = 'Disqus comments not available by default when the website is previewed locally.';
            return;
        }
      {{- if ne ($.Param ""disqusSkipAgree"") true }}
        if ((localStorage.getItem(""agreed_to_disqus_thread"") != ""YES"") ) {
          document.getElementById('disqus_thread').innerHTML = '{{ (default `Show comments powered by [disqus.com](https://disqus.com)` (i18n `disqusTxtAgree`) ) | markdownify }} <button id=""agree-to-disqus"" type=""button"" onclick=""disqusAgree()"">{{default `Show me` (i18n `disqusBtnAgree`)}}</button>';
          return;
        }
      {{- end }}
        var d = document, s = d.createElement('script'); s.async = true;
        s.src = '//' + {{ .Site.DisqusShortname }} + '.disqus.com/embed.js';
        s.setAttribute('data-timestamp', +new Date());
        (d.head || d.body).appendChild(s);
    })();
</script>
<noscript>Please enable JavaScript to view the <a href=""https://disqus.com/?ref_noscript"">comments powered by Disqus.</a></noscript>
{{end}}
```

The part's I added:
```
      {{- if ne ($.Param ""disqusSkipAgree"") true }}
        if ((localStorage.getItem(""agreed_to_disqus_thread"") != ""YES"") ) {
          document.getElementById('disqus_thread').innerHTML = '{{ (default `Show comments powered by [disqus.com](https://disqus.com)` (i18n `disqusTxtAgree`) ) | markdownify }} <button id=""agree-to-disqus"" type=""button"" onclick=""disqusAgree()"">{{default `Show me` (i18n `disqusBtnAgree`)}}</button>';
          return;
        }
      {{- end }}
```

By setting 
```toml
[params]
  disqusSkipAgree = true
```
The new behaviour is turned off.

If not set or <> true
A visitor first has to press a button in order to see the comments.
The browsers local storage is used to remember his ""agreement"".

I think the text should be changeable.
=>
Text besides the button:
```
(default `Show comments powered by [disqus.com](https://disqus.com)` (i18n `disqusTxtAgree`) ) | markdownify
```
The button itself
```
default `Show me` (i18n `disqusBtnAgree`)
```

This way (if `i18n` is accessible inside a internal template?) users can modify the text:

`i18n/en.yaml`
[Truncated]
  translation: ""Show comments powered by [disqus.com](https://disqus.com). Agree to the [Terms](/terms)""

- id: ""disqusBtnAgree""
  translation: ""Yes, I Agree""
```
(/terms would be the reference to the site terms, needed by GDPR)


```js
    function disqusAgree(){
      localStorage.setItem(""agreed_to_disqus_thread"", ""YES"");
      localStorage.setItem(""agreed_to_disqus_thread_date"", (new Date()).toLocaleString() );
      location.reload();
    };
```

This is the function called by clicking the button. It stores a YES and a readable time stamp. 
If once pressed, the button will not show again (until the local storage is cleared).

What do you think?
<issue_comment>username_0: @username_2 I don’t use Google Tag Manager for Google Analytics but see this post for all the tweaks that someone suggests: https://www.humix.be/en/blog/configure-google-analytics-for-gdpr/

Under the GDPR whenever an identifier is stored in a user’s device in the form persistent cookies or local storage or the recording of an IP address etc a website is required by the new regulation to offer user opt-in. This means that tracking needs to be disabled by default and enabled only if a user agrees to it. 

In my above proposal I have tried to make Google Analytics fall outside the scope of the GDPR by not storing anything persistent on a user’s device and moving the GA client ID to session storage.

If you can come up with something similar for Google Tag Manager (that is now the default Analytics tracking code), YouTube or any other of Hugo’s internal templates for third party services that would help a lot.
<issue_comment>username_2: Alright, then just to sum up what I know and share with others:

The default install of google tag manager (GTM) will only fire events to Google Analytics or one of it's other tracking apps. It does not store information, and if the Google Analytics implementation is done in the way you describe above, the admin of the site can rest assured.

The problem comes up when you use google tagmanager itself to fire the Google Analytics tag, in this way:
![image](https://user-images.githubusercontent.com/543344/38888004-454fbc1a-4272-11e8-9b57-ccf8219d8e78.png)

That {{Universal Analytics ID}} is a variable that sets options for the GA script. Here is the implementation I use at username_2.eu:

![image](https://user-images.githubusercontent.com/543344/38888078-857c938a-4272-11e8-8fdd-e60bed2abf01.png)

I'm using the same anonymizeIp option you suggested, but so far have not found an equivalent to the other options you set.

**In short**, if the admin is using GTM as a one-stop-shop for events and setup of the Universal Analytics Code, the compliance with GDPR falls on his shoulders. He needs to configure it on the GTM workspace. The default code for GTM does not break GDRP, as far as I know.

I will keep looking into this and report back if I find anything relevant.
<issue_comment>username_3: This is really useful. 
My partner is going to a conference on the new directives this week.

If there is a hugo sample template repo being setup to show how Hugo should be done I will be happy to contribute all the aspects we learn and code that is relevant.
<issue_comment>username_0: @username_3 You can view the source of Hugo's internal templates at: https://github.com/gohugoio/hugo/blob/master/tpl/tplimpl/template_embedded.go
<issue_comment>username_3: @username_0 
i never knew hugo has a default template that it uses. So if you dont give it any theme to use is uses this ?
<issue_comment>username_2: @username_3 these internal templates need to explicit on the theme in order to be used.

@username_0 I have been doing some research and am wondering about the approach of using LocalStorage. It's still identifiable information, and may still be in the scope of GDPR. Question is if we should wait for the user to agree to cookies before activating google analytics or not.
<issue_comment>username_0: @username_5 asked me to open this issue to make the Hugo internal templates GDPR compliant. When the regulation is enforced come May the 25th, Hugo site admins will have to seek user consent as legal basis for the data collection of the 3rd party services that are enabled by these internal Hugo templates. Otherwise they will be breaking the new regulation and might face heavy fines. However this does not apply only to EU and EEA based websites but also to every web platform that has a European audience.

It's up to the Hugo community to decide what they want to do. Make Hugo GDPR compliant and break some eggs or leave things as they stand now and leave Hugo users fend for themselves.
<issue_comment>username_0: @username_2 
Local Storage is persistent Session Storage is not. In the GA snippet I posted above I have moved everything into Session Storage, so that once the browser tab is shut there will be no GA identifier in a user's device. Also the IP address of a visitor will be masked and no personal information is transmitted.

I also think that it would be prudent to have a  notice asking users to agree to a website's privacy policy. See the new GDPR notice of https://www.nike.com

Maybe Google will start offering a GDPR compliant tracking code for Google Analytics (but I very much doubt it).
<issue_comment>username_4: Regarding YouTube No Cookies, they're using a script loader and injecting a minified script on the page now. Here's an example and a crumb trail to more info on what that script does on SO: https://www.reddit.com/r/privacy/comments/8clrzn/google_your_backdoor_to_the_internet/
<issue_comment>username_5: Just want to chime and say that I have not forgotten about this, just have been ... kind of busy on other fronts.
<issue_comment>username_1: @username_0 
*avoid making consent to processing a precondition of a service.*
It is my understanding that the the ""service"" is the static page build using hugo.
Not agreeing to the hugo site ""discus terms"" does not stop this service (showing pages and posts on the site) for the visitor. But it affects the ability to see or make any comments (using discus.com) which is not a service of the hugo site (but from discus.com). 
GDPR compliant agreement for the site is needed since the site-admin can see / process visitors personal data on the discus.com admin site (see [discourse.gohugo.io](https://discourse.gohugo.io/t/hugo-vs-the-general-data-protection-regulations-gdpr-in-eu-eea/11526/22)).<issue_closed>
<issue_comment>username_0: @it
<issue_comment>username_0: Basically what the GDPR does is to limit Data Collection to the bare minimum. A setup as the one I propose above would make the Hugo GA internal template GDPR compliant but at the expense of GA reporting.

It's up to the community to decide how to go about this.
<issue_comment>username_0: Ah! I accidentally closed the issue and reopened... presses wrong button on the phone. Apologies.
<issue_comment>username_0: @username_4 
Thanks for the heads up. I've made a few tests but I cannot see this script being loaded on my end with the `youtube-nookie` iframe.

Can you please tell me what you see on your end? Where is the script loaded? In the parent DOM or within the iframe? (checked both and the console and I couldn't find it). Also does it load before or after video playback?

Thanks
<issue_comment>username_6: I have received an update from Google regarding GDPR compliance and the use of GA. I can post here if required.

They have added granular data retention controls and user deletion. They have also updated their user consent policy.
<issue_comment>username_1: Which may be done via this: 

`i18n/en.yaml`
```yaml
- id: ""disqusTxtAgree""
  translation: ""Show comments powered by [disqus.com](https://disqus.com). Agree to the [Terms](/terms)""
```
(see [Example](https://username_1.github.io/hugo-theme-w3css-basic.github.io/blog/2017/11/10/hugo-dolor/))
<issue_comment>username_3: Nice. Could you post the message from google. Curious to learn for other
project.
<issue_comment>username_0: Instagram
---
**Summary**
The default Instagram oEmbed endpoint -as used in the current Hugo internal shortcode- injects persistent cookies and local storage that cannot be blocked through the Instagram embeds.js JavaScript library.

To make the shortcode GDPR compliant -and by that I mean disable Instagram's user tracking- I propose to re-construct the HTML structure of the Instagram embed through the shortcode.

There are a number of caveats with this approach:

1.  The oEmbed endpoint JSON as seen for example [here](https://api.instagram.com/oembed/?url=https://www.instagram.com/p/BWNjjyYFxVx/&amp;maxwidth=1080&amp;omitscript=true) does not contain user data keys. That means that the hover card with user posts, number of followers, the photo likes and the user avatar are simply out of reach.

2. The Instagram API [is going to be deprecated completely by 2020](https://www.instagram.com/developer/) and will be replace by the Instagram (Facebook) Graph API that currently is open only for business. I am not currently aware whether they're going to eliminate the oEmbed endpoint.

---
**Proposal**
The input of the internal Instagram shortcode will be kept as is: `{{< instagram BWNjjyYFxVx hidecaption >}}`

But everything within it will be completely different: [See Gist here](https://gist.github.com/username_0/72aee54932c46f51e310f1e2335c5c64).

Basically I am ranging through the JSON keys that are available through the Instagram oEmbed endpoint.

To get the user avatar I am proposing the following: `{{ $.Page.Params.inst_avatar | default $.Site.Params.inst_avatar }}` this means that users who wish the internal shortcode will need to declare the address of the User Avatar either on their site's config or in the frontmatter of a page. (Obviously this is for embed from one Instagram user per page).

To get the Instagram embed styling I have modified their external stylesheet because it is meant for an iframe and it contains generic CSS rules that will conflict with any Hugo theme out there. [See the Gist](https://gist.github.com/username_0/f813181b74e6bdf63be01f41ad39b623) with the modified stylesheet.

I am proposing to load this custom stylesheet conditionally in the `<head>` tag like so:
`{{ with .HasShortcode ""instagram"" }}<link rel=""stylesheet"" href=""/inst.css"" />{{ end }}`

Note that within the CSS I am calling the Instagram controls sprite that lives in this address: [https://www.instagram.com/static/bundles/base/sprite_embed.png/6bbbe175e361.png](https://www.instagram.com/static/bundles/base/sprite_embed.png/6bbbe175e361.png) as sprite.png and I am proposing it to server it from `/static/`.

I have eliminated the likes count from the proposed interna shortcode because as I said above there is not way to get them through the oEmbed endpoint.

When constructing the Instagram embed URL I have appended the following: `""/&amp;maxwidth=640&amp;omitscript=true""` because 640 pixels is the maximum thumbnail width available and also I want to omit Instagram's Javascript Libraries.

To extract the Instagram photo timestamp from Instagram's `html` JSON key I had to resort to some RegEx. See the Gist [here](https://gist.github.com/username_0/72aee54932c46f51e310f1e2335c5c64#file-gistfile1-txt-L59).

In order to render the time difference since an Instagram photo post was created -in the form of the default Instagram embed- I am proposing the use of [timeago.js](http://timeago.org/) a tiny 2kb library.

Within the shortcode I've created the following structure: `<span class=""ago"" datetime=""{{ $date }}""></span>`

And then in the `<footer>` tag of a page I am conditionally loading timeago.js and rendering the timestamp like this:

`{{ with .HasShortcode ""instagram"" }}<script src=""/timeago.min.js"" type=""text/javascript""><script>timeago().render(document.querySelectorAll('.ago'));</script>{{ end }}`

----
**Notes**
The above offers a GDPR compliant privacy enhanced Instagram embed. But this technique can be applied in the Hugo internal shortcodes and templates of other 3rd party services  like Disqus and Twitter.

The downside is that this is a time consuming approach and also that Hugo users will need to specify additional parameters, CSS and JS for the internal shortcodes and templates to function.

CC / @username_5 @username_1
<issue_comment>username_5: @username_0 I have added you as a collaborator to this repo, if you don't see an invite, let me know.

I have created a branch we can work on:

https://github.com/gohugoio/hugo/tree/GDPR

Once we're happy with the content of that, we merge it into master and make a release.

This is a working branch, so amend as you please, but I suggest that we -- to illustrate that we have put some sweat and hard work into this -- merge the commits as they are (not so much squashing...), so write some sensible commit messages ... with imperative mood ...

My first commit in that branch is how I see the configuration.

```toml
baseURL = ""https://example.com

[privacy]
[privacy.youtube]
noCookie = true
`
The above can be done per language, and the idea is to add new sections/flags as needed where the default when not set is off.

We should add a ""GPPR table"" in the docs somewhere (probably its own page) where we list all of these.

Note, that I have not used the above setting anywhere, but in a template:

```
{{ if .Site.PrivacyConfig.YouTube.NoCookie }}

{{ end }}
```

Will work. And as the above setting will be available to end users, we should take a little care about naming etc. As it will be set in stone, more or less.

Sounds like a plan?
<issue_comment>username_0: Yup! Pretty much. So that whenever `.Site.PrivacyConfig.<service>` is set the GDPR versions of the internal templates and shortcodes will be enabled.

That's very cool and backwards compatible.

I need some feedback though regarding my proposal for the [Instagram](https://github.com/gohugoio/hugo/issues/4616#issuecomment-383384560) shortcode. I have a stylesheet that needs to be included and also proposed the use of `timeago.js`. 

My idea is to rebuild the HTML of the embeds (Instagram, Twitter) without the tracking. There are features missing from the public oEmbed API most notably the likes count. 

I very much doubt that a user with an Access Token for the official APIs would have their app approved for bypassing the official embeds that have the tracking.

Is this is a sensible approach? Do you agree with it? If yes what would be the most efficient way to include the stylesheet and timeago.js 

Also as I said above the Instagram API is in a transition period and we might need to revisit this in the future.
<issue_comment>username_5: On an added note: The internal templates are all ""hardcoded"", i.e. inline, which makes them harder to edit than needed.

I can pull them out into files? (I even think there is an issue for that)
<issue_comment>username_7: [Yes][1] 😃 

[1]: https://github.com/gohugoio/hugo/issues/4457
<issue_comment>username_5: ... and now figure out how to embed files in a Go binary ... So much I don't know.
<issue_comment>username_0: Yes I've noticed. Also #4700 will perhaps make it possible to include the assets that will be needed for the new templates.
<issue_comment>username_5: What kind of assets is that? Note that my PR is all about simpler management/administration/editing, it does not add any ""asset bundling"".
<issue_comment>username_0: Ok.

@username_5 Whenever you have the time please review my work for the Instagram shortcode. See my comment [above](https://github.com/gohugoio/hugo/issues/4616#issuecomment-386551284) and the Instagram proposal [here](https://github.com/gohugoio/hugo/issues/4616#issuecomment-383384560).

I really need to know what you think. 

And by assets I meant the CSS and JS that need to go into the Instagram & Twitter shortcodes and if you want to implement a consent for the YouTube shortcode like this [one](https://discourse-cdn-sjc2.com/standard12/uploads/gohugo/optimized/2X/9/927ca9fff35e5de0cbbc3ca4433950fb8b620fe7_1_668x500.png) that will also need some CSS and JS.
<issue_comment>username_5: I think our ambitions are a little misaligned and I will have to think hard about it. In general, I expect the services that we use to have privacy options in their APIs to turn stuff off. And I also expect them to have the consent forms etc. I spend enough hours on this project as is, and I'm not too keen on adding forms and user interface to the simple shortcodes. That will also lure us into a territory where we must take special care about the implementation, browser testing etc. All in all something that we are not manpowered to do.
<issue_comment>username_5: I will look into this in detail during the weekend. But we are a static provider.  I don't see how we possibly can have a consent screen on behalf of Google. That does not make sense on any level. Esp. since that concent is only stored in local storage (where is the tracking/documentation of that?) 

So the trick up the sleave for the services that do not provide an API for this is, as I currently see it, this:

```
{ { not .Site.Privacy.YouTube.Disabled }}
Show youtube

{{ end }}
```

That would effectively block any youtube shortcode. Which would be GDPR compliant.
<issue_comment>username_5: @spf13 what is Google's take on this?
<issue_comment>username_4: Perhaps the intentions are good but, as it stands, it simply robs Peter to pay Paul. And it will have consequences such as the ""we use cookies"" banners you see everywhere nowadays. They're terrible. Everyone knows data collection occurs online. What they don't know is cookies are only the tip of the iceberg. And that's where the answer lies.

Rather than overreaching to try and protect people (leaving them essentially stupid) it would be better IMHO to give them the tools and knowledge necessary to make their own choices. In the context of GDPR that means stripping out anything related to Google, or YouTube, or whatever, and leaving a cookbook along with some caveats for those who want to take the plunge.

If it weren't for these terrible companies (e.g. Google) we wouldn't be blessed with things like DuckDuckGo or browsers like Firefox Focus or Brave. Nevertheless I applaud all of you for your work. I hope you're not overthinking it too much.
<issue_comment>username_4: Here's the example and it may be dependent on the fact I stopped using Google Analytics on my site a few months ago: https://hackcabin.com/mine/build/3-coin-8-gpu-gtx1060-mining-rig/

That page is using a shortcode I created called PrivacyTube which, as it turns out, replaces Google's DART cookie (which I had blocked at the `hosts` file level anyway) with a script loader they started co cajole into the page anyway—likely reducing my privacy more than when I had the blocked DART cookie.
<issue_comment>username_0: The cookbook seems unlikely. It wouldn't be proper to include a resource for GDPR compliant privacy practices in the Hugo Docs.
<issue_comment>username_4: Agreed. Was thinking the other way around. The cookbook would explain how to add stuff to become not GDPR compliant with caveat to do so at your own peril. Then again, you guys are the experts and have been braining on this I just wanted to add my two pennies regarding how I see it all shaking out.
<issue_comment>username_5: There are lots of stuff here, so let us take the most important part:

**Is a consent form that shows some text with a yes/no that stores that flag into local storage good enough according to GDPR?**

If yes, we should _consider_ 

* making a `consent` shortcode that only shows the inner content if the user has pushed the OK button for that particular shortcode.
* we should also somehow ""decorate"" the current relevant internal templates with this in respect to their privacy setting

But we cannot build something like this per template/shortcode. That will not be way too much work.

But first someone must dig into the `consent` part and figure out if a warning of this type is good enough.
<issue_comment>username_5: Which doesn't work with what I read above.
<issue_comment>username_0: Also see the UK Information Commisioner's Office [page](https://ico.org.uk/for-organisations/guide-to-the-general-data-protection-regulation-gdpr/lawful-basis-for-processing/consent/)

That is why my friend I have tried to make the embeds NOT to require consent by:
Putting the Google Analytics Client ID cookie to session storage.
Rebuild the HTML of the Instagram embed from scratch with no tracking.
Changed the YouTube embed to nocookie so that Google does not set its goodies on a user's device before she clicks play. (a minimal notice will be needed or make the shortcode play the video directly on YouTube's site, that is turn it into a fancy link with the video thumb and a play button that opens in a new window)

If you decide to go down the CONSENT shortcode shortcode road we need to provide some kind of form so that a Hugo site admin can collect the user consent for their records.

Also we might need another WITHDRAW CONSENT shortcode that clear all Local Storage from a Hugo site. So that if a visitor wants to withdraw consent they can do it. 

Both these shortcodes CONSENT and WITHDRAW require JS.

Obviously the GDPR is no fun.

But if you prefer to go with the simplest solution and that is to offer Hugo site admins the privacy option to disable all 3rd party services then what you've already posted will be GDPR compliant

```
{{ if not .Site.Privacy.YouTube.Disabled }}
Show youtube

{{ end }}

But then again people will either use this and turn off content they need from these 3rd party services or fend for themselves and try to work it out on their own.

The decision is yours.
```
<issue_comment>username_1: But I read this this way:
After withdrawing no **new** personal data shall be processed.
So no need to remove the personal data history since for this history the consent was given.
For Disqus:
* There could be a withdraw button setting agreed_to_disqus_thread to ""NO""
* This would end the storing of new personal data

But I see no way how to remove the personal data (IP, email) on the disqus site as an admin of a hugo site using disqus - except removing the comments of the withdrawing visitor. But as a hugo site admin - I will have no knowledge of his withdrawing...
<issue_comment>username_0: @username_1
Time to migrate from Disqus.
<issue_comment>username_5: I think we need to take this in steps.

Could someone, in table form, list the services and their related config options? When listing those, think that it should be flags that should be ""turned on"" (default = false). And the default should be the most useful value (not the most private value).

If Disqus is the only one that requires a consent form to be somewhat useful, I'm tempted to wait with that (because it is a lot of work to get right), and add this setting to all services:

```
[disqus]
disabled = true
```
Disqus should really step up to the plate and ... fix this.
<issue_comment>username_0: @username_5 
Here is a tentative table.

```
[privacy]
[privacy.googleAnalytics]
disabled = false

[privacy.disqus]
disabled = true

[privacy.youtube]
disabled = false 
noCookie = true

[privacy.vimeo]
disabled = false

[privacy.twitter]
disabled = false
avatar = """" # URL string

[privacy.instagram]
disabled = false
avatar = """" # URL string

[privacy.speakerdeck]
disabled = false
```
Now what each of these settings does depends upon what you have in mind.

I'm not familiar with SpeakerDeck. They set 1 cookie that expires about 30 minutes after a user visit and another Session Cookie. 

Twitter and Vimeo both have oEmbed APIs

If want to see live DEMOS of what I've done with Instagram and YouTube just ask and I'll put them online.
<issue_comment>username_5: @username_1 note that I will think really hard about what to do about Disqus and consent etc. Your code looks clean and good, but I think we need to think really hard about what we want to maintain as a project. Any UI code is ""only if we really have to"". 

@username_0 thanks for the overview. I will follow up on this tomorrow.
<issue_comment>username_1: Yes, I  agree.

One (extreme?) option could be to remove things like Disqus  from the hugo core.
A repo with templates, partials, shortcodes could be better. There the theme or project authors could ""steal"" from. They would be in charge for any improvements - and they could share them. Kind of templates / partials / shortcodes gallery.

But of course since currently there are such internal templates / shortcodes we just can't drop them. A freeze (=doing and breaking nothing) and later on a ""deprecated"" message on stdout could be done. So ""pushing"" the users to the new and fancy versions in a separate repo.

I found 64 themes (in https://github.com/gohugoio/hugoThemes) currently using `_internal/disqus.html` - but of course there are many more in the ""wild"".

In a user ""templates / partials / shortcodes gallery"" we probably would see some toolkit specific stuff (css classes, ...) (=> tagging, categorising, ... would be very important). There's a risk that we will end up in ""tons of variations"" of the same thing (e.g. disqus).

Such a repo is not a new idea:
[discourse shoud-we-add-internal-shortcodes-for-popular-services](https://discourse.gohugo.io/t/shoud-we-add-internal-shortcodes-for-popular-services/2085/7)
[discourse creating-new-internal-short-codes](https://discourse.gohugo.io/t/creating-new-internal-short-codes/2716/6)

I'm perfectly fine if we don't use anything of my proposal. It may be a starting point - at least for some discussions...
<issue_comment>username_0: @username_5 
I forgot to say that in the above table I haven't included options for the Gist internal shortcode because I see no tracking from GitHub's part in pages with embedded gists.

GitHub is pretty cool!👍
<issue_comment>username_0: I've looked a bit more into the Speaker Deck embed. (Didn't know that it's owned by GitHub).

The bad news is that I cannot find an official API for it. 
The embed contains the old Google Analytics tracking code ga.js
Also it contains jQuery and all sorts of stuff from other CDNs.

I don't think there is much to do about it. It's either building a consent form for Speaker Deck's data collection or spend hours trying to rebuild the embed without the tracking.

I don't use Speaker Deck so I will not look into it further.
<issue_comment>username_0: @username_2  Hm... you're talking about this type of screen:

![medium](https://user-images.githubusercontent.com/7918298/39675694-a092782a-5167-11e8-8100-61975d0ccf76.png)

We've already discussed this above with DuckDuckGo's similar approach to YouTube videos.

It's doable in Hugo -at least I know how to do it-.

But at this stage it's @username_5 's call on whether he wants to go down this road.

Maybe what @username_1 said above about making a separate repo for GPDR/privacy enhanced shortcodes and taking them out of Hugo core is the way forward.

This is a FOSS project after all. Not a multi-million hedge funded start-up.
<issue_comment>username_0: Google Analytics Version 3
---
After @username_2 's comment here is a modified proposal for the Hugo GA internal shortcode that respects Do-Not-Track and conditionally loads Google Analytics, along with the other Privacy settings I've outlined above.

```
var dnt = navigator.doNotTrack || window.doNotTrack || navigator.msDoNotTrack;
  if (dnt != ""1"" && dnt != ""yes"") {
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)
    [0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
var GA_SESSION_STORAGE_KEY = 'ga:clientId';
  ga('create', 'UA-XXXXX-Y', {
    'storage': 'none',
    'clientId': sessionStorage.getItem(GA_SESSION_STORAGE_KEY)
  });
  ga(function(tracker) {
    sessionStorage.setItem(GA_SESSION_STORAGE_KEY, tracker.get('clientId'));
  });
ga('set', 'anonymizeIp', true);
ga('send', 'pageview');
} else {
    console.debug(""Respecting Do-Not-Track, not loading analytics."");
  }
```
NOTE
window.doNotTrack is for Safari/IE11/Edge
navigator.msDoNotTrack is for IE9/10
Firefox <32 uses ""yes"" not 1

CREDIT 
[https://gist.github.com/paulfurley/bb900465c21b8570d8763af9a07fcfc7#file-google-analytics-html](https://gist.github.com/paulfurley/bb900465c21b8570d8763af9a07fcfc7#file-google-analytics-html)
<issue_comment>username_0: As things are now it seems unlikely they will, unless they have to. 

For example have a look into this very informative issue about [Google Fonts and GDPR compliance](https://github.com/google/fonts/issues/1495).

Google's silence is deafening.
<issue_comment>username_0: Currently I am refactoring my proposal for the Instagram shortcode.

- Removed  the `timeago.js` dependency and managed to output the elapsed time value with Hugo's math functions. The value is static and gets updated whenever a Hugo site is published.
- Added optional parameters to enter the URL of a user's Instagram avatar directly from the shortcode input, while taking into account the existing `hidecaption` parameter.
- Simplified the CSS and HTML.
- Now designing some SVG icons, so that the embed controls look good at any screen resolution.

Anyway I just wanted to let you know that I'm still looking into improving this.

BTW the GDPR is 14 days away.
<issue_comment>username_5: Note to self:

Put all the remote services (getJSON etc.) in the privacy policy config.
<issue_comment>username_8: BTW the GDPR is 7 days away.
<issue_comment>username_0: @username_5 I haven't finished working on this. So there is no branch with committed changes I'm afraid.

But you can see some WIP at this [repo](https://github.com/username_0/hugo-test/tree/master)

You want to have a look at the YouTube and Instagram shortcodes and the file under` /content/drawing/tilos-dream/`.

I'm not done with Instagram yet (I haven't finished prefixing and optimizing the CSS, this shortcode has taken ages because of all the limitation with the oEmbed API like expiring image URLs for Carousel posts, no availability of Video thumbnails etc.).

Anyway my work here will give you a good idea of what I've been trying to do.

Please note that there is a need for CSS in these proposals. Maybe you can think of a better more global way to include these styles in Hugo?

Also there is more useful information in Open Graph tags than in oEmbed APIs. 

Making GDPR compliant shortcodes would be much easier if a `getOpenGraph` Hugo function is ever developed. See the Feature Request at the [forum](https://discourse.gohugo.io/t/feature-request-getopengraph-func/12022/12) (in case you haven't).<issue_closed>
<issue_comment>username_5: I will close this for now. There are still work to do here, but we need to continue that in a shorter thread... Thanks to all for the input!
<issue_comment>username_9: @username_5 I think lots of people where following this thread for GDPR. Where can people follow this issue now? Really looking forward to the anonymized IP address for GA 👍
<issue_comment>username_10: @username_5 @username_9  I'm a bit confused by the summary of this issue. I read thought this:
https://gohugo.io/about/hugo-and-gdpr/

It seems like the summary is just... if you want to enable privacy you need to disable all services. But shouldn't it instead be that the third party services are disabled if the user doesn't give consent?

I guess I'm just not clear on the advantage of setting `disabled = true` over just not including the shortcode.

Further to this I see that https://github.com/gohugoio/hugo/pull/4776 was suggested as a solution for Google Analytics, but it still stores an identifier in a temporary session. Does this negate the need for consent?

I understand that this is an extremely complex topic. I don't believe legislators understood just how technically infeasible some of these restrictions where, especially in the case of Hugo were we actually don't want to store user data, but do wish to embed things like Youtube videos or maybe know how many visitors we have had in a way that doesn't infringe on privacy.

As a user the current situation is infuriating as I'm now constantly bombarded with notices on every single site I open all for something that was already easily addressed by a browser extension.

So I get that there are no simple answers, but the top of the Hugo and GDPR page makes it sound like the issue is already solved when really it's not. I think adding an acknowledgement of this and the challenges would be much more helpful and a link to this topic to show how the work already put in. I think we should mention that we don't really have a solution to this issue as doing so would require immense effort and ironically would require us to store more data about users and turn the project into something that is working around the lack of compliance by major service providers such as Youtube, Disqus etc.

Just my thoughts. I had to read through this whole thread before I realised that there wasn't really a resolution to this, only improvements.
<issue_comment>username_2: If I recall correctly, yes. The regulation is explicit in mentioning cookies, so Google suggests this method instead. Cookies are also cleared less often than temporary session data.

It respects the letter of the regulation, but not the spirit of it.
<issue_comment>username_10: @username_2 The only reference to cookies I could find is this:
https://gdpr-info.eu/?s=cookie

Which also says:
""or other identifiers""

If anything based on what I read it seems that the spirit of it is to protect user privacy and enable them not to be tracked if they don't wish to be and if they do wish to be it should be informed consent. I think the changes here go a long way to that goal by anonymising personal data and making it difficult for visitors to be tracked by limiting things to the session. There has clearly been tremendous effort put into this and honorable intentions, I'm just wondering if it goes far enough in terms of the ""letter of the regulation"" as you put it.
<issue_comment>username_2: That excerpt is not a part of any of the articles put forth here: https://eur-lex.europa.eu/legal-content/EN/TXT/HTML/?uri=CELEX:32016R0679&from=EN . It actually comes as a soft of introduction.

Everything else you are saying is correct, the point is that with the information collected we should not be able to identify a single individual. Parts of the GDPR mention privacy by design and protecting Personal Identifiable Information as key elements of the regulation.

That being said, it is possible to save session information and making it impossible to identify the user in question.
<issue_comment>username_5: This issue is closed. Open a new one if you think there is work to be done here."
RSS-Bridge/rss-bridge,421980274,1069,,"[{'action': 'opened', 'author': 'virtadpt', 'comment_id': None, 'datetime': '2019-03-17 22:16:11+00:00', 'masked_author': 'username_0', 'text': '# Bridge request\r\nAs a heavy user of RSS-bridge, I would like to have an RSS feed generator that can parse the web-based archives of mailing lists implemented with [GNU Mailman](http://list.org/).\r\n\r\n## General information\r\nGiven a GNU Mailman powered mailing list such as the [IETF Calsify list](https://www.ietf.org/mailman/listinfo/calsify), I would like to plug the URL for the web archive (https://mailarchive.ietf.org/arch/browse/calsify/) into a field of RSS-bridge and get an RSS feed of posts sent to/through the mailing list.\r\n\r\nThe kind of information I would like to see generated by such a feed:\r\n- URL to a new post in the archive.\r\n- Subject line of a new post in the archive.\r\n- To and From lines of a new post in the archive.\r\n- Body of a new post in the archive.\r\n- Links to previous and next posts in the discussion thread (if present).\r\n\r\n- How should the information be displayed/formatted?\r\n```\r\n<item>\r\n<title> [ subject line goes here ] </title>\r\n<link>[ link to the post in the archive]</link>\r\n<pubDate>[ date the message was sent] </pubDate>\r\n<author>[ contents of From: line]</author>\r\n<guid isPermaLink=""true"">[ URI to post in the archive ]</guid>\r\n<description>\r\n[ contents of From: line]\r\n[ contents of To: line]\r\n[ contents of Subject: line]\r\n[ contents of date and time line]\r\n[ body of message ]\r\n[ link to previous post in thread, if applicable ]\r\n[ link to next post in thread, if applicable ]\r\n</description>\r\n</item>\r\n```\r\n\r\n  - [X] Title\r\n  - [X] URI (link to the original article)\r\n  - [X] Author\r\n  - [X] Timestamp\r\n  - [X] Content (the content of the article)\r\n  - [X] Enclosures (message attachments?)\r\n  - [ ] Categories (categories, tags, etc...)\r\n\r\n## Options\r\n\r\n- [X] Limit number of returned items\r\n  - _Default limit_: 10\r\n- [X] Load full articles\r\n  - _Cache articles_ (articles are stored in a local cache on first request): Doesn\'t seem useful given how active some lists are.\r\n- [X] Balance requests (RSS-Bridge uses cached versions to reduce bandwith usage)\r\n  - _Timeout_ (default = 5 minutes, max = 24 hours): 5 minutes', 'title': 'Bridge request: Web archive for Mailman instance', 'type': 'issue'}]","<issue_start><issue_comment>Title: Bridge request: Web archive for Mailman instance
username_0: # Bridge request
As a heavy user of RSS-bridge, I would like to have an RSS feed generator that can parse the web-based archives of mailing lists implemented with [GNU Mailman](http://list.org/).

## General information
Given a GNU Mailman powered mailing list such as the [IETF Calsify list](https://www.ietf.org/mailman/listinfo/calsify), I would like to plug the URL for the web archive (https://mailarchive.ietf.org/arch/browse/calsify/) into a field of RSS-bridge and get an RSS feed of posts sent to/through the mailing list.

The kind of information I would like to see generated by such a feed:
- URL to a new post in the archive.
- Subject line of a new post in the archive.
- To and From lines of a new post in the archive.
- Body of a new post in the archive.
- Links to previous and next posts in the discussion thread (if present).

- How should the information be displayed/formatted?
```
<item>
<title> [ subject line goes here ] </title>
<link>[ link to the post in the archive]</link>
<pubDate>[ date the message was sent] </pubDate>
<author>[ contents of From: line]</author>
<guid isPermaLink=""true"">[ URI to post in the archive ]</guid>
<description>
[ contents of From: line]
[ contents of To: line]
[ contents of Subject: line]
[ contents of date and time line]
[ body of message ]
[ link to previous post in thread, if applicable ]
[ link to next post in thread, if applicable ]
</description>
</item>
```

  - [X] Title
  - [X] URI (link to the original article)
  - [X] Author
  - [X] Timestamp
  - [X] Content (the content of the article)
  - [X] Enclosures (message attachments?)
  - [ ] Categories (categories, tags, etc...)

## Options

- [X] Limit number of returned items
  - _Default limit_: 10
- [X] Load full articles
  - _Cache articles_ (articles are stored in a local cache on first request): Doesn't seem useful given how active some lists are.
- [X] Balance requests (RSS-Bridge uses cached versions to reduce bandwith usage)
  - _Timeout_ (default = 5 minutes, max = 24 hours): 5 minutes"
clearlydefined/website,402452214,416,"{'number': 416.0, 'repo': 'website', 'user_login': 'clearlydefined'}","[{'action': 'opened', 'author': 'storrisi', 'comment_id': None, 'datetime': '2019-01-23T22:09:56Z', 'masked_author': 'username_0', 'text': 'This is an improvement of the previous implementation of E2E tests.\r\nAs discusse, now are used more readable class names instead of DOM selectors.\r\n\r\nAlso, tests have been updated to support the use of the new License Picker.', 'title': 'E2E tests improvement', 'type': 'issue'}
 {'action': 'created', 'author': 'storrisi', 'comment_id': 457674045.0, 'datetime': '2019-01-25 18:33:02+00:00', 'masked_author': 'username_0', 'text': ""@username_1  as mentioned in #397 i've defined the steps to test a contribution flow.\r\nThe test creates a contribution using the dev APIs and an anonymous user.\r\nI've found a problem with the Source Picker while working on this, i'm going to investigate on what is wrong and then post a fix."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'storrisi', 'comment_id': 458655213.0, 'datetime': '2019-01-29 18:35:58+00:00', 'masked_author': 'username_0', 'text': ""I've updated tests based on the discussion and articles about the identifiers, using most of the DOM elements and identifiers that are already existing in the code.\r\nSomewhere i've used some specific ids or classes to identify better the element.\r\n\r\nI've also switched the controls using `jest-puppeteer` assertions, because `puppeteer`, if used alone, doesn't return any significant error while failing (basically returns only a timeout without specifying where and why).\r\n`jest-puppeteer` assertions let us to have a more specific detail in case of errors."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'storrisi', 'comment_id': 459787209.0, 'datetime': '2019-02-01 16:46:20+00:00', 'masked_author': 'username_0', 'text': ""@username_1 i've updated the PR adding a Page mapping object used in the test. This should be useful to make some other discussions.\r\nI've found this approach very powerful while working, it helps to keep the test agnostic over the page structure."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'jeffmcaffer', 'comment_id': 459954865.0, 'datetime': '2019-02-02 10:41:18+00:00', 'masked_author': 'username_1', 'text': 'thanks @username_0. the mapping object makes sense as a good way of deduplicating the code. Thanks for the example. Can we augment that with something like the data custom props to make the map entries themselves resilient. \r\n\r\nSo, something like this \r\n* use the mapping objects\r\n* in the mapping objects use the move prevalent existing id, name, class, ... \r\n* in the event that no such id, name, ... is available, use `data-test-id` custom props to create such a selector, to make the most resilient ""path""', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'storrisi', 'comment_id': 460294519.0, 'datetime': '2019-02-04 15:38:39+00:00', 'masked_author': 'username_0', 'text': ""I've added some data attributes where necessary, removing some classNames that i've added before.\r\nI think that now this approach could be considered a good guideline for future E2E tests."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'jeffmcaffer', 'comment_id': 460546484.0, 'datetime': '2019-02-05 08:05:18+00:00', 'masked_author': 'username_1', 'text': 'Thanks @username_0. in the current code i still see a number of new `className` additions. should these all be data-test-id (or some such). It seems much clearer if classNames are CSS / style things and test stuff is in data-test-id attributes.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'storrisi', 'comment_id': 460574754.0, 'datetime': '2019-02-05 09:48:40+00:00', 'masked_author': 'username_0', 'text': ""I've switched all the applied `classNames` to `data-test-id` attributes.\r\nUnfortunately today the `contribution` API in the dev environment is failing with a 400 generic error, which cause the tests to fail.\r\n\r\nOn a side note:\r\nin components like `Typeahead` is not possible to use a custom `data-test-id` attribute, since it's not applied to any of the rendered DOM elements."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'storrisi', 'comment_id': 461138154.0, 'datetime': '2019-02-06 18:41:47+00:00', 'masked_author': 'username_0', 'text': 'This has been fixed by @username_2 so now all the tests are successful.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'storrisi', 'comment_id': 462670435.0, 'datetime': '2019-02-12 08:46:46+00:00', 'masked_author': 'username_0', 'text': ""@username_1 do you think this one is ready to go or it's required to implement something else?"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'dabutvin', 'comment_id': 463791290.0, 'datetime': '2019-02-14 20:52:55+00:00', 'masked_author': 'username_2', 'text': ""@username_0 see https://github.com/clearlydefined/website/pull/467#issuecomment-463727439\r\n\r\nAfter we get this up to date, let's get it merged!"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'storrisi', 'comment_id': 464124356.0, 'datetime': '2019-02-15 17:04:06+00:00', 'masked_author': 'username_0', 'text': ""I've updated the tests in relation of the new behavior of the License field item."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'dabutvin', 'comment_id': 464176879.0, 'datetime': '2019-02-15 19:48:44+00:00', 'masked_author': 'username_2', 'text': 'I\'m getting failures running `npm run e2e:test`\r\n\r\nfor example: \r\n\r\n```\r\nHome page › Home page sections › should have a ""ClearlySecure"" section\r\n```\r\n\r\ndo you think we should get all the tests running under `npm test` ?', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'storrisi', 'comment_id': 464184568.0, 'datetime': '2019-02-15 20:14:33+00:00', 'masked_author': 'username_0', 'text': ""I don't think it could be the best way from a developer point of view, since that script would run all the tests.\r\nIf a user is testing a single class or component, he don't want to spend so much time waiting for all the tests, even e2e, run and pass.\r\n\r\nPerhaps it could be better to have a specific script for the CI, that would run ALL the tests.\r\nWhat do you think?"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'dabutvin', 'comment_id': 464185018.0, 'datetime': '2019-02-15 20:16:10+00:00', 'masked_author': 'username_2', 'text': ""I see. I'll give it a try and see how it goes.\r\n\r\nWe can probably leave the setup as is and modify the city to run all the tests"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'dabutvin', 'comment_id': 464208902.0, 'datetime': '2019-02-15 21:33:39+00:00', 'masked_author': 'username_2', 'text': 'the tests only pass in debug mode right now', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'storrisi', 'comment_id': 464216566.0, 'datetime': '2019-02-15 21:56:08+00:00', 'masked_author': 'username_0', 'text': '@username_2 it should be fixed now', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'dabutvin', 'comment_id': 464242584.0, 'datetime': '2019-02-15 23:17:07+00:00', 'masked_author': 'username_2', 'text': ""alright! let's land this.\r\nI'll work on the CI updates required so we can stay green here"", 'title': None, 'type': 'comment'}]","<issue_start><issue_comment>Title: E2E tests improvement
username_0: This is an improvement of the previous implementation of E2E tests.
As discusse, now are used more readable class names instead of DOM selectors.

Also, tests have been updated to support the use of the new License Picker.
<issue_comment>username_0: @username_1  as mentioned in #397 i've defined the steps to test a contribution flow.
The test creates a contribution using the dev APIs and an anonymous user.
I've found a problem with the Source Picker while working on this, i'm going to investigate on what is wrong and then post a fix.
<issue_comment>username_0: I've updated tests based on the discussion and articles about the identifiers, using most of the DOM elements and identifiers that are already existing in the code.
Somewhere i've used some specific ids or classes to identify better the element.

I've also switched the controls using `jest-puppeteer` assertions, because `puppeteer`, if used alone, doesn't return any significant error while failing (basically returns only a timeout without specifying where and why).
`jest-puppeteer` assertions let us to have a more specific detail in case of errors.
<issue_comment>username_0: @username_1 i've updated the PR adding a Page mapping object used in the test. This should be useful to make some other discussions.
I've found this approach very powerful while working, it helps to keep the test agnostic over the page structure.
<issue_comment>username_1: thanks @username_0. the mapping object makes sense as a good way of deduplicating the code. Thanks for the example. Can we augment that with something like the data custom props to make the map entries themselves resilient. 

So, something like this 
* use the mapping objects
* in the mapping objects use the move prevalent existing id, name, class, ... 
* in the event that no such id, name, ... is available, use `data-test-id` custom props to create such a selector, to make the most resilient ""path""
<issue_comment>username_0: I've added some data attributes where necessary, removing some classNames that i've added before.
I think that now this approach could be considered a good guideline for future E2E tests.
<issue_comment>username_1: Thanks @username_0. in the current code i still see a number of new `className` additions. should these all be data-test-id (or some such). It seems much clearer if classNames are CSS / style things and test stuff is in data-test-id attributes.
<issue_comment>username_0: I've switched all the applied `classNames` to `data-test-id` attributes.
Unfortunately today the `contribution` API in the dev environment is failing with a 400 generic error, which cause the tests to fail.

On a side note:
in components like `Typeahead` is not possible to use a custom `data-test-id` attribute, since it's not applied to any of the rendered DOM elements.
<issue_comment>username_0: This has been fixed by @username_2 so now all the tests are successful.
<issue_comment>username_0: @username_1 do you think this one is ready to go or it's required to implement something else?
<issue_comment>username_2: @username_0 see https://github.com/clearlydefined/website/pull/467#issuecomment-463727439

After we get this up to date, let's get it merged!
<issue_comment>username_0: I've updated the tests in relation of the new behavior of the License field item.
<issue_comment>username_2: I'm getting failures running `npm run e2e:test`

for example: 

```
Home page › Home page sections › should have a ""ClearlySecure"" section
```

do you think we should get all the tests running under `npm test` ?
<issue_comment>username_0: I don't think it could be the best way from a developer point of view, since that script would run all the tests.
If a user is testing a single class or component, he don't want to spend so much time waiting for all the tests, even e2e, run and pass.

Perhaps it could be better to have a specific script for the CI, that would run ALL the tests.
What do you think?
<issue_comment>username_2: I see. I'll give it a try and see how it goes.

We can probably leave the setup as is and modify the city to run all the tests
<issue_comment>username_2: the tests only pass in debug mode right now
<issue_comment>username_0: @username_2 it should be fixed now
<issue_comment>username_2: alright! let's land this.
I'll work on the CI updates required so we can stay green here"
facebook/docusaurus,581848745,2416,"{'number': 2416.0, 'repo': 'docusaurus', 'user_login': 'facebook'}","[{'action': 'opened', 'author': 'paularmstrong', 'comment_id': None, 'datetime': '2020-03-15T22:21:37Z', 'masked_author': 'username_0', 'text': '<!--\r\nThank you for sending the PR! We appreciate you spending the time to work on these changes.\r\n\r\nHelp us understand your motivation by explaining why you decided to make this change.\r\n\r\nYou can learn more about contributing to Docusaurus here: https://github.com/facebook/docusaurus/blob/master/CONTRIBUTING.md\r\n\r\nHappy contributing!\r\n\r\n-->\r\n\r\n## Motivation\r\n\r\n[Build Tracker](https://buildtracker.dev) is about to release 1.0.0 and it\'s using v2. Docusaurus has been really great for building our docs and quite a few people have asked about what\'s powering them.\r\n\r\n### Have you read the [Contributing Guidelines on pull requests](https://github.com/facebook/docusaurus/blob/master/CONTRIBUTING.md#pull-requests)?\r\n\r\nYes\r\n\r\n## Test Plan\r\n\r\nRan `yarn start` and verified the _Showcase_ page\r\n<img width=""1280"" alt=""Screen Shot 2020-03-15 at 3 20 06 PM"" src=""https://user-images.githubusercontent.com/33297/76711861-8d6a3500-66d0-11ea-9fdb-3793215a06f5.png"">\r\n\r\n\r\n## Related PRs\r\n\r\n* _None_', 'title': 'docs(v2): Add Build Tracker to Showcase page', 'type': 'issue'}
 {'action': 'created', 'author': 'lex111', 'comment_id': 599387303.0, 'datetime': '2020-03-16 07:37:42+00:00', 'masked_author': 'username_1', 'text': '@username_0 It looks good! Thanks for adding your project to our showcase!', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'yangshun', 'comment_id': 599387828.0, 'datetime': '2020-03-16 07:39:14+00:00', 'masked_author': 'username_2', 'text': 'Thank you @username_0! Also thanks for Normalizr!', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'paularmstrong', 'comment_id': 599584160.0, 'datetime': '2020-03-16 15:00:04+00:00', 'masked_author': 'username_0', 'text': '🎉', 'title': None, 'type': 'comment'}]","<issue_start><issue_comment>Title: docs(v2): Add Build Tracker to Showcase page
username_0: <!--
Thank you for sending the PR! We appreciate you spending the time to work on these changes.

Help us understand your motivation by explaining why you decided to make this change.

You can learn more about contributing to Docusaurus here: https://github.com/facebook/docusaurus/blob/master/CONTRIBUTING.md

Happy contributing!

-->

## Motivation

[Build Tracker](https://buildtracker.dev) is about to release 1.0.0 and it's using v2. Docusaurus has been really great for building our docs and quite a few people have asked about what's powering them.

### Have you read the [Contributing Guidelines on pull requests](https://github.com/facebook/docusaurus/blob/master/CONTRIBUTING.md#pull-requests)?

Yes

## Test Plan

Ran `yarn start` and verified the _Showcase_ page
<img width=""1280"" alt=""Screen Shot 2020-03-15 at 3 20 06 PM"" src=""https://user-images.githubusercontent.com/33297/76711861-8d6a3500-66d0-11ea-9fdb-3793215a06f5.png"">


## Related PRs

* _None_
<issue_comment>username_1: @username_0 It looks good! Thanks for adding your project to our showcase!
<issue_comment>username_2: Thank you @username_0! Also thanks for Normalizr!
<issue_comment>username_0: 🎉"
JedWatson/sydjs-site,152458743,93,,"[{'action': 'opened', 'author': 'cleechtech', 'comment_id': None, 'datetime': '2016-05-01 22:22:23+00:00', 'masked_author': 'username_0', 'text': 'I am trying to implement oauth for github using passport into my keystone.js app.\r\n\r\nI have been using this repo as a guide. In my console I am getting to **lib/auth/github.js**\r\n\r\n```\r\n[services.github] - Authentication workflow detected, attempting to request access...\r\n```\r\n\r\nHowever I get a 500 error in the browser:\r\n\r\n```\r\nSorry, an error occurred loading the page (500)\r\n\r\npassport.initialize() middleware not in use\r\n```\r\n\r\nHow or where do you initialize the passport middleware? I am searching through the repo and cannot find a call to `passport.initialize(`', 'title': 'Passport initialization for social login', 'type': 'issue'}
 {'action': 'created', 'author': 'cleechtech', 'comment_id': 216077345.0, 'datetime': '2016-05-01 22:33:28+00:00', 'masked_author': 'username_0', 'text': 'Got a little bit past this using **routes/auth/app.js** **routes/auth/confirm.js**. What is the github registered url callback for this application? (Am kind of a n00b but really excited about putting social auth into the power of a keystone app)', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'enraiser', 'comment_id': 238006052.0, 'datetime': '2016-08-06 04:58:53+00:00', 'masked_author': 'username_1', 'text': 'what do you mean by using routes/auth/app.js and routes/auth/confirm.js.  .they are already being used.  \r\nCan someone elaborate the solution.\r\n\r\nI generally think that there is no one on the planet to answer question about keystoneJS. on stackoverflow as well.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'oliverwh', 'comment_id': 238019731.0, 'datetime': '2016-08-06 11:52:57+00:00', 'masked_author': 'username_2', 'text': 'There is an issue with ur callback url for sure', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'enraiser', 'comment_id': 238075779.0, 'datetime': '2016-08-07 10:52:13+00:00', 'masked_author': 'username_1', 'text': 'Yes you are right, the callback URL must have  **?cb=true**  at the end\r\n`http://localhost:3003/auth/facebook?cb=true`\r\n\r\nI have written a [detailed blog](https://www.username_1.com/blog/nodejs/sydjs-keystonejs-issues-with-social-login-using-passport) on resolving all issues [here](https://www.username_1.com/blog/nodejs/sydjs-keystonejs-issues-with-social-login-using-passport).', 'title': None, 'type': 'comment'}
 {'action': 'closed', 'author': 'connor11528', 'comment_id': None, 'datetime': '2016-08-08 03:54:49+00:00', 'masked_author': 'username_3', 'text': '', 'title': None, 'type': 'issue'}
 {'action': 'created', 'author': 'connor11528', 'comment_id': 238136741.0, 'datetime': '2016-08-08 03:54:49+00:00', 'masked_author': 'username_3', 'text': 'Okay got it thank you!', 'title': None, 'type': 'comment'}]","<issue_start><issue_comment>Title: Passport initialization for social login
username_0: I am trying to implement oauth for github using passport into my keystone.js app.

I have been using this repo as a guide. In my console I am getting to **lib/auth/github.js**

```
[services.github] - Authentication workflow detected, attempting to request access...
```

However I get a 500 error in the browser:

```
Sorry, an error occurred loading the page (500)

passport.initialize() middleware not in use
```

How or where do you initialize the passport middleware? I am searching through the repo and cannot find a call to `passport.initialize(`
<issue_comment>username_0: Got a little bit past this using **routes/auth/app.js** **routes/auth/confirm.js**. What is the github registered url callback for this application? (Am kind of a n00b but really excited about putting social auth into the power of a keystone app)
<issue_comment>username_1: what do you mean by using routes/auth/app.js and routes/auth/confirm.js.  .they are already being used.  
Can someone elaborate the solution.

I generally think that there is no one on the planet to answer question about keystoneJS. on stackoverflow as well.
<issue_comment>username_2: There is an issue with ur callback url for sure
<issue_comment>username_1: Yes you are right, the callback URL must have  **?cb=true**  at the end
`http://localhost:3003/auth/facebook?cb=true`

I have written a [detailed blog](https://www.username_1.com/blog/nodejs/sydjs-keystonejs-issues-with-social-login-using-passport) on resolving all issues [here](https://www.username_1.com/blog/nodejs/sydjs-keystonejs-issues-with-social-login-using-passport).<issue_closed>
<issue_comment>username_3: Okay got it thank you!"
girldevelopit/gdi-website,160560127,461,"{'number': 461.0, 'repo': 'gdi-website', 'user_login': 'girldevelopit'}","[{'action': 'opened', 'author': 'amygori', 'comment_id': None, 'datetime': '2016-06-16T01:40:24Z', 'masked_author': 'username_0', 'text': 'Needs testing, but I have a working Vagrant box for local development on my machine...see if it works for you!\r\n\r\nI think the provisioner has some unnecessary stuff lingering in there, so that may need updates, but I wanted to get this out for some field testing asap.\r\n\r\nCloses #439', 'title': 'Vagrant! You know, for development', 'type': 'issue'}
 {'action': 'created', 'author': 'kstack7', 'comment_id': 226380255.0, 'datetime': '2016-06-16 03:36:04+00:00', 'masked_author': 'username_1', 'text': ""Woo! I'm so excited to try this :) Thank you so much, @username_0 :D"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'DBNess', 'comment_id': 226389088.0, 'datetime': '2016-06-16 05:05:00+00:00', 'masked_author': 'username_2', 'text': '🙌😍', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'kstack7', 'comment_id': 226396050.0, 'datetime': '2016-06-16 06:06:34+00:00', 'masked_author': 'username_1', 'text': 'THIS IS EXCITING!! Total success on my end :)\r\n\r\n![vagrant](https://cloud.githubusercontent.com/assets/6612770/16106957/ee1c2116-3366-11e6-9a77-47335450e594.png)', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'amygori', 'comment_id': 226479161.0, 'datetime': '2016-06-16 13:06:13+00:00', 'masked_author': 'username_0', 'text': '@username_1 I am actually floored that it worked perfectly for you!!! SO GREAT! Are you on a PC or Mac? So much agree, the Ruby compilation step should be documented as taking a while. I made that tradeoff to avoid having to use rbenv or rvm to install Ruby. I can update the note in the provisioner to be more than just ""a few minutes"" but something more visible as a heads up in the documentation would also be good.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'kstack7', 'comment_id': 226484004.0, 'datetime': '2016-06-16 13:26:04+00:00', 'masked_author': 'username_1', 'text': '@username_0 yup! It was very smooth...the load time is totally worth it! I did this on my project-free PC so no chance of conflicts or existing library fun. I can try on my other dev PC and my Mac to help :) So far, so great!', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'amygori', 'comment_id': 226488206.0, 'datetime': '2016-06-16 13:41:47+00:00', 'masked_author': 'username_0', 'text': 'EXCELLENT. I will let out a big sigh of relief once @username_4 can get it up and running.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'imuchnik', 'comment_id': 226570598.0, 'datetime': '2016-06-16 18:23:29+00:00', 'masked_author': 'username_3', 'text': 'OMG OMG OMG ! I am going to try it and let you know. This is awesome!', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'Roenok', 'comment_id': 226571039.0, 'datetime': '2016-06-16 18:24:57+00:00', 'masked_author': 'username_4', 'text': ""I'll try tonight! I've got some nice, clean virtual machines I can use to test in different environments"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'kstack7', 'comment_id': 226645960.0, 'datetime': '2016-06-16 23:50:28+00:00', 'masked_author': 'username_1', 'text': ""Two for two! This time on a Mac :) Lovin' it, @username_0 👍 \r\n\r\n![screen shot 2016-06-16 at 7 48 49 pm](https://cloud.githubusercontent.com/assets/6612770/16136777/8936e3fe-33fb-11e6-9146-e6f9936986cd.png)"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'Roenok', 'comment_id': 227008895.0, 'datetime': '2016-06-19 17:16:51+00:00', 'masked_author': 'username_4', 'text': 'Yeah, all attempts to install and run failed catastrophically for me. I\'m on a Windows 10 laptop. Errors included:\r\n`Timed out while waiting for the machine to boot. This means that\r\nVagrant was unable to communicate with the guest machine within\r\nthe configured (""config.vm.boot_timeout"" value) time period.\r\n\r\nIf you look above, you should be able to see the error(s) that\r\nVagrant had when attempting to connect to the machine. These errors\r\nare usually good hints as to what may be wrong.\r\n\r\nIf you\'re using a custom box, make sure that networking is properly\r\nworking and you\'re able to connect to the machine. It is a common\r\nproblem that networking isn\'t setup properly in these boxes.\r\nVerify that authentication configurations are also setup properly,\r\nas well.\r\n\r\nIf the box appears to be booting properly, you may want to increase\r\nthe timeout (""config.vm.boot_timeout"") value.`\r\n\r\n`An error occurred in the underlying SSH library that Vagrant uses.\r\nThe error message is shown below. In many cases, errors from this\r\nlibrary are caused by ssh-agent issues. Try disabling your SSH\r\nagent or removing some keys and try again.\r\n\r\nIf the problem persists, please report a bug to the net-ssh project.\r\n\r\ntimeout during server version negotiating`\r\n\r\n`The following SSH command responded with a non-zero exit status.\r\nVagrant assumes that this means the command failed!\r\n\r\nchown `id -u vagrant`:`id -g vagrant` /opt/gdi/development\r\n\r\nStdout from the command:\r\n\r\n\r\n\r\nStderr from the command:\r\n\r\nstdin: is not a tty\r\nchown: changing ownership of ‘/opt/gdi/development’: Not a directory`', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'Roenok', 'comment_id': 227233756.0, 'datetime': '2016-06-20 18:49:59+00:00', 'masked_author': 'username_4', 'text': 'Oh man, exciting developments in error messages up in here! Here is what I have discovered:\r\n1. Your machine must support hardware virtualization. For some computers, including Lenovo Thinkpads, this means you must enable this at a BIOS level\r\n2. You must have Git installed. In Windows, using Git within Powershell is not sufficient, as Vagrant cannot run properly within Powershell. Git Bash appears to work\r\n3. Vagrant up will take a very long time to run.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'Roenok', 'comment_id': 227521146.0, 'datetime': '2016-06-21 17:59:58+00:00', 'masked_author': 'username_4', 'text': '4. Bonus note: MUST use the newest version of VirtualBox (at least above 5.0.12)\r\n\r\nThat seems to have been the secret sauce', 'title': None, 'type': 'comment'}]","<issue_start><issue_comment>Title: Vagrant! You know, for development
username_0: Needs testing, but I have a working Vagrant box for local development on my machine...see if it works for you!

I think the provisioner has some unnecessary stuff lingering in there, so that may need updates, but I wanted to get this out for some field testing asap.

Closes #439
<issue_comment>username_1: Woo! I'm so excited to try this :) Thank you so much, @username_0 :D
<issue_comment>username_2: 🙌😍
<issue_comment>username_1: THIS IS EXCITING!! Total success on my end :)

![vagrant](https://cloud.githubusercontent.com/assets/6612770/16106957/ee1c2116-3366-11e6-9a77-47335450e594.png)
<issue_comment>username_0: @username_1 I am actually floored that it worked perfectly for you!!! SO GREAT! Are you on a PC or Mac? So much agree, the Ruby compilation step should be documented as taking a while. I made that tradeoff to avoid having to use rbenv or rvm to install Ruby. I can update the note in the provisioner to be more than just ""a few minutes"" but something more visible as a heads up in the documentation would also be good.
<issue_comment>username_1: @username_0 yup! It was very smooth...the load time is totally worth it! I did this on my project-free PC so no chance of conflicts or existing library fun. I can try on my other dev PC and my Mac to help :) So far, so great!
<issue_comment>username_0: EXCELLENT. I will let out a big sigh of relief once @username_4 can get it up and running.
<issue_comment>username_3: OMG OMG OMG ! I am going to try it and let you know. This is awesome!
<issue_comment>username_4: I'll try tonight! I've got some nice, clean virtual machines I can use to test in different environments
<issue_comment>username_1: Two for two! This time on a Mac :) Lovin' it, @username_0 👍 

![screen shot 2016-06-16 at 7 48 49 pm](https://cloud.githubusercontent.com/assets/6612770/16136777/8936e3fe-33fb-11e6-9146-e6f9936986cd.png)
<issue_comment>username_4: Yeah, all attempts to install and run failed catastrophically for me. I'm on a Windows 10 laptop. Errors included:
`Timed out while waiting for the machine to boot. This means that
Vagrant was unable to communicate with the guest machine within
the configured (""config.vm.boot_timeout"" value) time period.

If you look above, you should be able to see the error(s) that
Vagrant had when attempting to connect to the machine. These errors
are usually good hints as to what may be wrong.

If you're using a custom box, make sure that networking is properly
working and you're able to connect to the machine. It is a common
problem that networking isn't setup properly in these boxes.
Verify that authentication configurations are also setup properly,
as well.

If the box appears to be booting properly, you may want to increase
the timeout (""config.vm.boot_timeout"") value.`

`An error occurred in the underlying SSH library that Vagrant uses.
The error message is shown below. In many cases, errors from this
library are caused by ssh-agent issues. Try disabling your SSH
agent or removing some keys and try again.

If the problem persists, please report a bug to the net-ssh project.

timeout during server version negotiating`

`The following SSH command responded with a non-zero exit status.
Vagrant assumes that this means the command failed!

chown `id -u vagrant`:`id -g vagrant` /opt/gdi/development

Stdout from the command:



Stderr from the command:

stdin: is not a tty
chown: changing ownership of ‘/opt/gdi/development’: Not a directory`
<issue_comment>username_4: Oh man, exciting developments in error messages up in here! Here is what I have discovered:
1. Your machine must support hardware virtualization. For some computers, including Lenovo Thinkpads, this means you must enable this at a BIOS level
2. You must have Git installed. In Windows, using Git within Powershell is not sufficient, as Vagrant cannot run properly within Powershell. Git Bash appears to work
3. Vagrant up will take a very long time to run.
<issue_comment>username_4: 4. Bonus note: MUST use the newest version of VirtualBox (at least above 5.0.12)

That seems to have been the secret sauce"
