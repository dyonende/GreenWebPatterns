facebook/docusaurus,278307538,248,,"[{'action': 'opened', 'author': 'ericnakagawa', 'comment_id': None, 'datetime': '2017-11-30T23:34:05Z', 'masked_author': 'username_0', 'text': 'Perhaps a bulk method for managing these -- especially helpful for an existing site migrating to Docusaurus.\r\n\r\n""Docusaurus is pretty limited on where pages can go. For all of our sites, it\'s required adding a bunch of redirects to keep links working. I\'d like to have an easier (automatic?) way to generate these other than copying and pasting a bunch of files in pages.""', 'title': 'Easier way to support redirects', 'type': 'issue'}
 {'action': 'created', 'author': 'endiliey', 'comment_id': 546800487.0, 'datetime': '2019-10-28 05:50:59+00:00', 'masked_author': 'username_1', 'text': 'This is now possible with powerful v2 plugin system.\r\n\r\nExample: someone created it programatically to redirect\r\nhttps://github.com/CanopyTax/single-spa.js.org/blob/46b46c97e0dee70b2c65c2c41484422fe399e6eb/website/src/plugins/docusaurus-plugin-redirects/src/index.js', 'title': None, 'type': 'comment'}
 {'action': 'closed', 'author': 'endiliey', 'comment_id': None, 'datetime': '2019-10-28 05:50:59+00:00', 'masked_author': 'username_1', 'text': '', 'title': None, 'type': 'issue'}
 {'action': 'created', 'author': 'yangshun', 'comment_id': 546801925.0, 'datetime': '2019-10-28 05:57:31+00:00', 'masked_author': 'username_2', 'text': '@username_1 should we make that plugin by @lex111 a core plugin?', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'endiliey', 'comment_id': 546803074.0, 'datetime': '2019-10-28 06:02:08+00:00', 'masked_author': 'username_1', 'text': ""I prefer not, if we're to maintain it, we need to make it very general. That one is still hardcoded and havent support a config for `from` and `to` redirect yet, Maybe not at this point, maybe on release.\r\n\r\nIt's like how wgao tried to create another theme-no-style, thankfully its not in docusaurus repo, there's been quite some breaking change on theme implementation alrd (eg: metadata, themeconfig, etc).\r\n\r\nLess is better before we start to add more"", 'title': None, 'type': 'comment'}]","<issue_start><issue_comment>Title: Easier way to support redirects
username_0: Perhaps a bulk method for managing these -- especially helpful for an existing site migrating to Docusaurus.

""Docusaurus is pretty limited on where pages can go. For all of our sites, it's required adding a bunch of redirects to keep links working. I'd like to have an easier (automatic?) way to generate these other than copying and pasting a bunch of files in pages.""
<issue_comment>username_1: This is now possible with powerful v2 plugin system.

Example: someone created it programatically to redirect
https://github.com/CanopyTax/single-spa.js.org/blob/46b46c97e0dee70b2c65c2c41484422fe399e6eb/website/src/plugins/docusaurus-plugin-redirects/src/index.js<issue_closed>
<issue_comment>username_2: @username_1 should we make that plugin by @lex111 a core plugin?
<issue_comment>username_1: I prefer not, if we're to maintain it, we need to make it very general. That one is still hardcoded and havent support a config for `from` and `to` redirect yet, Maybe not at this point, maybe on release.

It's like how wgao tried to create another theme-no-style, thankfully its not in docusaurus repo, there's been quite some breaking change on theme implementation alrd (eg: metadata, themeconfig, etc).

Less is better before we start to add more"
jscraftcamp/website,421821913,562,,"[{'action': 'opened', 'author': 'wolframkriesing', 'comment_id': None, 'datetime': '2019-03-16 15:51:02+00:00', 'masked_author': 'username_0', 'text': ""## Why Snacks?\r\n\r\nThe night before was a party. If the attendees don't need a snack now, they must have some other secret sauce to get their bodies back up to speed. But many rely on a sponsor to help out and prevent a low blood sugar by providing quick energy refilling snacks in the form of sweets, baked goods and candy. Keep those hard working brains happy - either by choosing yourself what to get or just leave it up to us to find the right sugar-bombs!\r\n\r\n## How does it work?\r\n\r\nCost ~100,- depending on what the sponsor orders.\r\nIdeally the sponsor orders the snacks, to be delivered to the location. Feel free to ask us in this ticket about details.\r\n\r\nLast year we asked some food companies for offers and had the sponsor confirm that amount up front. Once the food was delivered on the day the sponsor pulled out the credit card and made all attendees happy by enabling them to making the blood sugar level catch up."", 'title': 'Sponsor needed for snacks on Saturday', 'type': 'issue'}
 {'action': 'created', 'author': 'Hannahjambit', 'comment_id': 486561230.0, 'datetime': '2019-04-25 07:58:41+00:00', 'masked_author': 'username_1', 'text': 'Hallo Wolfram, \r\n\r\nwir übernehmen gern die Snacks für Samstag. Wir werden wieder Obst untersch. Art und Sweets an die Location senden. \r\nVirtual Identity AG\r\nIsarwinkel 16\r\n81379 München\r\n\r\nViele Grüße von jambit,\r\nJohanna', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'wolframkriesing', 'comment_id': 487046283.0, 'datetime': '2019-04-26 12:54:05+00:00', 'masked_author': 'username_0', 'text': '@username_1 thanks a lot, this is awesome!!!', 'title': None, 'type': 'comment'}
 {'action': 'closed', 'author': 'wolframkriesing', 'comment_id': None, 'datetime': '2019-05-14 20:05:13+00:00', 'masked_author': 'username_0', 'text': '', 'title': None, 'type': 'issue'}]","<issue_start><issue_comment>Title: Sponsor needed for snacks on Saturday
username_0: ## Why Snacks?

The night before was a party. If the attendees don't need a snack now, they must have some other secret sauce to get their bodies back up to speed. But many rely on a sponsor to help out and prevent a low blood sugar by providing quick energy refilling snacks in the form of sweets, baked goods and candy. Keep those hard working brains happy - either by choosing yourself what to get or just leave it up to us to find the right sugar-bombs!

## How does it work?

Cost ~100,- depending on what the sponsor orders.
Ideally the sponsor orders the snacks, to be delivered to the location. Feel free to ask us in this ticket about details.

Last year we asked some food companies for offers and had the sponsor confirm that amount up front. Once the food was delivered on the day the sponsor pulled out the credit card and made all attendees happy by enabling them to making the blood sugar level catch up.
<issue_comment>username_1: Hallo Wolfram, 

wir übernehmen gern die Snacks für Samstag. Wir werden wieder Obst untersch. Art und Sweets an die Location senden. 
Virtual Identity AG
Isarwinkel 16
81379 München

Viele Grüße von jambit,
Johanna
<issue_comment>username_0: @username_1 thanks a lot, this is awesome!!!<issue_closed>"
gohugoio/hugo,334310108,4864,,"[{'action': 'opened', 'author': 'hakuoku', 'comment_id': None, 'datetime': '2018-06-21 02:01:15+00:00', 'masked_author': 'username_0', 'text': 'When I updated Hugo the latest version I met that it didn’t load disqus comments both locally and remotely. So I’ve replaced Hugo’s version in sequence, found v0.34 and former worked successfully.\r\n\r\nI include my disqusShortname in params section of config.toml and {{ template ""_internal/disqus.html"" . }} line in single.html of [Hugo Frais](https://themes.gohugo.io/hugo-frais/) theme properly(maybe).\r\n\r\nWhere internal template is, such HTML & JS below are embeded with v0.34 but after v0.35 the field goes completely blank.\r\n\r\nI used Windows 32bit versions on Windows10 v1803 consistently.\r\n\r\n```JavaScript\r\n<div id=""disqus_thread"">\r\n    Disqus comments not available by default when the website is previewed locally.\r\n</div>\r\n<script>\r\n    var disqus_config = function () {};\r\n    (function() {\r\n        if ([""localhost"", ""127.0.0.1""].indexOf(window.location.hostname) != -1) {\r\n            document.getElementById(\'disqus_thread\').innerHTML = \'Disqus comments not available by default when the website is previewed locally.\';\r\n            return;\r\n        }\r\n        var d = document, s = d.createElement(\'script\'); s.async = true;\r\n        s.src = \'//\' + ""mydisqususername"" + \'.disqus.com/embed.js\';\r\n        s.setAttribute(\'data-timestamp\', +new Date());\r\n        (d.head || d.body).appendChild(s);\r\n    })();\r\n</script>\r\n<noscript>\r\n    Please enable JavaScript to view the <a href=""https://disqus.com/?ref_noscript"">comments powered by Disqus.</a>\r\n</noscript>\r\n<a href=""https://disqus.com"" class=""dsq-brlink"">comments powered by <span class=""logo-disqus"">Disqus</span></a>\r\n```', 'title': 'Unable to load Disqus', 'type': 'issue'}
 {'action': 'created', 'author': 'hakuoku', 'comment_id': 399748845.0, 'datetime': '2018-06-24 11:15:58+00:00', 'masked_author': 'username_0', 'text': '""mydisqususername"" is placeholder I set to submit issue here. Actually that line is:\r\n\r\n```javascript\r\ns.src = \'//\' + ""username_0"" + \'.disqus.com/embed.js\';\r\n```\r\n\r\nAnd the problem with v0.35 and later continues...', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'it-gro', 'comment_id': 400856916.0, 'datetime': '2018-06-27 23:04:58+00:00', 'masked_author': 'username_1', 'text': 'I can\'t reproduce.\r\nHaving\r\n```toml\r\ndisqusShortname = ""username_1-github-io-hugo-theme-w3css-basic-github-io""\r\n```\r\nin `config.toml`\r\n\r\nUsing\r\n```\r\n{{ template ""_internal/disqus.html"" . }}\r\n```\r\nI get this resulting html for disqus:\r\n```\r\n        var d = document, s = d.createElement(\'script\'); s.async = true;\r\n        s.src = \'//\' + ""username_1-github-io-hugo-theme-w3css-basic-github-io"" + \'.disqus.com/embed.js\';\r\n        s.setAttribute(\'data-timestamp\', +new Date());\r\n\r\n```\r\n\r\nlooks good to me...\r\n\r\n```\r\nHugo Static Site Generator v0.42.1 linux/amd64 BuildDate: 2018-06-13T10:16:36Z\r\nGOOS=""linux""\r\nGOARCH=""amd64""\r\nGOVERSION=""go1.10.1""\r\n```', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'hakuoku', 'comment_id': 403004934.0, 'datetime': '2018-07-06 11:15:04+00:00', 'masked_author': 'username_0', 'text': ""Sorry, it was my stupid mistake.\r\nI didn't place my disqusShortname line in plain config.toml area but it's params area.  So it hadn't worked.\r\nThanks for your kind advice, anyway 🙇"", 'title': None, 'type': 'comment'}
 {'action': 'closed', 'author': 'hakuoku', 'comment_id': None, 'datetime': '2018-07-06 11:15:13+00:00', 'masked_author': 'username_0', 'text': '', 'title': None, 'type': 'issue'}]","<issue_start><issue_comment>Title: Unable to load Disqus
username_0: When I updated Hugo the latest version I met that it didn’t load disqus comments both locally and remotely. So I’ve replaced Hugo’s version in sequence, found v0.34 and former worked successfully.

I include my disqusShortname in params section of config.toml and {{ template ""_internal/disqus.html"" . }} line in single.html of [Hugo Frais](https://themes.gohugo.io/hugo-frais/) theme properly(maybe).

Where internal template is, such HTML & JS below are embeded with v0.34 but after v0.35 the field goes completely blank.

I used Windows 32bit versions on Windows10 v1803 consistently.

```JavaScript
<div id=""disqus_thread"">
    Disqus comments not available by default when the website is previewed locally.
</div>
<script>
    var disqus_config = function () {};
    (function() {
        if ([""localhost"", ""127.0.0.1""].indexOf(window.location.hostname) != -1) {
            document.getElementById('disqus_thread').innerHTML = 'Disqus comments not available by default when the website is previewed locally.';
            return;
        }
        var d = document, s = d.createElement('script'); s.async = true;
        s.src = '//' + ""mydisqususername"" + '.disqus.com/embed.js';
        s.setAttribute('data-timestamp', +new Date());
        (d.head || d.body).appendChild(s);
    })();
</script>
<noscript>
    Please enable JavaScript to view the <a href=""https://disqus.com/?ref_noscript"">comments powered by Disqus.</a>
</noscript>
<a href=""https://disqus.com"" class=""dsq-brlink"">comments powered by <span class=""logo-disqus"">Disqus</span></a>
```
<issue_comment>username_0: ""mydisqususername"" is placeholder I set to submit issue here. Actually that line is:

```javascript
s.src = '//' + ""username_0"" + '.disqus.com/embed.js';
```

And the problem with v0.35 and later continues...
<issue_comment>username_1: I can't reproduce.
Having
```toml
disqusShortname = ""username_1-github-io-hugo-theme-w3css-basic-github-io""
```
in `config.toml`

Using
```
{{ template ""_internal/disqus.html"" . }}
```
I get this resulting html for disqus:
```
        var d = document, s = d.createElement('script'); s.async = true;
        s.src = '//' + ""username_1-github-io-hugo-theme-w3css-basic-github-io"" + '.disqus.com/embed.js';
        s.setAttribute('data-timestamp', +new Date());

```

looks good to me...

```
Hugo Static Site Generator v0.42.1 linux/amd64 BuildDate: 2018-06-13T10:16:36Z
GOOS=""linux""
GOARCH=""amd64""
GOVERSION=""go1.10.1""
```
<issue_comment>username_0: Sorry, it was my stupid mistake.
I didn't place my disqusShortname line in plain config.toml area but it's params area.  So it hadn't worked.
Thanks for your kind advice, anyway 🙇<issue_closed>"
gohugoio/hugo,289706302,4295,,"[{'action': 'opened', 'author': 'bep', 'comment_id': None, 'datetime': '2018-01-18 17:09:00+00:00', 'masked_author': 'username_0', 'text': 'Which was a breaking change in Hugo 0.33 -- and a bad idea. This is used in GetByPrefix etc.', 'title': 'Resource.Name contains subdir for images', 'type': 'issue'}
 {'action': 'created', 'author': 'bep', 'comment_id': 358715418.0, 'datetime': '2018-01-18 17:12:32+00:00', 'masked_author': 'username_0', 'text': 'See https://discourse.gohugo.io/t/resources-byprefix-requires-dir-path-since-33/10074/3', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'regisphilibert', 'comment_id': 358772467.0, 'datetime': '2018-01-18 20:31:22+00:00', 'masked_author': 'username_1', 'text': 'Will this also change the current metadata targeting using src? For now, it only works if subdir is included in the request.\r\nsrc: images/sunset.jpg ✅\r\nsrc: */sunset.jpg ✅\r\nsrc: sunset.jpg 🚫\r\n\r\nI like it as is. It makes sense.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'bep', 'comment_id': 358774896.0, 'datetime': '2018-01-18 20:40:31+00:00', 'masked_author': 'username_0', 'text': 'Yes.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'regisphilibert', 'comment_id': 358800197.0, 'datetime': '2018-01-18 22:17:09+00:00', 'masked_author': 'username_1', 'text': ""Too bad, the current behaviour made a lot of sense considering that the key chosen is 'src' rather than 'filename' or 'basename'. Intuitively we're expecting it to be matched with the src of the image relative to the bundle. \r\nPlus it is was nice feat to be able to easily batch metadata every files in a directory. You could target all the files you deliberately put in the image directory regardless of their filename/extension."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'bep', 'comment_id': 358805212.0, 'datetime': '2018-01-18 22:38:13+00:00', 'masked_author': 'username_0', 'text': 'I will think a little before doing...', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'kaushalmodi', 'comment_id': 358834931.0, 'datetime': '2018-01-19 01:09:22+00:00', 'masked_author': 'username_2', 'text': 'I believe I hit this same issue while writing a test case [here][1].  Note how in the first `src` in that example, I needed to hard-code the `image/` sub-directory.. `*/copy-of-*.png` would not work. \r\n\r\n[1]: https://raw.githubusercontent.com/username_2/ox-hugo/master/test/site/content/bundles/page-bundle-a/index.md', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'bep', 'comment_id': 358876746.0, 'datetime': '2018-01-19 06:14:40+00:00', 'masked_author': 'username_0', 'text': 'OK, I have slept on this, and I\'m not convinced that the current solution is so far off. It was unintended, and it has some inconsistency in it ... but. We need to think this through before committing.\r\n\r\nGiven this bundle:\r\n\r\n```bash\r\nmy-bundle\r\n├── a.jpg\r\n├── b.jpg\r\n├── holiday-photos\r\n│\xa0\xa0 ├── a.jpg\r\n│\xa0\xa0 ├── b.jpg\r\n│\xa0\xa0 └── c.jpg\r\n├── index.md\r\n├── logos\r\n│\xa0\xa0 ├── a.jpg\r\n│\xa0\xa0 └── b.jpg\r\n├── notes\r\n│\xa0\xa0 ├── notes1.md\r\n│\xa0\xa0 └── notes2.md\r\n└── notes.md\r\n````\r\nThe ambigous naming is intended, but real enough with the image processing software of today. \r\n\r\nThe default value of `Name` (used in both the *Prefix* methods and the `src` matching) are:\r\n\r\n* For the content files it is (if my memory serves me right) ""notes"", ""notes1"" etc. No directory name. **This is inconsistent**\r\n* For the images, `Name` is the relative path (Unix style slashes) to the file: `a.jpg` (root), `holiday-photos/a.jpg`.\r\n\r\nMy thoughts about this are:\r\n\r\n1. We need to find the solution that _fits best_ (there is no perfect solution).\r\n2. Most people have everything in one folder. And if not:\r\n3. There is a thought behind how you organize your images. There is a reason why you want to split them into folders, you don\'t want them to end up in the same basket.\r\n\r\nIn the above example, there is (almost) never a situation where I want to use the holiday photos and logos in the same collection.\r\n\r\nI most likely want to do this:\r\n\r\n```bash\r\nsrc = "" holiday-photos/*.*""\r\ntitle = ""Holiday Photo #:counter""\r\nname = ""holiday-photo-#:counter""\r\n```\r\n\r\nAnd in the template:\r\n\r\n```bash\r\n{{ (.ByType ""images"").ByPrefix ""holiday"" }}\r\n```\r\n\r\nOr something like that. And similar with the logos. If you don\'t want to define any front matter, to get the holiday photos only:\r\n\r\n```bash\r\n{{ ByPrefix "" holiday-photos"" }}\r\n```\r\n\r\nThe above would not be possible with Hugo 0.32.\r\n\r\nSo, my proposal is this:\r\n\r\n* We fix the `Name` inconsistency for the content files (also include sub-folders in the name for them)\r\n* If @username_2 is right about the ""*/*.jpg"" matching not working, we try to find a fix for that -- but that is not a deal breaker for this particular issue.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'regisphilibert', 'comment_id': 358964394.0, 'datetime': '2018-01-19 13:21:31+00:00', 'masked_author': 'username_1', 'text': 'I agree 100% on the need for something like what you described above and just wonder if ‘ByPrefix’ is the right method for that. While we’re just innocently chatting, hear me out.\r\n\r\n1/ I wonder if the notion of prefix really apply anymore ? Again the only graps I have of this notion is how it was used in Hugo, (for me it’s just the beginning of a string) so feel free to educate me.\r\n2/ Now that the user has been introduced to the pattern matching potential of the metadata src param. Shouldn’t he/she expect from the package a method at least equally powerful?\r\n\r\nWould it be too far of as to suggest the keeping of .ByPrefix as was in .32, and the introduction of a new method (don’t mind the naming):\r\n\r\n`{{ .Resources.ByPath ""images-what/*"" }}`\r\n`{{ .Resources.ByPath ""*/*.jpg"" }}`\r\n\r\nThis would bring symmetry only not on ByPrefix. \r\n\r\nI don’t want to complexifie the resource package. \r\n\r\nI really appreciate its current state, I just happen to be really excited by the newly introduced «\xa0glob like\xa0» pattern matching of «\xa0src\xa0» and realize ByPrefix/GetByPrefix uses a less powerful pattern matching leaving the package less equipped than its Front Matter’s metadata logic. \r\n\r\nFeel free counter, question, or shrug off.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'kaushalmodi', 'comment_id': 359038470.0, 'datetime': '2018-01-19 17:42:52+00:00', 'masked_author': 'username_2', 'text': 'Hmm, that **does** work. Sorry for the confusion.. I must have missed out on that forward slash earlier.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'bep', 'comment_id': 359040211.0, 'datetime': '2018-01-19 17:49:39+00:00', 'masked_author': 'username_0', 'text': '@username_1 finding files/folders by prefix is very common and easy to understand -- it fits nicely with the directory structure and it solves 90% of the use cases (guesswork).\r\n\r\n**And this issue is not about adding more methods.** \r\n\r\nWe also have `where` to do advanced queries.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'bep', 'comment_id': 359043802.0, 'datetime': '2018-01-19 18:03:14+00:00', 'masked_author': 'username_0', 'text': ""But note that I have no problem adding a `Resources.ByMatch` (or something) that uses shell file name pattern same as in that `src` thing.\r\n\r\nBut that method should use the same value to match against as the existing `ByPrefix`. And I'm leaning towards how it currently works for images."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'regisphilibert', 'comment_id': 359059177.0, 'datetime': '2018-01-19 19:03:44+00:00', 'masked_author': 'username_1', 'text': 'Agree.\r\n\r\nThanks for your answers.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'bep', 'comment_id': 359079349.0, 'datetime': '2018-01-19 20:24:49+00:00', 'masked_author': 'username_0', 'text': 'And to add to the motivation of keeping the Prefix* Methods: It will be faster than the Match variant. Probably not important in most projects.', 'title': None, 'type': 'comment'}
 {'action': 'closed', 'author': 'bep', 'comment_id': None, 'datetime': '2018-01-21 13:42:55+00:00', 'masked_author': 'username_0', 'text': '', 'title': None, 'type': 'issue'}]","<issue_start><issue_comment>Title: Resource.Name contains subdir for images
username_0: Which was a breaking change in Hugo 0.33 -- and a bad idea. This is used in GetByPrefix etc.
<issue_comment>username_0: See https://discourse.gohugo.io/t/resources-byprefix-requires-dir-path-since-33/10074/3
<issue_comment>username_1: Will this also change the current metadata targeting using src? For now, it only works if subdir is included in the request.
src: images/sunset.jpg ✅
src: */sunset.jpg ✅
src: sunset.jpg 🚫

I like it as is. It makes sense.
<issue_comment>username_0: Yes.
<issue_comment>username_1: Too bad, the current behaviour made a lot of sense considering that the key chosen is 'src' rather than 'filename' or 'basename'. Intuitively we're expecting it to be matched with the src of the image relative to the bundle. 
Plus it is was nice feat to be able to easily batch metadata every files in a directory. You could target all the files you deliberately put in the image directory regardless of their filename/extension.
<issue_comment>username_0: I will think a little before doing...
<issue_comment>username_2: I believe I hit this same issue while writing a test case [here][1].  Note how in the first `src` in that example, I needed to hard-code the `image/` sub-directory.. `*/copy-of-*.png` would not work. 

[1]: https://raw.githubusercontent.com/username_2/ox-hugo/master/test/site/content/bundles/page-bundle-a/index.md
<issue_comment>username_0: OK, I have slept on this, and I'm not convinced that the current solution is so far off. It was unintended, and it has some inconsistency in it ... but. We need to think this through before committing.

Given this bundle:

```bash
my-bundle
├── a.jpg
├── b.jpg
├── holiday-photos
│   ├── a.jpg
│   ├── b.jpg
│   └── c.jpg
├── index.md
├── logos
│   ├── a.jpg
│   └── b.jpg
├── notes
│   ├── notes1.md
│   └── notes2.md
└── notes.md
````
The ambigous naming is intended, but real enough with the image processing software of today. 

The default value of `Name` (used in both the *Prefix* methods and the `src` matching) are:

* For the content files it is (if my memory serves me right) ""notes"", ""notes1"" etc. No directory name. **This is inconsistent**
* For the images, `Name` is the relative path (Unix style slashes) to the file: `a.jpg` (root), `holiday-photos/a.jpg`.

My thoughts about this are:

1. We need to find the solution that _fits best_ (there is no perfect solution).
2. Most people have everything in one folder. And if not:
3. There is a thought behind how you organize your images. There is a reason why you want to split them into folders, you don't want them to end up in the same basket.

In the above example, there is (almost) never a situation where I want to use the holiday photos and logos in the same collection.

I most likely want to do this:

```bash
src = "" holiday-photos/*.*""
title = ""Holiday Photo #:counter""
name = ""holiday-photo-#:counter""
```

And in the template:

```bash
{{ (.ByType ""images"").ByPrefix ""holiday"" }}
```

Or something like that. And similar with the logos. If you don't want to define any front matter, to get the holiday photos only:

```bash
{{ ByPrefix "" holiday-photos"" }}
```

The above would not be possible with Hugo 0.32.

So, my proposal is this:

* We fix the `Name` inconsistency for the content files (also include sub-folders in the name for them)
* If @username_2 is right about the ""*/*.jpg"" matching not working, we try to find a fix for that -- but that is not a deal breaker for this particular issue.
<issue_comment>username_1: I agree 100% on the need for something like what you described above and just wonder if ‘ByPrefix’ is the right method for that. While we’re just innocently chatting, hear me out.

1/ I wonder if the notion of prefix really apply anymore ? Again the only graps I have of this notion is how it was used in Hugo, (for me it’s just the beginning of a string) so feel free to educate me.
2/ Now that the user has been introduced to the pattern matching potential of the metadata src param. Shouldn’t he/she expect from the package a method at least equally powerful?

Would it be too far of as to suggest the keeping of .ByPrefix as was in .32, and the introduction of a new method (don’t mind the naming):

`{{ .Resources.ByPath ""images-what/*"" }}`
`{{ .Resources.ByPath ""*/*.jpg"" }}`

This would bring symmetry only not on ByPrefix. 

I don’t want to complexifie the resource package. 

I really appreciate its current state, I just happen to be really excited by the newly introduced « glob like » pattern matching of « src » and realize ByPrefix/GetByPrefix uses a less powerful pattern matching leaving the package less equipped than its Front Matter’s metadata logic. 

Feel free counter, question, or shrug off.
<issue_comment>username_2: Hmm, that **does** work. Sorry for the confusion.. I must have missed out on that forward slash earlier.
<issue_comment>username_0: @username_1 finding files/folders by prefix is very common and easy to understand -- it fits nicely with the directory structure and it solves 90% of the use cases (guesswork).

**And this issue is not about adding more methods.** 

We also have `where` to do advanced queries.
<issue_comment>username_0: But note that I have no problem adding a `Resources.ByMatch` (or something) that uses shell file name pattern same as in that `src` thing.

But that method should use the same value to match against as the existing `ByPrefix`. And I'm leaning towards how it currently works for images.
<issue_comment>username_1: Agree.

Thanks for your answers.
<issue_comment>username_0: And to add to the motivation of keeping the Prefix* Methods: It will be faster than the Match variant. Probably not important in most projects.<issue_closed>"
gohugoio/hugo,400986430,5620,,"[{'action': 'opened', 'author': 'pjebs', 'comment_id': None, 'datetime': '2019-01-19 11:18:31+00:00', 'masked_author': 'username_0', 'text': 'Currently recommend approach to template debugging is:\r\n\r\nhttps://gohugo.io/templates/template-debugging/\r\n\r\n```\r\n{{ printf ""%#v"" $.Site }}\r\n{{ printf ""%#v"" .Permalink }}\r\n{{ printf ""%#v"" . }}\r\n```\r\n\r\nIt would be far more convenient and more powerful if https://github.com/davecgh/go-spew was added as a template function so we can do something like:\r\n\r\n```\r\n{{ spew $.Site }}\r\n```', 'title': 'Template debugging', 'type': 'issue'}
 {'action': 'created', 'author': 'bep', 'comment_id': 455790147.0, 'datetime': '2019-01-19 15:35:01+00:00', 'masked_author': 'username_1', 'text': 'How does your last example work/look like?', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'pjebs', 'comment_id': 455811675.0, 'datetime': '2019-01-19 20:14:23+00:00', 'masked_author': 'username_0', 'text': '```\r\ntemplate.FuncMap{\r\n    ""spew"": func(input interface{}) string {\r\n      return fmt.Sprintf(""%v"", spew.Sdump(input))\r\n    },\r\n  }\r\n```', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'pjebs', 'comment_id': 455811884.0, 'datetime': '2019-01-19 20:17:09+00:00', 'masked_author': 'username_0', 'text': ""You'll have to try it and experience it to witness and feel the full benefits."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'pjebs', 'comment_id': 461386399.0, 'datetime': '2019-02-07 11:43:58+00:00', 'masked_author': 'username_0', 'text': 'It will look like this sort of thing:\r\n\r\n```\r\n(main.Foo) {\r\n unexportedField: (*main.Bar)(0xf84002e210)({\r\n  flag: (main.Flag) flagTwo,\r\n  data: (uintptr) <nil>\r\n }),\r\n ExportedField: (map[interface {}]interface {}) {\r\n  (string) ""one"": (bool) true\r\n }\r\n}\r\n```\r\n\r\ninstead of:\r\n\r\n```\r\nhugolib.Pages{(*hugolib.Page)(0xc0003c7400), (hugolib.Page)(0xc0008b5400), (hugolib.Page)(0xc0008b4a00), (*hugolib.Page)(0xc0008b4f00)}\r\n```\r\n\r\n**It will recursively dereference pointers.**', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'moorereason', 'comment_id': 470629193.0, 'datetime': '2019-03-07 17:56:14+00:00', 'masked_author': 'username_2', 'text': 'Duplicate of #3957', 'title': None, 'type': 'comment'}
 {'action': 'closed', 'author': 'moorereason', 'comment_id': None, 'datetime': '2019-03-07 17:56:14+00:00', 'masked_author': 'username_2', 'text': '', 'title': None, 'type': 'issue'}]","<issue_start><issue_comment>Title: Template debugging
username_0: Currently recommend approach to template debugging is:

https://gohugo.io/templates/template-debugging/

```
{{ printf ""%#v"" $.Site }}
{{ printf ""%#v"" .Permalink }}
{{ printf ""%#v"" . }}
```

It would be far more convenient and more powerful if https://github.com/davecgh/go-spew was added as a template function so we can do something like:

```
{{ spew $.Site }}
```
<issue_comment>username_1: How does your last example work/look like?
<issue_comment>username_0: ```
template.FuncMap{
    ""spew"": func(input interface{}) string {
      return fmt.Sprintf(""%v"", spew.Sdump(input))
    },
  }
```
<issue_comment>username_0: You'll have to try it and experience it to witness and feel the full benefits.
<issue_comment>username_0: It will look like this sort of thing:

```
(main.Foo) {
 unexportedField: (*main.Bar)(0xf84002e210)({
  flag: (main.Flag) flagTwo,
  data: (uintptr) <nil>
 }),
 ExportedField: (map[interface {}]interface {}) {
  (string) ""one"": (bool) true
 }
}
```

instead of:

```
hugolib.Pages{(*hugolib.Page)(0xc0003c7400), (hugolib.Page)(0xc0008b5400), (hugolib.Page)(0xc0008b4a00), (*hugolib.Page)(0xc0008b4f00)}
```

**It will recursively dereference pointers.**
<issue_comment>username_2: Duplicate of #3957<issue_closed>"
cake-build/website,393036927,605,,"[{'action': 'opened', 'author': 'TraGicCode', 'comment_id': None, 'datetime': '2018-12-20 13:00:44+00:00', 'masked_author': 'username_0', 'text': 'The documentation on how to pass custom arguments to cake should be updated to contain an example of using the TeamCity powershell runner ( build step ).  I\'m sure i\'m not the only one to run into this but if you don\'t pass custom arguments with a double dash and equals teamcity just will not parse it correctly.\r\n\r\nWhat Page of Documentation to Update?\r\n\r\nEither this https://cakebuild.net/docs/fundamentals/args-and-environment-vars or add a new section for running in certain CI Servers.\r\n\r\nWhat made cake work with custom arguments in teamcity?\r\n\r\nScript file: Text Box\r\n```\r\nbuild.ps1\r\n```\r\n\r\nScript arguments: Text Box\r\n```\r\n-Target Teamcity -Configuration Release --VersionNumber=""%build.number%"" --ProGetDeployablesApiKey=""%ProGet API Key%"" --OctopusApiKey=""%Octopus API Key%""\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/6224270/50286266-80ef2200-0424-11e9-9f25-311139555856.png)', 'title': 'Add Example in documentation for teamcity powershell runner', 'type': 'issue'}
 {'action': 'created', 'author': 'devlead', 'comment_id': 448992253.0, 'datetime': '2018-12-20 13:02:28+00:00', 'masked_author': 'username_1', 'text': 'Probably best would perhaps be a new page TeamCity page under \r\nhttps://cakebuild.net/docs/build-systems/', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'TraGicCode', 'comment_id': 448994193.0, 'datetime': '2018-12-20 13:09:16+00:00', 'masked_author': 'username_0', 'text': ""Hey @username_1 ,\r\n\r\nI agree.  I actually didn't even see the azure devops one.  Technically i think that should have been called azure pipelines.  Azure Devops represents azure pipelines + everything else like agile board and azure repos etc.  The whole development lifecycle.\r\n\r\nAnyways, thanks for the quick response."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'mattsalmon', 'comment_id': 571102952.0, 'datetime': '2020-01-06 11:19:11+00:00', 'masked_author': 'username_2', 'text': '@username_3  Did any work happen on this? It would be a really useful addition to the Cake documentation.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'pascalberger', 'comment_id': 703148802.0, 'datetime': '2020-10-03 18:51:30+00:00', 'masked_author': 'username_3', 'text': '@username_2 Not yet. This issue (and #1047) are still up for grabs', 'title': None, 'type': 'comment'}]","<issue_start><issue_comment>Title: Add Example in documentation for teamcity powershell runner
username_0: The documentation on how to pass custom arguments to cake should be updated to contain an example of using the TeamCity powershell runner ( build step ).  I'm sure i'm not the only one to run into this but if you don't pass custom arguments with a double dash and equals teamcity just will not parse it correctly.

What Page of Documentation to Update?

Either this https://cakebuild.net/docs/fundamentals/args-and-environment-vars or add a new section for running in certain CI Servers.

What made cake work with custom arguments in teamcity?

Script file: Text Box
```
build.ps1
```

Script arguments: Text Box
```
-Target Teamcity -Configuration Release --VersionNumber=""%build.number%"" --ProGetDeployablesApiKey=""%ProGet API Key%"" --OctopusApiKey=""%Octopus API Key%""
```

![image](https://user-images.githubusercontent.com/6224270/50286266-80ef2200-0424-11e9-9f25-311139555856.png)
<issue_comment>username_1: Probably best would perhaps be a new page TeamCity page under 
https://cakebuild.net/docs/build-systems/
<issue_comment>username_0: Hey @username_1 ,

I agree.  I actually didn't even see the azure devops one.  Technically i think that should have been called azure pipelines.  Azure Devops represents azure pipelines + everything else like agile board and azure repos etc.  The whole development lifecycle.

Anyways, thanks for the quick response.
<issue_comment>username_2: @username_3  Did any work happen on this? It would be a really useful addition to the Cake documentation.
<issue_comment>username_3: @username_2 Not yet. This issue (and #1047) are still up for grabs"
ethereum/ethereum-org-website,816245917,2486,,"[{'action': 'opened', 'author': 'BManess910', 'comment_id': None, 'datetime': '2021-02-25 09:19:47+00:00', 'masked_author': 'username_0', 'text': 'We\'ll consider [our article policy](https://ethereum.org/en/contributing/adding-articles/) when reviewing the tutorial, so please take a look there first.(Start)\n""Mission Statement In Which Any Individual, Team, Network Engineer should always strive to remember, and encourage integration upon this Blockchain PowerPoint Presentation within any format you wish to Present to the Upcoming Events in the Ethereum.org Community,""Our Elite Network Communities of Engineers and Developer\'s Visions Will Become The Performed Statements That will be Executed Developmental Platform Software Missions.Performing Structured Engineering Services,Solutions, and Data.NET Security Alliances. The Future of Tommorow, is Today\'s Vision in Time, Ethereum.org\'s Mission is to be the BEST PORTAL for Ethereum\'s Growing Blockchain\'s Community and Developed Platforms Future."" -GBManess\n                             Founder/CEO of TokeNETx_io /Global-COM Group LLC/GlobalBiTx(™️)/i.NETx Software Solutions/GlobalSEC.net/org Data Recovery, Software Security Network ""OUR TEAMWORK Makes... The DREAM\'S WORK."" #2021Goals4US\n\n02/25/2021 \n\n\n<!-- What topics are covered in your tutorial? Check out the current tags on https://ethereum.org/en/developers/tutorials/ but feel free to add new ones -->\n\n**Tutorial title**\n\n<!-- What is the title of your tutorial?-->\n\n**Tutorial description**\n\n<!-- Summarise what the user should be able to accomplish by following tutorial -->\n\n**Publication**\n\n<!-- If it\'s been published elsewhere already, let us know -->\n\n**Skill level**\n\n<!-- What level of experience does someone need to be to complete the tutorial? Beginner/Intermediate/Advanced -->\n\n**Paste in your tutorial below**\n\n<!-- Please paste in markdown -->', 'title': 'Smart Contract Blockchain Ambassador Network (EDU)', 'type': 'issue'}
 {'action': 'created', 'author': 'BManess910', 'comment_id': 785755930.0, 'datetime': '2021-02-25 09:33:57+00:00', 'masked_author': 'username_0', 'text': 'ETH Address: TokeNETx.io (TNET)  0xD1bD7615b91a20903C295A3BC602C35546538850', 'title': None, 'type': 'comment'}
 {'action': 'closed', 'author': 'ryancreatescopy', 'comment_id': None, 'datetime': '2021-02-25 12:23:58+00:00', 'masked_author': 'username_1', 'text': '', 'title': None, 'type': 'issue'}]","<issue_start><issue_comment>Title: Smart Contract Blockchain Ambassador Network (EDU)
username_0: We'll consider [our article policy](https://ethereum.org/en/contributing/adding-articles/) when reviewing the tutorial, so please take a look there first.(Start)
""Mission Statement In Which Any Individual, Team, Network Engineer should always strive to remember, and encourage integration upon this Blockchain PowerPoint Presentation within any format you wish to Present to the Upcoming Events in the Ethereum.org Community,""Our Elite Network Communities of Engineers and Developer's Visions Will Become The Performed Statements That will be Executed Developmental Platform Software Missions.Performing Structured Engineering Services,Solutions, and Data.NET Security Alliances. The Future of Tommorow, is Today's Vision in Time, Ethereum.org's Mission is to be the BEST PORTAL for Ethereum's Growing Blockchain's Community and Developed Platforms Future."" -GBManess
                             Founder/CEO of TokeNETx_io /Global-COM Group LLC/GlobalBiTx(™️)/i.NETx Software Solutions/GlobalSEC.net/org Data Recovery, Software Security Network ""OUR TEAMWORK Makes... The DREAM'S WORK."" #2021Goals4US

02/25/2021 


<!-- What topics are covered in your tutorial? Check out the current tags on https://ethereum.org/en/developers/tutorials/ but feel free to add new ones -->

**Tutorial title**

<!-- What is the title of your tutorial?-->

**Tutorial description**

<!-- Summarise what the user should be able to accomplish by following tutorial -->

**Publication**

<!-- If it's been published elsewhere already, let us know -->

**Skill level**

<!-- What level of experience does someone need to be to complete the tutorial? Beginner/Intermediate/Advanced -->

**Paste in your tutorial below**

<!-- Please paste in markdown -->
<issue_comment>username_0: ETH Address: TokeNETx.io (TNET)  0xD1bD7615b91a20903C295A3BC602C35546538850<issue_closed>"
newrelic/developer-website,1102630823,2019,"{'number': 2019.0, 'repo': 'developer-website', 'user_login': 'newrelic'}","[{'action': 'opened', 'author': 'jcountsNR', 'comment_id': None, 'datetime': '2022-01-14T00:23:25Z', 'masked_author': 'username_0', 'text': '## Description\r\n\r\nAdding a new page under the \'Contribute to Quickstarts\' guide which should help partners be able to integrate their data easier.\r\n\r\n\r\n## Screenshot(s)\r\n\r\n<img width=""1631"" alt=""Screen Shot 2022-01-13 at 4 15 35 PM"" src=""https://user-images.githubusercontent.com/94138069/149429206-f73b4ce8-8cb9-4022-af1e-1c7fa7fff663.png"">\r\n\r\n\r\n## Use Conventional Commits\r\n\r\nPlease help the maintainers by leveraging the following [conventional commit](https://www.conventionalcommits.org/en/v1.0.0/)\r\nstandards in your pull request title and commit messages.\r\n\r\n## Use `chore`\r\n\r\n* for minor changes / additions / corrections to content.\r\n* for minor changes / additions / corrections to images.\r\n* for minor non-functional changes / additions to github actions, github templates, package or config updates, etc\r\n\r\n```bash\r\ngit commit -m ""chore: adjusting config and content""\r\n```\r\n\r\n## Use `fix`\r\n\r\n* for minor functional corrections to code.\r\n\r\n```bash\r\ngit commit -m ""fix: typo and prop error in the code of conduct""\r\n```\r\n\r\n## Use `feat`\r\n\r\n* for major functional changes or additions to code.\r\n\r\n```bash\r\ngit commit -m ""feat(media): creating a video landing page""\r\n```', 'title': ""feat: Created new 'data integration' page in contribute to quickstarts section"", 'type': 'issue'}
 {'action': 'created', 'author': 'jcountsNR', 'comment_id': 1012638450.0, 'datetime': '2022-01-14 00:24:29+00:00', 'masked_author': 'username_0', 'text': '@jaesius , please review when you get time and let me know. We can set up time to review as well if needed.', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'alexronquillo', 'comment_id': 1016622936.0, 'datetime': '2022-01-19 16:09:54+00:00', 'masked_author': 'username_1', 'text': 'In other words, your piece would be an alternative starting point, except it doesn\'t work with data that\'s relevant to the narrative. Lab procedures need to be consistent with the narrative.\r\n\r\nSo, I recommend you either:\r\n\r\n- **Option 1:** Create a new, optional lab procedure that comes before [Deploy your application](https://developer.newrelic.com/contribute-to-quickstarts/build-a-quickstart/deploy-your-application/). Call it something like ""Instrument your application"". In it, have the user start with a version of FlashDB that doesn\'t send data to New Relic. Next, have them add the instrumentation so they end up with the version of FlashDB that they use in ""Deploy your application"". This way, the rest of the narrative follows naturally. (This option would mean dropping the content you wrote and starting from scratch.)\r\n- **Option 2:** Move the guide you wrote under the top-level ""Collect data"" nav item on the dev site. Drop all mentions of quickstarts (sending events isn\'t specific to quickstarts, anyway). Then, reference this guide from the quickstarts lab for users that aren\'t already sending data to New Relic. (We can talk about where this might fit into the lab if you decide to go this route.)\r\n\r\nWhich option you choose depends on your goal.\r\n\r\nOne last question that\'s irrelevant to the rest of my comments: you mention in the PR that your goal is to ""help partners be able to integrate their data easier."" Does this guide accomplish that goal? I wonder if showing a couple quick examples of sending events is sufficient. What if they want to send metrics, for example? To me, this seems more like a hello world guide on using the Events API.\r\n\r\n@mehreentahir16 and I are here to work with you through these decisions, so let me know what you think. If I said anything that doesn\'t make sense, let me know!', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'jcountsNR', 'comment_id': 1016674117.0, 'datetime': '2022-01-19 17:03:24+00:00', 'masked_author': 'username_0', 'text': ""Hi @username_1 , thanks for the feedback! My goal is to give a how-to guide specifically for partners to set up the data integration with New Relic. This is a bit different than an end user perspective, since things like License key is more specific to each end user. The lab that exists now 'Build a quickstart' effectively skips this step by just having them run an already instrumented docker container.\r\n\r\nOption 1 seems like the right way to go actually, and just have it as an optional/alternative intro to the lab. I will have to rewrite it to fit this though. Also, I went with events since that is the most common use case among partners. If you think I should include metrics, logs, and traces, should I include some notes as a sidebar? Or repeat the steps multiple times?"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'alexronquillo', 'comment_id': 1016706412.0, 'datetime': '2022-01-19 17:38:46+00:00', 'masked_author': 'username_1', 'text': '@username_0 I guess I\'m a little confused about the target audience. If a partner is building a quickstart, isn\'t the assumption that they\'ve already instrumented their software to send data to New Relic. The purpose of quickstarts is to collect that data into a distributable way so end users can quickly see dashboards, alerts, etc. about the data.\r\n\r\nIf the partner is currently not sending data to New Relic at all, I think that\'s a big topic with many facets that isn\'t really covered by a simple how-to guide, IMO. We have many docs on how to get data into New Relic, including those in the ""Collect data"" directory, such as [this one](https://developer.newrelic.com/collect-data/collect-data-from-any-source/).', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'jcountsNR', 'comment_id': 1016725980.0, 'datetime': '2022-01-19 18:02:42+00:00', 'masked_author': 'username_0', 'text': ""This one you might be right about, and the problem I'm having is thinking of a way to cast a wide enough net on the how to. We are just noticing our biggest blocker to getting partners in our catalog is getting the data integration done, so we wanted to try something different. I could probably do a different guide with just links out to the various ways to ingest data, and maybe that would steer them in the right direction."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'alexronquillo', 'comment_id': 1016768975.0, 'datetime': '2022-01-19 18:53:59+00:00', 'masked_author': 'username_1', 'text': 'Like [this](https://developer.newrelic.com/collect-data/collect-data-from-any-source/) or something different?', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'alexronquillo', 'comment_id': 1018564009.0, 'datetime': '2022-01-21 14:39:58+00:00', 'masked_author': 'username_1', 'text': ""So, after some reflection, I'm still not sure I follow this. The way I see it, there are two goals:\r\n\r\n1. Getting data into New Relic\r\n2. Creating a quickstart\r\n\r\nTo me, creating a quickstart only comes after getting data into New Relic, which is a task in itself. The existing lab aims to cover goal 2. Namely, assuming you have integrated your app with New Relic, here's how to build a quickstart.\r\n\r\nSo what's left is goal 1, showing partners how to get data into New Relic. I think this is a big enough topic that it deserves its own content. In my last comment, I linked to a guide that seems to do what you suggested. If it doesn't, let's talk about what exactly you're looking for to help partners accomplish this goal. Are you looking for an example-based tutorial? Are you looking for a narrative-based lab? Are you looking for exhaustive coverage of New Relic telemetry?\r\n\r\nHere are some links to check out to move the conversation forward:\r\n\r\n- [Data and APIs](https://docs.newrelic.com/docs/data-apis/get-started/nrdb-horsepower-under-hood)\r\n- [Collect data](https://developer.newrelic.com/collect-data/)\r\n- [Event API](https://docs.newrelic.com/docs/data-apis/ingest-apis/introduction-event-api/)\r\n- [Custom data course](https://learn.newrelic.com/custom-data-with-insights)\r\n- [Python SDK (with examples)](https://github.com/newrelic/newrelic-telemetry-sdk-python)\r\n\r\nIf we can pinpoint what is missing from these resources, it may help us understand what you want to build.\r\n\r\n@username_0"", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'jcountsNR', 'comment_id': 1018702909.0, 'datetime': '2022-01-21 17:12:50+00:00', 'masked_author': 'username_0', 'text': ""@username_1 , you are spot on with the goal here. The information at bulk seems to be there, but it's been difficult to allow them to self-serve and get data to New Relic in some cases. After this conversation I'm starting to think that a narrative lab might make the most sense, because we already have example tutorials existing, with curl commands and with code examples, and we already have [Collect data](https://developer.newrelic.com/collect-data/) which casts a broad net of examples. \r\n\r\nSo maybe what you had mentioned earlier, a flashDB that is not making any POST requests, and we can provide a lab that will set up that data integration from there. Any tips or thoughts for how to get started would be helpful."", 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'jcountsNR', 'comment_id': 1028510620.0, 'datetime': '2022-02-03 01:13:24+00:00', 'masked_author': 'username_0', 'text': '@username_1 , do you want to take a look and see what you think?', 'title': None, 'type': 'comment'}
 {'action': 'created', 'author': 'jcountsNR', 'comment_id': 1031782209.0, 'datetime': '2022-02-07 18:27:35+00:00', 'masked_author': 'username_0', 'text': '@username_1 , PR commit added. Let me know what you think.', 'title': None, 'type': 'comment'}]","<issue_start><issue_comment>Title: feat: Created new 'data integration' page in contribute to quickstarts section
username_0: ## Description

Adding a new page under the 'Contribute to Quickstarts' guide which should help partners be able to integrate their data easier.


## Screenshot(s)

<img width=""1631"" alt=""Screen Shot 2022-01-13 at 4 15 35 PM"" src=""https://user-images.githubusercontent.com/94138069/149429206-f73b4ce8-8cb9-4022-af1e-1c7fa7fff663.png"">


## Use Conventional Commits

Please help the maintainers by leveraging the following [conventional commit](https://www.conventionalcommits.org/en/v1.0.0/)
standards in your pull request title and commit messages.

## Use `chore`

* for minor changes / additions / corrections to content.
* for minor changes / additions / corrections to images.
* for minor non-functional changes / additions to github actions, github templates, package or config updates, etc

```bash
git commit -m ""chore: adjusting config and content""
```

## Use `fix`

* for minor functional corrections to code.

```bash
git commit -m ""fix: typo and prop error in the code of conduct""
```

## Use `feat`

* for major functional changes or additions to code.

```bash
git commit -m ""feat(media): creating a video landing page""
```
<issue_comment>username_0: @jaesius , please review when you get time and let me know. We can set up time to review as well if needed.
<issue_comment>username_1: In other words, your piece would be an alternative starting point, except it doesn't work with data that's relevant to the narrative. Lab procedures need to be consistent with the narrative.

So, I recommend you either:

- **Option 1:** Create a new, optional lab procedure that comes before [Deploy your application](https://developer.newrelic.com/contribute-to-quickstarts/build-a-quickstart/deploy-your-application/). Call it something like ""Instrument your application"". In it, have the user start with a version of FlashDB that doesn't send data to New Relic. Next, have them add the instrumentation so they end up with the version of FlashDB that they use in ""Deploy your application"". This way, the rest of the narrative follows naturally. (This option would mean dropping the content you wrote and starting from scratch.)
- **Option 2:** Move the guide you wrote under the top-level ""Collect data"" nav item on the dev site. Drop all mentions of quickstarts (sending events isn't specific to quickstarts, anyway). Then, reference this guide from the quickstarts lab for users that aren't already sending data to New Relic. (We can talk about where this might fit into the lab if you decide to go this route.)

Which option you choose depends on your goal.

One last question that's irrelevant to the rest of my comments: you mention in the PR that your goal is to ""help partners be able to integrate their data easier."" Does this guide accomplish that goal? I wonder if showing a couple quick examples of sending events is sufficient. What if they want to send metrics, for example? To me, this seems more like a hello world guide on using the Events API.

@mehreentahir16 and I are here to work with you through these decisions, so let me know what you think. If I said anything that doesn't make sense, let me know!
<issue_comment>username_0: Hi @username_1 , thanks for the feedback! My goal is to give a how-to guide specifically for partners to set up the data integration with New Relic. This is a bit different than an end user perspective, since things like License key is more specific to each end user. The lab that exists now 'Build a quickstart' effectively skips this step by just having them run an already instrumented docker container.

Option 1 seems like the right way to go actually, and just have it as an optional/alternative intro to the lab. I will have to rewrite it to fit this though. Also, I went with events since that is the most common use case among partners. If you think I should include metrics, logs, and traces, should I include some notes as a sidebar? Or repeat the steps multiple times?
<issue_comment>username_1: @username_0 I guess I'm a little confused about the target audience. If a partner is building a quickstart, isn't the assumption that they've already instrumented their software to send data to New Relic. The purpose of quickstarts is to collect that data into a distributable way so end users can quickly see dashboards, alerts, etc. about the data.

If the partner is currently not sending data to New Relic at all, I think that's a big topic with many facets that isn't really covered by a simple how-to guide, IMO. We have many docs on how to get data into New Relic, including those in the ""Collect data"" directory, such as [this one](https://developer.newrelic.com/collect-data/collect-data-from-any-source/).
<issue_comment>username_0: This one you might be right about, and the problem I'm having is thinking of a way to cast a wide enough net on the how to. We are just noticing our biggest blocker to getting partners in our catalog is getting the data integration done, so we wanted to try something different. I could probably do a different guide with just links out to the various ways to ingest data, and maybe that would steer them in the right direction.
<issue_comment>username_1: Like [this](https://developer.newrelic.com/collect-data/collect-data-from-any-source/) or something different?
<issue_comment>username_1: So, after some reflection, I'm still not sure I follow this. The way I see it, there are two goals:

1. Getting data into New Relic
2. Creating a quickstart

To me, creating a quickstart only comes after getting data into New Relic, which is a task in itself. The existing lab aims to cover goal 2. Namely, assuming you have integrated your app with New Relic, here's how to build a quickstart.

So what's left is goal 1, showing partners how to get data into New Relic. I think this is a big enough topic that it deserves its own content. In my last comment, I linked to a guide that seems to do what you suggested. If it doesn't, let's talk about what exactly you're looking for to help partners accomplish this goal. Are you looking for an example-based tutorial? Are you looking for a narrative-based lab? Are you looking for exhaustive coverage of New Relic telemetry?

Here are some links to check out to move the conversation forward:

- [Data and APIs](https://docs.newrelic.com/docs/data-apis/get-started/nrdb-horsepower-under-hood)
- [Collect data](https://developer.newrelic.com/collect-data/)
- [Event API](https://docs.newrelic.com/docs/data-apis/ingest-apis/introduction-event-api/)
- [Custom data course](https://learn.newrelic.com/custom-data-with-insights)
- [Python SDK (with examples)](https://github.com/newrelic/newrelic-telemetry-sdk-python)

If we can pinpoint what is missing from these resources, it may help us understand what you want to build.

@username_0
<issue_comment>username_0: @username_1 , you are spot on with the goal here. The information at bulk seems to be there, but it's been difficult to allow them to self-serve and get data to New Relic in some cases. After this conversation I'm starting to think that a narrative lab might make the most sense, because we already have example tutorials existing, with curl commands and with code examples, and we already have [Collect data](https://developer.newrelic.com/collect-data/) which casts a broad net of examples. 

So maybe what you had mentioned earlier, a flashDB that is not making any POST requests, and we can provide a lab that will set up that data integration from there. Any tips or thoughts for how to get started would be helpful.
<issue_comment>username_0: @username_1 , do you want to take a look and see what you think?
<issue_comment>username_0: @username_1 , PR commit added. Let me know what you think."
microsoft/TypeScript-Website,925775200,1892,"{'number': 1892.0, 'repo': 'TypeScript-Website', 'user_login': 'microsoft'}","[{'action': 'opened', 'author': 'chipit24', 'comment_id': None, 'datetime': '2021-06-21T03:03:58Z', 'masked_author': 'username_0', 'text': ""On the _Project References_ page of the documentation (https://www.typescriptlang.org/docs/handbook/project-references.html), I found that I was converting the list of absolute files paths in my mind to a folder structure of the project. I figured that using a tree structure directly to represent the project layout would be more natural for others as well–so here is a PR for it!\r\n\r\nI'm sure there's many ways to show a project/directory structure (screenshots, adding some emojis in there, etc.), but through the power of Google and Stack Overflow, I came across https://tree.nathanfriend.io and it generated a pretty nice layout, so I used that.\r\n\r\nThis is my first PR here so a pre-emptive apology if I've missed some process! 😬"", 'title': 'Update Project References.md', 'type': 'issue'}
 {'action': 'created', 'author': 'orta', 'comment_id': 865148766.0, 'datetime': '2021-06-21 15:54:02+00:00', 'masked_author': 'username_1', 'text': 'Yeah, this looks great - I normally use the command [tree](https://en.wikipedia.org/wiki/Tree_(command)) to generate this. Process is fine 👍🏻', 'title': None, 'type': 'comment'}]","<issue_start><issue_comment>Title: Update Project References.md
username_0: On the _Project References_ page of the documentation (https://www.typescriptlang.org/docs/handbook/project-references.html), I found that I was converting the list of absolute files paths in my mind to a folder structure of the project. I figured that using a tree structure directly to represent the project layout would be more natural for others as well–so here is a PR for it!

I'm sure there's many ways to show a project/directory structure (screenshots, adding some emojis in there, etc.), but through the power of Google and Stack Overflow, I came across https://tree.nathanfriend.io and it generated a pretty nice layout, so I used that.

This is my first PR here so a pre-emptive apology if I've missed some process! 😬
<issue_comment>username_1: Yeah, this looks great - I normally use the command [tree](https://en.wikipedia.org/wiki/Tree_(command)) to generate this. Process is fine 👍🏻"
